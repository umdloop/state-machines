
PrechargeFSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000527c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  0800540c  0800540c  0001540c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056a8  080056a8  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  080056a8  080056a8  000156a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056b0  080056b0  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056b0  080056b0  000156b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056b4  080056b4  000156b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080056b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000098  08005750  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08005750  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ffc  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002916  00000000  00000000  000340c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001048  00000000  00000000  000369e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f00  00000000  00000000  00037a28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b07f  00000000  00000000  00038928  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d5b7  00000000  00000000  000639a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f5d43  00000000  00000000  00070f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00166ca1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049b4  00000000  00000000  00166d1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080053f4 	.word	0x080053f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	080053f4 	.word	0x080053f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <HAL_Init+0x3c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a0b      	ldr	r2, [pc, #44]	; (80005ac <HAL_Init+0x3c>)
 8000580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000584:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000586:	2003      	movs	r0, #3
 8000588:	f000 f93a 	bl	8000800 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800058c:	2000      	movs	r0, #0
 800058e:	f000 f80f 	bl	80005b0 <HAL_InitTick>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d002      	beq.n	800059e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000598:	2301      	movs	r3, #1
 800059a:	71fb      	strb	r3, [r7, #7]
 800059c:	e001      	b.n	80005a2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800059e:	f003 fdaf 	bl	8004100 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005a2:	79fb      	ldrb	r3, [r7, #7]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40022000 	.word	0x40022000

080005b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <HAL_InitTick+0x68>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d022      	beq.n	800060a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <HAL_InitTick+0x6c>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4b13      	ldr	r3, [pc, #76]	; (8000618 <HAL_InitTick+0x68>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80005d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 f946 	bl	800086a <HAL_SYSTICK_Config>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d10f      	bne.n	8000604 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b0f      	cmp	r3, #15
 80005e8:	d809      	bhi.n	80005fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005ea:	2200      	movs	r2, #0
 80005ec:	6879      	ldr	r1, [r7, #4]
 80005ee:	f04f 30ff 	mov.w	r0, #4294967295
 80005f2:	f000 f910 	bl	8000816 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005f6:	4a0a      	ldr	r2, [pc, #40]	; (8000620 <HAL_InitTick+0x70>)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	e007      	b.n	800060e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	73fb      	strb	r3, [r7, #15]
 8000602:	e004      	b.n	800060e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000604:	2301      	movs	r3, #1
 8000606:	73fb      	strb	r3, [r7, #15]
 8000608:	e001      	b.n	800060e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800060a:	2301      	movs	r3, #1
 800060c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800060e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000004 	.word	0x20000004
 800061c:	20000030 	.word	0x20000030
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <HAL_IncTick+0x1c>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <HAL_IncTick+0x20>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4413      	add	r3, r2
 8000632:	4a03      	ldr	r2, [pc, #12]	; (8000640 <HAL_IncTick+0x1c>)
 8000634:	6013      	str	r3, [r2, #0]
}
 8000636:	bf00      	nop
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	200000d0 	.word	0x200000d0
 8000644:	20000004 	.word	0x20000004

08000648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  return uwTick;
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <HAL_GetTick+0x14>)
 800064e:	681b      	ldr	r3, [r3, #0]
}
 8000650:	4618      	mov	r0, r3
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	200000d0 	.word	0x200000d0

08000660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f003 0307 	and.w	r3, r3, #7
 800066e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000676:	68ba      	ldr	r2, [r7, #8]
 8000678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800067c:	4013      	ands	r3, r2
 800067e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000688:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800068c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000692:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	60d3      	str	r3, [r2, #12]
}
 8000698:	bf00      	nop
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <__NVIC_GetPriorityGrouping+0x18>)
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	0a1b      	lsrs	r3, r3, #8
 80006b2:	f003 0307 	and.w	r3, r3, #7
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	db0b      	blt.n	80006ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	f003 021f 	and.w	r2, r3, #31
 80006dc:	4907      	ldr	r1, [pc, #28]	; (80006fc <__NVIC_EnableIRQ+0x38>)
 80006de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e2:	095b      	lsrs	r3, r3, #5
 80006e4:	2001      	movs	r0, #1
 80006e6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	e000e100 	.word	0xe000e100

08000700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	6039      	str	r1, [r7, #0]
 800070a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800070c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000710:	2b00      	cmp	r3, #0
 8000712:	db0a      	blt.n	800072a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	b2da      	uxtb	r2, r3
 8000718:	490c      	ldr	r1, [pc, #48]	; (800074c <__NVIC_SetPriority+0x4c>)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	0112      	lsls	r2, r2, #4
 8000720:	b2d2      	uxtb	r2, r2
 8000722:	440b      	add	r3, r1
 8000724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000728:	e00a      	b.n	8000740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	b2da      	uxtb	r2, r3
 800072e:	4908      	ldr	r1, [pc, #32]	; (8000750 <__NVIC_SetPriority+0x50>)
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	f003 030f 	and.w	r3, r3, #15
 8000736:	3b04      	subs	r3, #4
 8000738:	0112      	lsls	r2, r2, #4
 800073a:	b2d2      	uxtb	r2, r2
 800073c:	440b      	add	r3, r1
 800073e:	761a      	strb	r2, [r3, #24]
}
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	e000e100 	.word	0xe000e100
 8000750:	e000ed00 	.word	0xe000ed00

08000754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000754:	b480      	push	{r7}
 8000756:	b089      	sub	sp, #36	; 0x24
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	f003 0307 	and.w	r3, r3, #7
 8000766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	f1c3 0307 	rsb	r3, r3, #7
 800076e:	2b04      	cmp	r3, #4
 8000770:	bf28      	it	cs
 8000772:	2304      	movcs	r3, #4
 8000774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	3304      	adds	r3, #4
 800077a:	2b06      	cmp	r3, #6
 800077c:	d902      	bls.n	8000784 <NVIC_EncodePriority+0x30>
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	3b03      	subs	r3, #3
 8000782:	e000      	b.n	8000786 <NVIC_EncodePriority+0x32>
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000788:	f04f 32ff 	mov.w	r2, #4294967295
 800078c:	69bb      	ldr	r3, [r7, #24]
 800078e:	fa02 f303 	lsl.w	r3, r2, r3
 8000792:	43da      	mvns	r2, r3
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	401a      	ands	r2, r3
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800079c:	f04f 31ff 	mov.w	r1, #4294967295
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	fa01 f303 	lsl.w	r3, r1, r3
 80007a6:	43d9      	mvns	r1, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ac:	4313      	orrs	r3, r2
         );
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3724      	adds	r7, #36	; 0x24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
	...

080007bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3b01      	subs	r3, #1
 80007c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007cc:	d301      	bcc.n	80007d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ce:	2301      	movs	r3, #1
 80007d0:	e00f      	b.n	80007f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007d2:	4a0a      	ldr	r2, [pc, #40]	; (80007fc <SysTick_Config+0x40>)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007da:	210f      	movs	r1, #15
 80007dc:	f04f 30ff 	mov.w	r0, #4294967295
 80007e0:	f7ff ff8e 	bl	8000700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <SysTick_Config+0x40>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ea:	4b04      	ldr	r3, [pc, #16]	; (80007fc <SysTick_Config+0x40>)
 80007ec:	2207      	movs	r2, #7
 80007ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	e000e010 	.word	0xe000e010

08000800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff ff29 	bl	8000660 <__NVIC_SetPriorityGrouping>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b086      	sub	sp, #24
 800081a:	af00      	add	r7, sp, #0
 800081c:	4603      	mov	r3, r0
 800081e:	60b9      	str	r1, [r7, #8]
 8000820:	607a      	str	r2, [r7, #4]
 8000822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000828:	f7ff ff3e 	bl	80006a8 <__NVIC_GetPriorityGrouping>
 800082c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	68b9      	ldr	r1, [r7, #8]
 8000832:	6978      	ldr	r0, [r7, #20]
 8000834:	f7ff ff8e 	bl	8000754 <NVIC_EncodePriority>
 8000838:	4602      	mov	r2, r0
 800083a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800083e:	4611      	mov	r1, r2
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff5d 	bl	8000700 <__NVIC_SetPriority>
}
 8000846:	bf00      	nop
 8000848:	3718      	adds	r7, #24
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b082      	sub	sp, #8
 8000852:	af00      	add	r7, sp, #0
 8000854:	4603      	mov	r3, r0
 8000856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff ff31 	bl	80006c4 <__NVIC_EnableIRQ>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f7ff ffa2 	bl	80007bc <SysTick_Config>
 8000878:	4603      	mov	r3, r0
}
 800087a:	4618      	mov	r0, r3
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000884:	b480      	push	{r7}
 8000886:	b087      	sub	sp, #28
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000892:	e17f      	b.n	8000b94 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	2101      	movs	r1, #1
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	fa01 f303 	lsl.w	r3, r1, r3
 80008a0:	4013      	ands	r3, r2
 80008a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	f000 8171 	beq.w	8000b8e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	d003      	beq.n	80008bc <HAL_GPIO_Init+0x38>
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	2b12      	cmp	r3, #18
 80008ba:	d123      	bne.n	8000904 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	08da      	lsrs	r2, r3, #3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3208      	adds	r2, #8
 80008c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	f003 0307 	and.w	r3, r3, #7
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	220f      	movs	r2, #15
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	43db      	mvns	r3, r3
 80008da:	693a      	ldr	r2, [r7, #16]
 80008dc:	4013      	ands	r3, r2
 80008de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	691a      	ldr	r2, [r3, #16]
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	f003 0307 	and.w	r3, r3, #7
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	693a      	ldr	r2, [r7, #16]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	08da      	lsrs	r2, r3, #3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	3208      	adds	r2, #8
 80008fe:	6939      	ldr	r1, [r7, #16]
 8000900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	2203      	movs	r2, #3
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	43db      	mvns	r3, r3
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	4013      	ands	r3, r2
 800091a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	f003 0203 	and.w	r2, r3, #3
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	4313      	orrs	r3, r2
 8000930:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d00b      	beq.n	8000958 <HAL_GPIO_Init+0xd4>
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	2b02      	cmp	r3, #2
 8000946:	d007      	beq.n	8000958 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800094c:	2b11      	cmp	r3, #17
 800094e:	d003      	beq.n	8000958 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	2b12      	cmp	r3, #18
 8000956:	d130      	bne.n	80009ba <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	2203      	movs	r2, #3
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	43db      	mvns	r3, r3
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	4013      	ands	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	68da      	ldr	r2, [r3, #12]
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	4313      	orrs	r3, r2
 8000980:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800098e:	2201      	movs	r2, #1
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	43db      	mvns	r3, r3
 8000998:	693a      	ldr	r2, [r7, #16]
 800099a:	4013      	ands	r3, r2
 800099c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	091b      	lsrs	r3, r3, #4
 80009a4:	f003 0201 	and.w	r2, r3, #1
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	f003 0303 	and.w	r3, r3, #3
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	d118      	bne.n	80009f8 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80009cc:	2201      	movs	r2, #1
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	fa02 f303 	lsl.w	r3, r2, r3
 80009d4:	43db      	mvns	r3, r3
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	4013      	ands	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	08db      	lsrs	r3, r3, #3
 80009e2:	f003 0201 	and.w	r2, r3, #1
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	2203      	movs	r2, #3
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	689a      	ldr	r2, [r3, #8]
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	f000 80ac 	beq.w	8000b8e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	4b5e      	ldr	r3, [pc, #376]	; (8000bb0 <HAL_GPIO_Init+0x32c>)
 8000a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3a:	4a5d      	ldr	r2, [pc, #372]	; (8000bb0 <HAL_GPIO_Init+0x32c>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6613      	str	r3, [r2, #96]	; 0x60
 8000a42:	4b5b      	ldr	r3, [pc, #364]	; (8000bb0 <HAL_GPIO_Init+0x32c>)
 8000a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a4e:	4a59      	ldr	r2, [pc, #356]	; (8000bb4 <HAL_GPIO_Init+0x330>)
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	089b      	lsrs	r3, r3, #2
 8000a54:	3302      	adds	r3, #2
 8000a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	f003 0303 	and.w	r3, r3, #3
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	220f      	movs	r2, #15
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a78:	d025      	beq.n	8000ac6 <HAL_GPIO_Init+0x242>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a4e      	ldr	r2, [pc, #312]	; (8000bb8 <HAL_GPIO_Init+0x334>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d01f      	beq.n	8000ac2 <HAL_GPIO_Init+0x23e>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a4d      	ldr	r2, [pc, #308]	; (8000bbc <HAL_GPIO_Init+0x338>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d019      	beq.n	8000abe <HAL_GPIO_Init+0x23a>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a4c      	ldr	r2, [pc, #304]	; (8000bc0 <HAL_GPIO_Init+0x33c>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d013      	beq.n	8000aba <HAL_GPIO_Init+0x236>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a4b      	ldr	r2, [pc, #300]	; (8000bc4 <HAL_GPIO_Init+0x340>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d00d      	beq.n	8000ab6 <HAL_GPIO_Init+0x232>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a4a      	ldr	r2, [pc, #296]	; (8000bc8 <HAL_GPIO_Init+0x344>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d007      	beq.n	8000ab2 <HAL_GPIO_Init+0x22e>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a49      	ldr	r2, [pc, #292]	; (8000bcc <HAL_GPIO_Init+0x348>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d101      	bne.n	8000aae <HAL_GPIO_Init+0x22a>
 8000aaa:	2306      	movs	r3, #6
 8000aac:	e00c      	b.n	8000ac8 <HAL_GPIO_Init+0x244>
 8000aae:	2307      	movs	r3, #7
 8000ab0:	e00a      	b.n	8000ac8 <HAL_GPIO_Init+0x244>
 8000ab2:	2305      	movs	r3, #5
 8000ab4:	e008      	b.n	8000ac8 <HAL_GPIO_Init+0x244>
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	e006      	b.n	8000ac8 <HAL_GPIO_Init+0x244>
 8000aba:	2303      	movs	r3, #3
 8000abc:	e004      	b.n	8000ac8 <HAL_GPIO_Init+0x244>
 8000abe:	2302      	movs	r3, #2
 8000ac0:	e002      	b.n	8000ac8 <HAL_GPIO_Init+0x244>
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e000      	b.n	8000ac8 <HAL_GPIO_Init+0x244>
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	697a      	ldr	r2, [r7, #20]
 8000aca:	f002 0203 	and.w	r2, r2, #3
 8000ace:	0092      	lsls	r2, r2, #2
 8000ad0:	4093      	lsls	r3, r2
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ad8:	4936      	ldr	r1, [pc, #216]	; (8000bb4 <HAL_GPIO_Init+0x330>)
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	089b      	lsrs	r3, r3, #2
 8000ade:	3302      	adds	r3, #2
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ae6:	4b3a      	ldr	r3, [pc, #232]	; (8000bd0 <HAL_GPIO_Init+0x34c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	43db      	mvns	r3, r3
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	4013      	ands	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d003      	beq.n	8000b0a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b0a:	4a31      	ldr	r2, [pc, #196]	; (8000bd0 <HAL_GPIO_Init+0x34c>)
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000b10:	4b2f      	ldr	r3, [pc, #188]	; (8000bd0 <HAL_GPIO_Init+0x34c>)
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d003      	beq.n	8000b34 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b34:	4a26      	ldr	r2, [pc, #152]	; (8000bd0 <HAL_GPIO_Init+0x34c>)
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b3a:	4b25      	ldr	r3, [pc, #148]	; (8000bd0 <HAL_GPIO_Init+0x34c>)
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	43db      	mvns	r3, r3
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	4013      	ands	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d003      	beq.n	8000b5e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b5e:	4a1c      	ldr	r2, [pc, #112]	; (8000bd0 <HAL_GPIO_Init+0x34c>)
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b64:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <HAL_GPIO_Init+0x34c>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4013      	ands	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d003      	beq.n	8000b88 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b88:	4a11      	ldr	r2, [pc, #68]	; (8000bd0 <HAL_GPIO_Init+0x34c>)
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	3301      	adds	r3, #1
 8000b92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f47f ae78 	bne.w	8000894 <HAL_GPIO_Init+0x10>
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	371c      	adds	r7, #28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	40010000 	.word	0x40010000
 8000bb8:	48000400 	.word	0x48000400
 8000bbc:	48000800 	.word	0x48000800
 8000bc0:	48000c00 	.word	0x48000c00
 8000bc4:	48001000 	.word	0x48001000
 8000bc8:	48001400 	.word	0x48001400
 8000bcc:	48001800 	.word	0x48001800
 8000bd0:	40010400 	.word	0x40010400

08000bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	807b      	strh	r3, [r7, #2]
 8000be0:	4613      	mov	r3, r2
 8000be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000be4:	787b      	ldrb	r3, [r7, #1]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d003      	beq.n	8000bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bea:	887a      	ldrh	r2, [r7, #2]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bf0:	e002      	b.n	8000bf8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bf2:	887a      	ldrh	r2, [r7, #2]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c0e:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c10:	695a      	ldr	r2, [r3, #20]
 8000c12:	88fb      	ldrh	r3, [r7, #6]
 8000c14:	4013      	ands	r3, r2
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d006      	beq.n	8000c28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c1a:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c20:	88fb      	ldrh	r3, [r7, #6]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f003 f900 	bl	8003e28 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40010400 	.word	0x40010400

08000c34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <HAL_PWREx_GetVoltageRange+0x18>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40007000 	.word	0x40007000

08000c50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c5e:	d130      	bne.n	8000cc2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c60:	4b23      	ldr	r3, [pc, #140]	; (8000cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c6c:	d038      	beq.n	8000ce0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c6e:	4b20      	ldr	r3, [pc, #128]	; (8000cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c76:	4a1e      	ldr	r2, [pc, #120]	; (8000cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c7c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2232      	movs	r2, #50	; 0x32
 8000c84:	fb02 f303 	mul.w	r3, r2, r3
 8000c88:	4a1b      	ldr	r2, [pc, #108]	; (8000cf8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c8e:	0c9b      	lsrs	r3, r3, #18
 8000c90:	3301      	adds	r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c94:	e002      	b.n	8000c9c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c9e:	695b      	ldr	r3, [r3, #20]
 8000ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ca8:	d102      	bne.n	8000cb0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d1f2      	bne.n	8000c96 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cbc:	d110      	bne.n	8000ce0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	e00f      	b.n	8000ce2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cce:	d007      	beq.n	8000ce0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cd8:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cde:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40007000 	.word	0x40007000
 8000cf4:	20000030 	.word	0x20000030
 8000cf8:	431bde83 	.word	0x431bde83

08000cfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d101      	bne.n	8000d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e39d      	b.n	800144a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d0e:	4ba4      	ldr	r3, [pc, #656]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	f003 030c 	and.w	r3, r3, #12
 8000d16:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d18:	4ba1      	ldr	r3, [pc, #644]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	f003 0303 	and.w	r3, r3, #3
 8000d20:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 0310 	and.w	r3, r3, #16
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	f000 80e1 	beq.w	8000ef2 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d007      	beq.n	8000d46 <HAL_RCC_OscConfig+0x4a>
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	2b0c      	cmp	r3, #12
 8000d3a:	f040 8088 	bne.w	8000e4e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	f040 8084 	bne.w	8000e4e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d46:	4b96      	ldr	r3, [pc, #600]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d005      	beq.n	8000d5e <HAL_RCC_OscConfig+0x62>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d101      	bne.n	8000d5e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e375      	b.n	800144a <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6a1a      	ldr	r2, [r3, #32]
 8000d62:	4b8f      	ldr	r3, [pc, #572]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 0308 	and.w	r3, r3, #8
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d004      	beq.n	8000d78 <HAL_RCC_OscConfig+0x7c>
 8000d6e:	4b8c      	ldr	r3, [pc, #560]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d76:	e005      	b.n	8000d84 <HAL_RCC_OscConfig+0x88>
 8000d78:	4b89      	ldr	r3, [pc, #548]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d7e:	091b      	lsrs	r3, r3, #4
 8000d80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d223      	bcs.n	8000dd0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6a1b      	ldr	r3, [r3, #32]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 fd09 	bl	80017a4 <RCC_SetFlashLatencyFromMSIRange>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e356      	b.n	800144a <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d9c:	4b80      	ldr	r3, [pc, #512]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a7f      	ldr	r2, [pc, #508]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000da2:	f043 0308 	orr.w	r3, r3, #8
 8000da6:	6013      	str	r3, [r2, #0]
 8000da8:	4b7d      	ldr	r3, [pc, #500]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a1b      	ldr	r3, [r3, #32]
 8000db4:	497a      	ldr	r1, [pc, #488]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000db6:	4313      	orrs	r3, r2
 8000db8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dba:	4b79      	ldr	r3, [pc, #484]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	021b      	lsls	r3, r3, #8
 8000dc8:	4975      	ldr	r1, [pc, #468]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	604b      	str	r3, [r1, #4]
 8000dce:	e022      	b.n	8000e16 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dd0:	4b73      	ldr	r3, [pc, #460]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a72      	ldr	r2, [pc, #456]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000dd6:	f043 0308 	orr.w	r3, r3, #8
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	4b70      	ldr	r3, [pc, #448]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6a1b      	ldr	r3, [r3, #32]
 8000de8:	496d      	ldr	r1, [pc, #436]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000dea:	4313      	orrs	r3, r2
 8000dec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dee:	4b6c      	ldr	r3, [pc, #432]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	021b      	lsls	r3, r3, #8
 8000dfc:	4968      	ldr	r1, [pc, #416]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6a1b      	ldr	r3, [r3, #32]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 fccc 	bl	80017a4 <RCC_SetFlashLatencyFromMSIRange>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e319      	b.n	800144a <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e16:	f000 fc03 	bl	8001620 <HAL_RCC_GetSysClockFreq>
 8000e1a:	4601      	mov	r1, r0
 8000e1c:	4b60      	ldr	r3, [pc, #384]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	091b      	lsrs	r3, r3, #4
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	4a5f      	ldr	r2, [pc, #380]	; (8000fa4 <HAL_RCC_OscConfig+0x2a8>)
 8000e28:	5cd3      	ldrb	r3, [r2, r3]
 8000e2a:	f003 031f 	and.w	r3, r3, #31
 8000e2e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e32:	4a5d      	ldr	r2, [pc, #372]	; (8000fa8 <HAL_RCC_OscConfig+0x2ac>)
 8000e34:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e36:	4b5d      	ldr	r3, [pc, #372]	; (8000fac <HAL_RCC_OscConfig+0x2b0>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fbb8 	bl	80005b0 <HAL_InitTick>
 8000e40:	4603      	mov	r3, r0
 8000e42:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d052      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	e2fd      	b.n	800144a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d032      	beq.n	8000ebc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e56:	4b52      	ldr	r3, [pc, #328]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a51      	ldr	r2, [pc, #324]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e62:	f7ff fbf1 	bl	8000648 <HAL_GetTick>
 8000e66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e68:	e008      	b.n	8000e7c <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e6a:	f7ff fbed 	bl	8000648 <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d901      	bls.n	8000e7c <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e2e6      	b.n	800144a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e7c:	4b48      	ldr	r3, [pc, #288]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0f0      	beq.n	8000e6a <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e88:	4b45      	ldr	r3, [pc, #276]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a44      	ldr	r2, [pc, #272]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000e8e:	f043 0308 	orr.w	r3, r3, #8
 8000e92:	6013      	str	r3, [r2, #0]
 8000e94:	4b42      	ldr	r3, [pc, #264]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6a1b      	ldr	r3, [r3, #32]
 8000ea0:	493f      	ldr	r1, [pc, #252]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ea6:	4b3e      	ldr	r3, [pc, #248]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	021b      	lsls	r3, r3, #8
 8000eb4:	493a      	ldr	r1, [pc, #232]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	604b      	str	r3, [r1, #4]
 8000eba:	e01a      	b.n	8000ef2 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000ebc:	4b38      	ldr	r3, [pc, #224]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a37      	ldr	r2, [pc, #220]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000ec2:	f023 0301 	bic.w	r3, r3, #1
 8000ec6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ec8:	f7ff fbbe 	bl	8000648 <HAL_GetTick>
 8000ecc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ece:	e008      	b.n	8000ee2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ed0:	f7ff fbba 	bl	8000648 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d901      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e2b3      	b.n	800144a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ee2:	4b2f      	ldr	r3, [pc, #188]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d1f0      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x1d4>
 8000eee:	e000      	b.n	8000ef2 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ef0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d074      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	2b08      	cmp	r3, #8
 8000f02:	d005      	beq.n	8000f10 <HAL_RCC_OscConfig+0x214>
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	2b0c      	cmp	r3, #12
 8000f08:	d10e      	bne.n	8000f28 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	2b03      	cmp	r3, #3
 8000f0e:	d10b      	bne.n	8000f28 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f10:	4b23      	ldr	r3, [pc, #140]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d064      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x2ea>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d160      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e290      	b.n	800144a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f30:	d106      	bne.n	8000f40 <HAL_RCC_OscConfig+0x244>
 8000f32:	4b1b      	ldr	r3, [pc, #108]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a1a      	ldr	r2, [pc, #104]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	e01d      	b.n	8000f7c <HAL_RCC_OscConfig+0x280>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f48:	d10c      	bne.n	8000f64 <HAL_RCC_OscConfig+0x268>
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a14      	ldr	r2, [pc, #80]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a11      	ldr	r2, [pc, #68]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	e00b      	b.n	8000f7c <HAL_RCC_OscConfig+0x280>
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0d      	ldr	r2, [pc, #52]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <HAL_RCC_OscConfig+0x2a4>)
 8000f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d01c      	beq.n	8000fbe <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f84:	f7ff fb60 	bl	8000648 <HAL_GetTick>
 8000f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f8a:	e011      	b.n	8000fb0 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f8c:	f7ff fb5c 	bl	8000648 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b64      	cmp	r3, #100	; 0x64
 8000f98:	d90a      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e255      	b.n	800144a <HAL_RCC_OscConfig+0x74e>
 8000f9e:	bf00      	nop
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	080055c8 	.word	0x080055c8
 8000fa8:	20000030 	.word	0x20000030
 8000fac:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fb0:	4bae      	ldr	r3, [pc, #696]	; (800126c <HAL_RCC_OscConfig+0x570>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d0e7      	beq.n	8000f8c <HAL_RCC_OscConfig+0x290>
 8000fbc:	e014      	b.n	8000fe8 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fbe:	f7ff fb43 	bl	8000648 <HAL_GetTick>
 8000fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fc4:	e008      	b.n	8000fd8 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fc6:	f7ff fb3f 	bl	8000648 <HAL_GetTick>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b64      	cmp	r3, #100	; 0x64
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e238      	b.n	800144a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fd8:	4ba4      	ldr	r3, [pc, #656]	; (800126c <HAL_RCC_OscConfig+0x570>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d1f0      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x2ca>
 8000fe4:	e000      	b.n	8000fe8 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d060      	beq.n	80010b6 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	d005      	beq.n	8001006 <HAL_RCC_OscConfig+0x30a>
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	2b0c      	cmp	r3, #12
 8000ffe:	d119      	bne.n	8001034 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	2b02      	cmp	r3, #2
 8001004:	d116      	bne.n	8001034 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001006:	4b99      	ldr	r3, [pc, #612]	; (800126c <HAL_RCC_OscConfig+0x570>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800100e:	2b00      	cmp	r3, #0
 8001010:	d005      	beq.n	800101e <HAL_RCC_OscConfig+0x322>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d101      	bne.n	800101e <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e215      	b.n	800144a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800101e:	4b93      	ldr	r3, [pc, #588]	; (800126c <HAL_RCC_OscConfig+0x570>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	061b      	lsls	r3, r3, #24
 800102c:	498f      	ldr	r1, [pc, #572]	; (800126c <HAL_RCC_OscConfig+0x570>)
 800102e:	4313      	orrs	r3, r2
 8001030:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001032:	e040      	b.n	80010b6 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d023      	beq.n	8001084 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800103c:	4b8b      	ldr	r3, [pc, #556]	; (800126c <HAL_RCC_OscConfig+0x570>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a8a      	ldr	r2, [pc, #552]	; (800126c <HAL_RCC_OscConfig+0x570>)
 8001042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001048:	f7ff fafe 	bl	8000648 <HAL_GetTick>
 800104c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001050:	f7ff fafa 	bl	8000648 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b02      	cmp	r3, #2
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e1f3      	b.n	800144a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001062:	4b82      	ldr	r3, [pc, #520]	; (800126c <HAL_RCC_OscConfig+0x570>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0f0      	beq.n	8001050 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106e:	4b7f      	ldr	r3, [pc, #508]	; (800126c <HAL_RCC_OscConfig+0x570>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	061b      	lsls	r3, r3, #24
 800107c:	497b      	ldr	r1, [pc, #492]	; (800126c <HAL_RCC_OscConfig+0x570>)
 800107e:	4313      	orrs	r3, r2
 8001080:	604b      	str	r3, [r1, #4]
 8001082:	e018      	b.n	80010b6 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001084:	4b79      	ldr	r3, [pc, #484]	; (800126c <HAL_RCC_OscConfig+0x570>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a78      	ldr	r2, [pc, #480]	; (800126c <HAL_RCC_OscConfig+0x570>)
 800108a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800108e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001090:	f7ff fada 	bl	8000648 <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001098:	f7ff fad6 	bl	8000648 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e1cf      	b.n	800144a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010aa:	4b70      	ldr	r3, [pc, #448]	; (800126c <HAL_RCC_OscConfig+0x570>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f0      	bne.n	8001098 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0308 	and.w	r3, r3, #8
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d03c      	beq.n	800113c <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d01c      	beq.n	8001104 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ca:	4b68      	ldr	r3, [pc, #416]	; (800126c <HAL_RCC_OscConfig+0x570>)
 80010cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010d0:	4a66      	ldr	r2, [pc, #408]	; (800126c <HAL_RCC_OscConfig+0x570>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010da:	f7ff fab5 	bl	8000648 <HAL_GetTick>
 80010de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010e0:	e008      	b.n	80010f4 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e2:	f7ff fab1 	bl	8000648 <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e1aa      	b.n	800144a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010f4:	4b5d      	ldr	r3, [pc, #372]	; (800126c <HAL_RCC_OscConfig+0x570>)
 80010f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0ef      	beq.n	80010e2 <HAL_RCC_OscConfig+0x3e6>
 8001102:	e01b      	b.n	800113c <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001104:	4b59      	ldr	r3, [pc, #356]	; (800126c <HAL_RCC_OscConfig+0x570>)
 8001106:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800110a:	4a58      	ldr	r2, [pc, #352]	; (800126c <HAL_RCC_OscConfig+0x570>)
 800110c:	f023 0301 	bic.w	r3, r3, #1
 8001110:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001114:	f7ff fa98 	bl	8000648 <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800111c:	f7ff fa94 	bl	8000648 <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e18d      	b.n	800144a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800112e:	4b4f      	ldr	r3, [pc, #316]	; (800126c <HAL_RCC_OscConfig+0x570>)
 8001130:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1ef      	bne.n	800111c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 80a5 	beq.w	8001294 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800114a:	2300      	movs	r3, #0
 800114c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800114e:	4b47      	ldr	r3, [pc, #284]	; (800126c <HAL_RCC_OscConfig+0x570>)
 8001150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10d      	bne.n	8001176 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800115a:	4b44      	ldr	r3, [pc, #272]	; (800126c <HAL_RCC_OscConfig+0x570>)
 800115c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115e:	4a43      	ldr	r2, [pc, #268]	; (800126c <HAL_RCC_OscConfig+0x570>)
 8001160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001164:	6593      	str	r3, [r2, #88]	; 0x58
 8001166:	4b41      	ldr	r3, [pc, #260]	; (800126c <HAL_RCC_OscConfig+0x570>)
 8001168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001172:	2301      	movs	r3, #1
 8001174:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001176:	4b3e      	ldr	r3, [pc, #248]	; (8001270 <HAL_RCC_OscConfig+0x574>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800117e:	2b00      	cmp	r3, #0
 8001180:	d118      	bne.n	80011b4 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001182:	4b3b      	ldr	r3, [pc, #236]	; (8001270 <HAL_RCC_OscConfig+0x574>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a3a      	ldr	r2, [pc, #232]	; (8001270 <HAL_RCC_OscConfig+0x574>)
 8001188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800118c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800118e:	f7ff fa5b 	bl	8000648 <HAL_GetTick>
 8001192:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001194:	e008      	b.n	80011a8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001196:	f7ff fa57 	bl	8000648 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e150      	b.n	800144a <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011a8:	4b31      	ldr	r3, [pc, #196]	; (8001270 <HAL_RCC_OscConfig+0x574>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d0f0      	beq.n	8001196 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d108      	bne.n	80011ce <HAL_RCC_OscConfig+0x4d2>
 80011bc:	4b2b      	ldr	r3, [pc, #172]	; (800126c <HAL_RCC_OscConfig+0x570>)
 80011be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011c2:	4a2a      	ldr	r2, [pc, #168]	; (800126c <HAL_RCC_OscConfig+0x570>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011cc:	e024      	b.n	8001218 <HAL_RCC_OscConfig+0x51c>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	2b05      	cmp	r3, #5
 80011d4:	d110      	bne.n	80011f8 <HAL_RCC_OscConfig+0x4fc>
 80011d6:	4b25      	ldr	r3, [pc, #148]	; (800126c <HAL_RCC_OscConfig+0x570>)
 80011d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011dc:	4a23      	ldr	r2, [pc, #140]	; (800126c <HAL_RCC_OscConfig+0x570>)
 80011de:	f043 0304 	orr.w	r3, r3, #4
 80011e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011e6:	4b21      	ldr	r3, [pc, #132]	; (800126c <HAL_RCC_OscConfig+0x570>)
 80011e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011ec:	4a1f      	ldr	r2, [pc, #124]	; (800126c <HAL_RCC_OscConfig+0x570>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011f6:	e00f      	b.n	8001218 <HAL_RCC_OscConfig+0x51c>
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <HAL_RCC_OscConfig+0x570>)
 80011fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011fe:	4a1b      	ldr	r2, [pc, #108]	; (800126c <HAL_RCC_OscConfig+0x570>)
 8001200:	f023 0301 	bic.w	r3, r3, #1
 8001204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001208:	4b18      	ldr	r3, [pc, #96]	; (800126c <HAL_RCC_OscConfig+0x570>)
 800120a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800120e:	4a17      	ldr	r2, [pc, #92]	; (800126c <HAL_RCC_OscConfig+0x570>)
 8001210:	f023 0304 	bic.w	r3, r3, #4
 8001214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d016      	beq.n	800124e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001220:	f7ff fa12 	bl	8000648 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001226:	e00a      	b.n	800123e <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001228:	f7ff fa0e 	bl	8000648 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	f241 3288 	movw	r2, #5000	; 0x1388
 8001236:	4293      	cmp	r3, r2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e105      	b.n	800144a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HAL_RCC_OscConfig+0x570>)
 8001240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0ed      	beq.n	8001228 <HAL_RCC_OscConfig+0x52c>
 800124c:	e019      	b.n	8001282 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124e:	f7ff f9fb 	bl	8000648 <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001254:	e00e      	b.n	8001274 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001256:	f7ff f9f7 	bl	8000648 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	f241 3288 	movw	r2, #5000	; 0x1388
 8001264:	4293      	cmp	r3, r2
 8001266:	d905      	bls.n	8001274 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e0ee      	b.n	800144a <HAL_RCC_OscConfig+0x74e>
 800126c:	40021000 	.word	0x40021000
 8001270:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001274:	4b77      	ldr	r3, [pc, #476]	; (8001454 <HAL_RCC_OscConfig+0x758>)
 8001276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1e9      	bne.n	8001256 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001282:	7ffb      	ldrb	r3, [r7, #31]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d105      	bne.n	8001294 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001288:	4b72      	ldr	r3, [pc, #456]	; (8001454 <HAL_RCC_OscConfig+0x758>)
 800128a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128c:	4a71      	ldr	r2, [pc, #452]	; (8001454 <HAL_RCC_OscConfig+0x758>)
 800128e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001292:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 80d5 	beq.w	8001448 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	2b0c      	cmp	r3, #12
 80012a2:	f000 808e 	beq.w	80013c2 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d15b      	bne.n	8001366 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ae:	4b69      	ldr	r3, [pc, #420]	; (8001454 <HAL_RCC_OscConfig+0x758>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a68      	ldr	r2, [pc, #416]	; (8001454 <HAL_RCC_OscConfig+0x758>)
 80012b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ba:	f7ff f9c5 	bl	8000648 <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012c2:	f7ff f9c1 	bl	8000648 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e0ba      	b.n	800144a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012d4:	4b5f      	ldr	r3, [pc, #380]	; (8001454 <HAL_RCC_OscConfig+0x758>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1f0      	bne.n	80012c2 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012e0:	4b5c      	ldr	r3, [pc, #368]	; (8001454 <HAL_RCC_OscConfig+0x758>)
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	4b5c      	ldr	r3, [pc, #368]	; (8001458 <HAL_RCC_OscConfig+0x75c>)
 80012e6:	4013      	ands	r3, r2
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80012f0:	3a01      	subs	r2, #1
 80012f2:	0112      	lsls	r2, r2, #4
 80012f4:	4311      	orrs	r1, r2
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80012fa:	0212      	lsls	r2, r2, #8
 80012fc:	4311      	orrs	r1, r2
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001302:	0852      	lsrs	r2, r2, #1
 8001304:	3a01      	subs	r2, #1
 8001306:	0552      	lsls	r2, r2, #21
 8001308:	4311      	orrs	r1, r2
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800130e:	0852      	lsrs	r2, r2, #1
 8001310:	3a01      	subs	r2, #1
 8001312:	0652      	lsls	r2, r2, #25
 8001314:	4311      	orrs	r1, r2
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800131a:	0912      	lsrs	r2, r2, #4
 800131c:	0452      	lsls	r2, r2, #17
 800131e:	430a      	orrs	r2, r1
 8001320:	494c      	ldr	r1, [pc, #304]	; (8001454 <HAL_RCC_OscConfig+0x758>)
 8001322:	4313      	orrs	r3, r2
 8001324:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001326:	4b4b      	ldr	r3, [pc, #300]	; (8001454 <HAL_RCC_OscConfig+0x758>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a4a      	ldr	r2, [pc, #296]	; (8001454 <HAL_RCC_OscConfig+0x758>)
 800132c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001330:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001332:	4b48      	ldr	r3, [pc, #288]	; (8001454 <HAL_RCC_OscConfig+0x758>)
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	4a47      	ldr	r2, [pc, #284]	; (8001454 <HAL_RCC_OscConfig+0x758>)
 8001338:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800133c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133e:	f7ff f983 	bl	8000648 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001346:	f7ff f97f 	bl	8000648 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e078      	b.n	800144a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001358:	4b3e      	ldr	r3, [pc, #248]	; (8001454 <HAL_RCC_OscConfig+0x758>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0f0      	beq.n	8001346 <HAL_RCC_OscConfig+0x64a>
 8001364:	e070      	b.n	8001448 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001366:	4b3b      	ldr	r3, [pc, #236]	; (8001454 <HAL_RCC_OscConfig+0x758>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a3a      	ldr	r2, [pc, #232]	; (8001454 <HAL_RCC_OscConfig+0x758>)
 800136c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001370:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001372:	4b38      	ldr	r3, [pc, #224]	; (8001454 <HAL_RCC_OscConfig+0x758>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d105      	bne.n	800138a <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800137e:	4b35      	ldr	r3, [pc, #212]	; (8001454 <HAL_RCC_OscConfig+0x758>)
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	4a34      	ldr	r2, [pc, #208]	; (8001454 <HAL_RCC_OscConfig+0x758>)
 8001384:	f023 0303 	bic.w	r3, r3, #3
 8001388:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800138a:	4b32      	ldr	r3, [pc, #200]	; (8001454 <HAL_RCC_OscConfig+0x758>)
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	4a31      	ldr	r2, [pc, #196]	; (8001454 <HAL_RCC_OscConfig+0x758>)
 8001390:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001398:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139a:	f7ff f955 	bl	8000648 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a2:	f7ff f951 	bl	8000648 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e04a      	b.n	800144a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013b4:	4b27      	ldr	r3, [pc, #156]	; (8001454 <HAL_RCC_OscConfig+0x758>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1f0      	bne.n	80013a2 <HAL_RCC_OscConfig+0x6a6>
 80013c0:	e042      	b.n	8001448 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d101      	bne.n	80013ce <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e03d      	b.n	800144a <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80013ce:	4b21      	ldr	r3, [pc, #132]	; (8001454 <HAL_RCC_OscConfig+0x758>)
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	f003 0203 	and.w	r2, r3, #3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013de:	429a      	cmp	r2, r3
 80013e0:	d130      	bne.n	8001444 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ec:	3b01      	subs	r3, #1
 80013ee:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d127      	bne.n	8001444 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013fe:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001400:	429a      	cmp	r2, r3
 8001402:	d11f      	bne.n	8001444 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800140e:	2a07      	cmp	r2, #7
 8001410:	bf14      	ite	ne
 8001412:	2201      	movne	r2, #1
 8001414:	2200      	moveq	r2, #0
 8001416:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001418:	4293      	cmp	r3, r2
 800141a:	d113      	bne.n	8001444 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001426:	085b      	lsrs	r3, r3, #1
 8001428:	3b01      	subs	r3, #1
 800142a:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800142c:	429a      	cmp	r2, r3
 800142e:	d109      	bne.n	8001444 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	085b      	lsrs	r3, r3, #1
 800143c:	3b01      	subs	r3, #1
 800143e:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001440:	429a      	cmp	r2, r3
 8001442:	d001      	beq.n	8001448 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e000      	b.n	800144a <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3720      	adds	r7, #32
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000
 8001458:	f99d808c 	.word	0xf99d808c

0800145c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e0c8      	b.n	8001602 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001470:	4b66      	ldr	r3, [pc, #408]	; (800160c <HAL_RCC_ClockConfig+0x1b0>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	d910      	bls.n	80014a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147e:	4b63      	ldr	r3, [pc, #396]	; (800160c <HAL_RCC_ClockConfig+0x1b0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f023 0207 	bic.w	r2, r3, #7
 8001486:	4961      	ldr	r1, [pc, #388]	; (800160c <HAL_RCC_ClockConfig+0x1b0>)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	4313      	orrs	r3, r2
 800148c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800148e:	4b5f      	ldr	r3, [pc, #380]	; (800160c <HAL_RCC_ClockConfig+0x1b0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d001      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e0b0      	b.n	8001602 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d04c      	beq.n	8001546 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	d107      	bne.n	80014c4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014b4:	4b56      	ldr	r3, [pc, #344]	; (8001610 <HAL_RCC_ClockConfig+0x1b4>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d121      	bne.n	8001504 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e09e      	b.n	8001602 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d107      	bne.n	80014dc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014cc:	4b50      	ldr	r3, [pc, #320]	; (8001610 <HAL_RCC_ClockConfig+0x1b4>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d115      	bne.n	8001504 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e092      	b.n	8001602 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d107      	bne.n	80014f4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014e4:	4b4a      	ldr	r3, [pc, #296]	; (8001610 <HAL_RCC_ClockConfig+0x1b4>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d109      	bne.n	8001504 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e086      	b.n	8001602 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014f4:	4b46      	ldr	r3, [pc, #280]	; (8001610 <HAL_RCC_ClockConfig+0x1b4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e07e      	b.n	8001602 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001504:	4b42      	ldr	r3, [pc, #264]	; (8001610 <HAL_RCC_ClockConfig+0x1b4>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f023 0203 	bic.w	r2, r3, #3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	493f      	ldr	r1, [pc, #252]	; (8001610 <HAL_RCC_ClockConfig+0x1b4>)
 8001512:	4313      	orrs	r3, r2
 8001514:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001516:	f7ff f897 	bl	8000648 <HAL_GetTick>
 800151a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800151c:	e00a      	b.n	8001534 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800151e:	f7ff f893 	bl	8000648 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	f241 3288 	movw	r2, #5000	; 0x1388
 800152c:	4293      	cmp	r3, r2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e066      	b.n	8001602 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001534:	4b36      	ldr	r3, [pc, #216]	; (8001610 <HAL_RCC_ClockConfig+0x1b4>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 020c 	and.w	r2, r3, #12
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	429a      	cmp	r2, r3
 8001544:	d1eb      	bne.n	800151e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d008      	beq.n	8001564 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001552:	4b2f      	ldr	r3, [pc, #188]	; (8001610 <HAL_RCC_ClockConfig+0x1b4>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	492c      	ldr	r1, [pc, #176]	; (8001610 <HAL_RCC_ClockConfig+0x1b4>)
 8001560:	4313      	orrs	r3, r2
 8001562:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001564:	4b29      	ldr	r3, [pc, #164]	; (800160c <HAL_RCC_ClockConfig+0x1b0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	429a      	cmp	r2, r3
 8001570:	d210      	bcs.n	8001594 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001572:	4b26      	ldr	r3, [pc, #152]	; (800160c <HAL_RCC_ClockConfig+0x1b0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f023 0207 	bic.w	r2, r3, #7
 800157a:	4924      	ldr	r1, [pc, #144]	; (800160c <HAL_RCC_ClockConfig+0x1b0>)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	4313      	orrs	r3, r2
 8001580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001582:	4b22      	ldr	r3, [pc, #136]	; (800160c <HAL_RCC_ClockConfig+0x1b0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d001      	beq.n	8001594 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e036      	b.n	8001602 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	d008      	beq.n	80015b2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015a0:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <HAL_RCC_ClockConfig+0x1b4>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	4918      	ldr	r1, [pc, #96]	; (8001610 <HAL_RCC_ClockConfig+0x1b4>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d009      	beq.n	80015d2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015be:	4b14      	ldr	r3, [pc, #80]	; (8001610 <HAL_RCC_ClockConfig+0x1b4>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	4910      	ldr	r1, [pc, #64]	; (8001610 <HAL_RCC_ClockConfig+0x1b4>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015d2:	f000 f825 	bl	8001620 <HAL_RCC_GetSysClockFreq>
 80015d6:	4601      	mov	r1, r0
 80015d8:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <HAL_RCC_ClockConfig+0x1b4>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	091b      	lsrs	r3, r3, #4
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	4a0c      	ldr	r2, [pc, #48]	; (8001614 <HAL_RCC_ClockConfig+0x1b8>)
 80015e4:	5cd3      	ldrb	r3, [r2, r3]
 80015e6:	f003 031f 	and.w	r3, r3, #31
 80015ea:	fa21 f303 	lsr.w	r3, r1, r3
 80015ee:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 80015f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <HAL_RCC_ClockConfig+0x1c0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ffda 	bl	80005b0 <HAL_InitTick>
 80015fc:	4603      	mov	r3, r0
 80015fe:	72fb      	strb	r3, [r7, #11]

  return status;
 8001600:	7afb      	ldrb	r3, [r7, #11]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40022000 	.word	0x40022000
 8001610:	40021000 	.word	0x40021000
 8001614:	080055c8 	.word	0x080055c8
 8001618:	20000030 	.word	0x20000030
 800161c:	20000000 	.word	0x20000000

08001620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001620:	b480      	push	{r7}
 8001622:	b089      	sub	sp, #36	; 0x24
 8001624:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800162e:	4b3d      	ldr	r3, [pc, #244]	; (8001724 <HAL_RCC_GetSysClockFreq+0x104>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001638:	4b3a      	ldr	r3, [pc, #232]	; (8001724 <HAL_RCC_GetSysClockFreq+0x104>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d005      	beq.n	8001654 <HAL_RCC_GetSysClockFreq+0x34>
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	2b0c      	cmp	r3, #12
 800164c:	d121      	bne.n	8001692 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d11e      	bne.n	8001692 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001654:	4b33      	ldr	r3, [pc, #204]	; (8001724 <HAL_RCC_GetSysClockFreq+0x104>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0308 	and.w	r3, r3, #8
 800165c:	2b00      	cmp	r3, #0
 800165e:	d107      	bne.n	8001670 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001660:	4b30      	ldr	r3, [pc, #192]	; (8001724 <HAL_RCC_GetSysClockFreq+0x104>)
 8001662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001666:	0a1b      	lsrs	r3, r3, #8
 8001668:	f003 030f 	and.w	r3, r3, #15
 800166c:	61fb      	str	r3, [r7, #28]
 800166e:	e005      	b.n	800167c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001670:	4b2c      	ldr	r3, [pc, #176]	; (8001724 <HAL_RCC_GetSysClockFreq+0x104>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	091b      	lsrs	r3, r3, #4
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800167c:	4a2a      	ldr	r2, [pc, #168]	; (8001728 <HAL_RCC_GetSysClockFreq+0x108>)
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001684:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10d      	bne.n	80016a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001690:	e00a      	b.n	80016a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	2b04      	cmp	r3, #4
 8001696:	d102      	bne.n	800169e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001698:	4b24      	ldr	r3, [pc, #144]	; (800172c <HAL_RCC_GetSysClockFreq+0x10c>)
 800169a:	61bb      	str	r3, [r7, #24]
 800169c:	e004      	b.n	80016a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	2b08      	cmp	r3, #8
 80016a2:	d101      	bne.n	80016a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016a4:	4b22      	ldr	r3, [pc, #136]	; (8001730 <HAL_RCC_GetSysClockFreq+0x110>)
 80016a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	2b0c      	cmp	r3, #12
 80016ac:	d133      	bne.n	8001716 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016ae:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <HAL_RCC_GetSysClockFreq+0x104>)
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d002      	beq.n	80016c4 <HAL_RCC_GetSysClockFreq+0xa4>
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d003      	beq.n	80016ca <HAL_RCC_GetSysClockFreq+0xaa>
 80016c2:	e005      	b.n	80016d0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80016c4:	4b19      	ldr	r3, [pc, #100]	; (800172c <HAL_RCC_GetSysClockFreq+0x10c>)
 80016c6:	617b      	str	r3, [r7, #20]
      break;
 80016c8:	e005      	b.n	80016d6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80016ca:	4b19      	ldr	r3, [pc, #100]	; (8001730 <HAL_RCC_GetSysClockFreq+0x110>)
 80016cc:	617b      	str	r3, [r7, #20]
      break;
 80016ce:	e002      	b.n	80016d6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	617b      	str	r3, [r7, #20]
      break;
 80016d4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016d6:	4b13      	ldr	r3, [pc, #76]	; (8001724 <HAL_RCC_GetSysClockFreq+0x104>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	091b      	lsrs	r3, r3, #4
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	3301      	adds	r3, #1
 80016e2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80016e4:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <HAL_RCC_GetSysClockFreq+0x104>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	0a1b      	lsrs	r3, r3, #8
 80016ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	fb02 f203 	mul.w	r2, r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fa:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <HAL_RCC_GetSysClockFreq+0x104>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	0e5b      	lsrs	r3, r3, #25
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	3301      	adds	r3, #1
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	fbb2 f3f3 	udiv	r3, r2, r3
 8001714:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001716:	69bb      	ldr	r3, [r7, #24]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3724      	adds	r7, #36	; 0x24
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	40021000 	.word	0x40021000
 8001728:	080055e0 	.word	0x080055e0
 800172c:	00f42400 	.word	0x00f42400
 8001730:	007a1200 	.word	0x007a1200

08001734 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <HAL_RCC_GetHCLKFreq+0x14>)
 800173a:	681b      	ldr	r3, [r3, #0]
}
 800173c:	4618      	mov	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000030 	.word	0x20000030

0800174c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001750:	f7ff fff0 	bl	8001734 <HAL_RCC_GetHCLKFreq>
 8001754:	4601      	mov	r1, r0
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	0a1b      	lsrs	r3, r3, #8
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	4a04      	ldr	r2, [pc, #16]	; (8001774 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001762:	5cd3      	ldrb	r3, [r2, r3]
 8001764:	f003 031f 	and.w	r3, r3, #31
 8001768:	fa21 f303 	lsr.w	r3, r1, r3
}
 800176c:	4618      	mov	r0, r3
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40021000 	.word	0x40021000
 8001774:	080055d8 	.word	0x080055d8

08001778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800177c:	f7ff ffda 	bl	8001734 <HAL_RCC_GetHCLKFreq>
 8001780:	4601      	mov	r1, r0
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	0adb      	lsrs	r3, r3, #11
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800178e:	5cd3      	ldrb	r3, [r2, r3]
 8001790:	f003 031f 	and.w	r3, r3, #31
 8001794:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001798:	4618      	mov	r0, r3
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40021000 	.word	0x40021000
 80017a0:	080055d8 	.word	0x080055d8

080017a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80017ac:	2300      	movs	r3, #0
 80017ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80017b0:	4b2a      	ldr	r3, [pc, #168]	; (800185c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80017bc:	f7ff fa3a 	bl	8000c34 <HAL_PWREx_GetVoltageRange>
 80017c0:	6178      	str	r0, [r7, #20]
 80017c2:	e014      	b.n	80017ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80017c4:	4b25      	ldr	r3, [pc, #148]	; (800185c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c8:	4a24      	ldr	r2, [pc, #144]	; (800185c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ce:	6593      	str	r3, [r2, #88]	; 0x58
 80017d0:	4b22      	ldr	r3, [pc, #136]	; (800185c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80017dc:	f7ff fa2a 	bl	8000c34 <HAL_PWREx_GetVoltageRange>
 80017e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80017e2:	4b1e      	ldr	r3, [pc, #120]	; (800185c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e6:	4a1d      	ldr	r2, [pc, #116]	; (800185c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017f4:	d10b      	bne.n	800180e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b80      	cmp	r3, #128	; 0x80
 80017fa:	d919      	bls.n	8001830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2ba0      	cmp	r3, #160	; 0xa0
 8001800:	d902      	bls.n	8001808 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001802:	2302      	movs	r3, #2
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	e013      	b.n	8001830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001808:	2301      	movs	r3, #1
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	e010      	b.n	8001830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b80      	cmp	r3, #128	; 0x80
 8001812:	d902      	bls.n	800181a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001814:	2303      	movs	r3, #3
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	e00a      	b.n	8001830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b80      	cmp	r3, #128	; 0x80
 800181e:	d102      	bne.n	8001826 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001820:	2302      	movs	r3, #2
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	e004      	b.n	8001830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b70      	cmp	r3, #112	; 0x70
 800182a:	d101      	bne.n	8001830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800182c:	2301      	movs	r3, #1
 800182e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f023 0207 	bic.w	r2, r3, #7
 8001838:	4909      	ldr	r1, [pc, #36]	; (8001860 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001840:	4b07      	ldr	r3, [pc, #28]	; (8001860 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	429a      	cmp	r2, r3
 800184c:	d001      	beq.n	8001852 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e000      	b.n	8001854 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40021000 	.word	0x40021000
 8001860:	40022000 	.word	0x40022000

08001864 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800186c:	2300      	movs	r3, #0
 800186e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001870:	2300      	movs	r3, #0
 8001872:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800187c:	2b00      	cmp	r3, #0
 800187e:	d03f      	beq.n	8001900 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001884:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001888:	d01c      	beq.n	80018c4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800188a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800188e:	d802      	bhi.n	8001896 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00e      	beq.n	80018b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001894:	e01f      	b.n	80018d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001896:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800189a:	d003      	beq.n	80018a4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800189c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80018a0:	d01c      	beq.n	80018dc <HAL_RCCEx_PeriphCLKConfig+0x78>
 80018a2:	e018      	b.n	80018d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80018a4:	4b85      	ldr	r3, [pc, #532]	; (8001abc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	4a84      	ldr	r2, [pc, #528]	; (8001abc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80018b0:	e015      	b.n	80018de <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3304      	adds	r3, #4
 80018b6:	2100      	movs	r1, #0
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 fab9 	bl	8001e30 <RCCEx_PLLSAI1_Config>
 80018be:	4603      	mov	r3, r0
 80018c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80018c2:	e00c      	b.n	80018de <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3320      	adds	r3, #32
 80018c8:	2100      	movs	r1, #0
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 fba0 	bl	8002010 <RCCEx_PLLSAI2_Config>
 80018d0:	4603      	mov	r3, r0
 80018d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80018d4:	e003      	b.n	80018de <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	74fb      	strb	r3, [r7, #19]
      break;
 80018da:	e000      	b.n	80018de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80018dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80018de:	7cfb      	ldrb	r3, [r7, #19]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d10b      	bne.n	80018fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80018e4:	4b75      	ldr	r3, [pc, #468]	; (8001abc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018f2:	4972      	ldr	r1, [pc, #456]	; (8001abc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80018fa:	e001      	b.n	8001900 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80018fc:	7cfb      	ldrb	r3, [r7, #19]
 80018fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d03f      	beq.n	800198c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001914:	d01c      	beq.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001916:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800191a:	d802      	bhi.n	8001922 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800191c:	2b00      	cmp	r3, #0
 800191e:	d00e      	beq.n	800193e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001920:	e01f      	b.n	8001962 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001922:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001926:	d003      	beq.n	8001930 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001928:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800192c:	d01c      	beq.n	8001968 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800192e:	e018      	b.n	8001962 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001930:	4b62      	ldr	r3, [pc, #392]	; (8001abc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	4a61      	ldr	r2, [pc, #388]	; (8001abc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800193a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800193c:	e015      	b.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3304      	adds	r3, #4
 8001942:	2100      	movs	r1, #0
 8001944:	4618      	mov	r0, r3
 8001946:	f000 fa73 	bl	8001e30 <RCCEx_PLLSAI1_Config>
 800194a:	4603      	mov	r3, r0
 800194c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800194e:	e00c      	b.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3320      	adds	r3, #32
 8001954:	2100      	movs	r1, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f000 fb5a 	bl	8002010 <RCCEx_PLLSAI2_Config>
 800195c:	4603      	mov	r3, r0
 800195e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001960:	e003      	b.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	74fb      	strb	r3, [r7, #19]
      break;
 8001966:	e000      	b.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001968:	bf00      	nop
    }

    if(ret == HAL_OK)
 800196a:	7cfb      	ldrb	r3, [r7, #19]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10b      	bne.n	8001988 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001970:	4b52      	ldr	r3, [pc, #328]	; (8001abc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001976:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800197e:	494f      	ldr	r1, [pc, #316]	; (8001abc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001980:	4313      	orrs	r3, r2
 8001982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001986:	e001      	b.n	800198c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001988:	7cfb      	ldrb	r3, [r7, #19]
 800198a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 80a0 	beq.w	8001ada <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800199a:	2300      	movs	r3, #0
 800199c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800199e:	4b47      	ldr	r3, [pc, #284]	; (8001abc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80019aa:	2301      	movs	r3, #1
 80019ac:	e000      	b.n	80019b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80019ae:	2300      	movs	r3, #0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d00d      	beq.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019b4:	4b41      	ldr	r3, [pc, #260]	; (8001abc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b8:	4a40      	ldr	r2, [pc, #256]	; (8001abc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019be:	6593      	str	r3, [r2, #88]	; 0x58
 80019c0:	4b3e      	ldr	r3, [pc, #248]	; (8001abc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019cc:	2301      	movs	r3, #1
 80019ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019d0:	4b3b      	ldr	r3, [pc, #236]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a3a      	ldr	r2, [pc, #232]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80019d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80019dc:	f7fe fe34 	bl	8000648 <HAL_GetTick>
 80019e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80019e2:	e009      	b.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019e4:	f7fe fe30 	bl	8000648 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d902      	bls.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	74fb      	strb	r3, [r7, #19]
        break;
 80019f6:	e005      	b.n	8001a04 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80019f8:	4b31      	ldr	r3, [pc, #196]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0ef      	beq.n	80019e4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001a04:	7cfb      	ldrb	r3, [r7, #19]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d15c      	bne.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001a0a:	4b2c      	ldr	r3, [pc, #176]	; (8001abc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a14:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d01f      	beq.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d019      	beq.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001a28:	4b24      	ldr	r3, [pc, #144]	; (8001abc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001a34:	4b21      	ldr	r3, [pc, #132]	; (8001abc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3a:	4a20      	ldr	r2, [pc, #128]	; (8001abc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001a44:	4b1d      	ldr	r3, [pc, #116]	; (8001abc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a4a:	4a1c      	ldr	r2, [pc, #112]	; (8001abc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001a54:	4a19      	ldr	r2, [pc, #100]	; (8001abc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d016      	beq.n	8001a94 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a66:	f7fe fdef 	bl	8000648 <HAL_GetTick>
 8001a6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a6c:	e00b      	b.n	8001a86 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6e:	f7fe fdeb 	bl	8000648 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d902      	bls.n	8001a86 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	74fb      	strb	r3, [r7, #19]
            break;
 8001a84:	e006      	b.n	8001a94 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a86:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0ec      	beq.n	8001a6e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001a94:	7cfb      	ldrb	r3, [r7, #19]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10c      	bne.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a9a:	4b08      	ldr	r3, [pc, #32]	; (8001abc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001aaa:	4904      	ldr	r1, [pc, #16]	; (8001abc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001ab2:	e009      	b.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ab4:	7cfb      	ldrb	r3, [r7, #19]
 8001ab6:	74bb      	strb	r3, [r7, #18]
 8001ab8:	e006      	b.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ac4:	7cfb      	ldrb	r3, [r7, #19]
 8001ac6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ac8:	7c7b      	ldrb	r3, [r7, #17]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d105      	bne.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ace:	4b9e      	ldr	r3, [pc, #632]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad2:	4a9d      	ldr	r2, [pc, #628]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00a      	beq.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ae6:	4b98      	ldr	r3, [pc, #608]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aec:	f023 0203 	bic.w	r2, r3, #3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af4:	4994      	ldr	r1, [pc, #592]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00a      	beq.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b08:	4b8f      	ldr	r3, [pc, #572]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b0e:	f023 020c 	bic.w	r2, r3, #12
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b16:	498c      	ldr	r1, [pc, #560]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00a      	beq.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001b2a:	4b87      	ldr	r3, [pc, #540]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	4983      	ldr	r1, [pc, #524]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00a      	beq.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001b4c:	4b7e      	ldr	r3, [pc, #504]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	497b      	ldr	r1, [pc, #492]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0310 	and.w	r3, r3, #16
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00a      	beq.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001b6e:	4b76      	ldr	r3, [pc, #472]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b7c:	4972      	ldr	r1, [pc, #456]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0320 	and.w	r3, r3, #32
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00a      	beq.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001b90:	4b6d      	ldr	r3, [pc, #436]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	496a      	ldr	r1, [pc, #424]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00a      	beq.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001bb2:	4b65      	ldr	r3, [pc, #404]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc0:	4961      	ldr	r1, [pc, #388]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00a      	beq.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001bd4:	4b5c      	ldr	r3, [pc, #368]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be2:	4959      	ldr	r1, [pc, #356]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00a      	beq.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bf6:	4b54      	ldr	r3, [pc, #336]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bfc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c04:	4950      	ldr	r1, [pc, #320]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00a      	beq.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001c18:	4b4b      	ldr	r3, [pc, #300]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c26:	4948      	ldr	r1, [pc, #288]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00a      	beq.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001c3a:	4b43      	ldr	r3, [pc, #268]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c48:	493f      	ldr	r1, [pc, #252]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d028      	beq.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c5c:	4b3a      	ldr	r3, [pc, #232]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c6a:	4937      	ldr	r1, [pc, #220]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c7a:	d106      	bne.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001c7c:	4b32      	ldr	r3, [pc, #200]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	4a31      	ldr	r2, [pc, #196]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c86:	60d3      	str	r3, [r2, #12]
 8001c88:	e011      	b.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c92:	d10c      	bne.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3304      	adds	r3, #4
 8001c98:	2101      	movs	r1, #1
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 f8c8 	bl	8001e30 <RCCEx_PLLSAI1_Config>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001ca4:	7cfb      	ldrb	r3, [r7, #19]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8001caa:	7cfb      	ldrb	r3, [r7, #19]
 8001cac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d028      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001cba:	4b23      	ldr	r3, [pc, #140]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cc0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc8:	491f      	ldr	r1, [pc, #124]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001cd8:	d106      	bne.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001cda:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	4a1a      	ldr	r2, [pc, #104]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ce0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ce4:	60d3      	str	r3, [r2, #12]
 8001ce6:	e011      	b.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001cf0:	d10c      	bne.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f000 f899 	bl	8001e30 <RCCEx_PLLSAI1_Config>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001d02:	7cfb      	ldrb	r3, [r7, #19]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8001d08:	7cfb      	ldrb	r3, [r7, #19]
 8001d0a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d02b      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001d18:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d26:	4908      	ldr	r1, [pc, #32]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d36:	d109      	bne.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	4a02      	ldr	r2, [pc, #8]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d42:	60d3      	str	r3, [r2, #12]
 8001d44:	e014      	b.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001d46:	bf00      	nop
 8001d48:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d54:	d10c      	bne.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f000 f867 	bl	8001e30 <RCCEx_PLLSAI1_Config>
 8001d62:	4603      	mov	r3, r0
 8001d64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001d66:	7cfb      	ldrb	r3, [r7, #19]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8001d6c:	7cfb      	ldrb	r3, [r7, #19]
 8001d6e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d02f      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d7c:	4b2b      	ldr	r3, [pc, #172]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d8a:	4928      	ldr	r1, [pc, #160]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d9a:	d10d      	bne.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3304      	adds	r3, #4
 8001da0:	2102      	movs	r1, #2
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 f844 	bl	8001e30 <RCCEx_PLLSAI1_Config>
 8001da8:	4603      	mov	r3, r0
 8001daa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001dac:	7cfb      	ldrb	r3, [r7, #19]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d014      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001db2:	7cfb      	ldrb	r3, [r7, #19]
 8001db4:	74bb      	strb	r3, [r7, #18]
 8001db6:	e011      	b.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001dbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dc0:	d10c      	bne.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3320      	adds	r3, #32
 8001dc6:	2102      	movs	r1, #2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f000 f921 	bl	8002010 <RCCEx_PLLSAI2_Config>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001dd2:	7cfb      	ldrb	r3, [r7, #19]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001dd8:	7cfb      	ldrb	r3, [r7, #19]
 8001dda:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00a      	beq.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001de8:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001df6:	490d      	ldr	r1, [pc, #52]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00b      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001e0a:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e1a:	4904      	ldr	r1, [pc, #16]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001e22:	7cbb      	ldrb	r3, [r7, #18]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40021000 	.word	0x40021000

08001e30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001e3e:	4b73      	ldr	r3, [pc, #460]	; (800200c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d018      	beq.n	8001e7c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001e4a:	4b70      	ldr	r3, [pc, #448]	; (800200c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	f003 0203 	and.w	r2, r3, #3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d10d      	bne.n	8001e76 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
       ||
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d009      	beq.n	8001e76 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001e62:	4b6a      	ldr	r3, [pc, #424]	; (800200c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	091b      	lsrs	r3, r3, #4
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	1c5a      	adds	r2, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
       ||
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d044      	beq.n	8001f00 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	73fb      	strb	r3, [r7, #15]
 8001e7a:	e041      	b.n	8001f00 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d00c      	beq.n	8001e9e <RCCEx_PLLSAI1_Config+0x6e>
 8001e84:	2b03      	cmp	r3, #3
 8001e86:	d013      	beq.n	8001eb0 <RCCEx_PLLSAI1_Config+0x80>
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d120      	bne.n	8001ece <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001e8c:	4b5f      	ldr	r3, [pc, #380]	; (800200c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d11d      	bne.n	8001ed4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e9c:	e01a      	b.n	8001ed4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001e9e:	4b5b      	ldr	r3, [pc, #364]	; (800200c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d116      	bne.n	8001ed8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eae:	e013      	b.n	8001ed8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001eb0:	4b56      	ldr	r3, [pc, #344]	; (800200c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10f      	bne.n	8001edc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001ebc:	4b53      	ldr	r3, [pc, #332]	; (800200c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d109      	bne.n	8001edc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001ecc:	e006      	b.n	8001edc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	73fb      	strb	r3, [r7, #15]
      break;
 8001ed2:	e004      	b.n	8001ede <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001ed4:	bf00      	nop
 8001ed6:	e002      	b.n	8001ede <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001ed8:	bf00      	nop
 8001eda:	e000      	b.n	8001ede <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001edc:	bf00      	nop
    }

    if(status == HAL_OK)
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10d      	bne.n	8001f00 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001ee4:	4b49      	ldr	r3, [pc, #292]	; (800200c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6819      	ldr	r1, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	011b      	lsls	r3, r3, #4
 8001ef8:	430b      	orrs	r3, r1
 8001efa:	4944      	ldr	r1, [pc, #272]	; (800200c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d17d      	bne.n	8002002 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001f06:	4b41      	ldr	r3, [pc, #260]	; (800200c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a40      	ldr	r2, [pc, #256]	; (800200c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f12:	f7fe fb99 	bl	8000648 <HAL_GetTick>
 8001f16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001f18:	e009      	b.n	8001f2e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001f1a:	f7fe fb95 	bl	8000648 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d902      	bls.n	8001f2e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	73fb      	strb	r3, [r7, #15]
        break;
 8001f2c:	e005      	b.n	8001f3a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001f2e:	4b37      	ldr	r3, [pc, #220]	; (800200c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1ef      	bne.n	8001f1a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d160      	bne.n	8002002 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d111      	bne.n	8001f6a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f46:	4b31      	ldr	r3, [pc, #196]	; (800200c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8001f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6892      	ldr	r2, [r2, #8]
 8001f56:	0211      	lsls	r1, r2, #8
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	68d2      	ldr	r2, [r2, #12]
 8001f5c:	0912      	lsrs	r2, r2, #4
 8001f5e:	0452      	lsls	r2, r2, #17
 8001f60:	430a      	orrs	r2, r1
 8001f62:	492a      	ldr	r1, [pc, #168]	; (800200c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	610b      	str	r3, [r1, #16]
 8001f68:	e027      	b.n	8001fba <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d112      	bne.n	8001f96 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f70:	4b26      	ldr	r3, [pc, #152]	; (800200c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001f78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6892      	ldr	r2, [r2, #8]
 8001f80:	0211      	lsls	r1, r2, #8
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6912      	ldr	r2, [r2, #16]
 8001f86:	0852      	lsrs	r2, r2, #1
 8001f88:	3a01      	subs	r2, #1
 8001f8a:	0552      	lsls	r2, r2, #21
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	491f      	ldr	r1, [pc, #124]	; (800200c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	610b      	str	r3, [r1, #16]
 8001f94:	e011      	b.n	8001fba <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f96:	4b1d      	ldr	r3, [pc, #116]	; (800200c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001f9e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6892      	ldr	r2, [r2, #8]
 8001fa6:	0211      	lsls	r1, r2, #8
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6952      	ldr	r2, [r2, #20]
 8001fac:	0852      	lsrs	r2, r2, #1
 8001fae:	3a01      	subs	r2, #1
 8001fb0:	0652      	lsls	r2, r2, #25
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	4915      	ldr	r1, [pc, #84]	; (800200c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001fba:	4b14      	ldr	r3, [pc, #80]	; (800200c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a13      	ldr	r2, [pc, #76]	; (800200c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001fc0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001fc4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc6:	f7fe fb3f 	bl	8000648 <HAL_GetTick>
 8001fca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001fcc:	e009      	b.n	8001fe2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001fce:	f7fe fb3b 	bl	8000648 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d902      	bls.n	8001fe2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	73fb      	strb	r3, [r7, #15]
          break;
 8001fe0:	e005      	b.n	8001fee <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001fe2:	4b0a      	ldr	r3, [pc, #40]	; (800200c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0ef      	beq.n	8001fce <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d106      	bne.n	8002002 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	4903      	ldr	r1, [pc, #12]	; (800200c <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002002:	7bfb      	ldrb	r3, [r7, #15]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40021000 	.word	0x40021000

08002010 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800201a:	2300      	movs	r3, #0
 800201c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800201e:	4b68      	ldr	r3, [pc, #416]	; (80021c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d018      	beq.n	800205c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800202a:	4b65      	ldr	r3, [pc, #404]	; (80021c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	f003 0203 	and.w	r2, r3, #3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d10d      	bne.n	8002056 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
       ||
 800203e:	2b00      	cmp	r3, #0
 8002040:	d009      	beq.n	8002056 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002042:	4b5f      	ldr	r3, [pc, #380]	; (80021c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	091b      	lsrs	r3, r3, #4
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
       ||
 8002052:	429a      	cmp	r2, r3
 8002054:	d044      	beq.n	80020e0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	73fb      	strb	r3, [r7, #15]
 800205a:	e041      	b.n	80020e0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d00c      	beq.n	800207e <RCCEx_PLLSAI2_Config+0x6e>
 8002064:	2b03      	cmp	r3, #3
 8002066:	d013      	beq.n	8002090 <RCCEx_PLLSAI2_Config+0x80>
 8002068:	2b01      	cmp	r3, #1
 800206a:	d120      	bne.n	80020ae <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800206c:	4b54      	ldr	r3, [pc, #336]	; (80021c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d11d      	bne.n	80020b4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800207c:	e01a      	b.n	80020b4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800207e:	4b50      	ldr	r3, [pc, #320]	; (80021c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002086:	2b00      	cmp	r3, #0
 8002088:	d116      	bne.n	80020b8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800208e:	e013      	b.n	80020b8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002090:	4b4b      	ldr	r3, [pc, #300]	; (80021c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10f      	bne.n	80020bc <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800209c:	4b48      	ldr	r3, [pc, #288]	; (80021c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d109      	bne.n	80020bc <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80020ac:	e006      	b.n	80020bc <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	73fb      	strb	r3, [r7, #15]
      break;
 80020b2:	e004      	b.n	80020be <RCCEx_PLLSAI2_Config+0xae>
      break;
 80020b4:	bf00      	nop
 80020b6:	e002      	b.n	80020be <RCCEx_PLLSAI2_Config+0xae>
      break;
 80020b8:	bf00      	nop
 80020ba:	e000      	b.n	80020be <RCCEx_PLLSAI2_Config+0xae>
      break;
 80020bc:	bf00      	nop
    }

    if(status == HAL_OK)
 80020be:	7bfb      	ldrb	r3, [r7, #15]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10d      	bne.n	80020e0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80020c4:	4b3e      	ldr	r3, [pc, #248]	; (80021c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6819      	ldr	r1, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	3b01      	subs	r3, #1
 80020d6:	011b      	lsls	r3, r3, #4
 80020d8:	430b      	orrs	r3, r1
 80020da:	4939      	ldr	r1, [pc, #228]	; (80021c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d167      	bne.n	80021b6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80020e6:	4b36      	ldr	r3, [pc, #216]	; (80021c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a35      	ldr	r2, [pc, #212]	; (80021c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80020ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020f2:	f7fe faa9 	bl	8000648 <HAL_GetTick>
 80020f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80020f8:	e009      	b.n	800210e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80020fa:	f7fe faa5 	bl	8000648 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d902      	bls.n	800210e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	73fb      	strb	r3, [r7, #15]
        break;
 800210c:	e005      	b.n	800211a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800210e:	4b2c      	ldr	r3, [pc, #176]	; (80021c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1ef      	bne.n	80020fa <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d14a      	bne.n	80021b6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d111      	bne.n	800214a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002126:	4b26      	ldr	r3, [pc, #152]	; (80021c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800212e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6892      	ldr	r2, [r2, #8]
 8002136:	0211      	lsls	r1, r2, #8
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	68d2      	ldr	r2, [r2, #12]
 800213c:	0912      	lsrs	r2, r2, #4
 800213e:	0452      	lsls	r2, r2, #17
 8002140:	430a      	orrs	r2, r1
 8002142:	491f      	ldr	r1, [pc, #124]	; (80021c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002144:	4313      	orrs	r3, r2
 8002146:	614b      	str	r3, [r1, #20]
 8002148:	e011      	b.n	800216e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800214a:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002152:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6892      	ldr	r2, [r2, #8]
 800215a:	0211      	lsls	r1, r2, #8
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6912      	ldr	r2, [r2, #16]
 8002160:	0852      	lsrs	r2, r2, #1
 8002162:	3a01      	subs	r2, #1
 8002164:	0652      	lsls	r2, r2, #25
 8002166:	430a      	orrs	r2, r1
 8002168:	4915      	ldr	r1, [pc, #84]	; (80021c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800216a:	4313      	orrs	r3, r2
 800216c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800216e:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a13      	ldr	r2, [pc, #76]	; (80021c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002178:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217a:	f7fe fa65 	bl	8000648 <HAL_GetTick>
 800217e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002180:	e009      	b.n	8002196 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002182:	f7fe fa61 	bl	8000648 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d902      	bls.n	8002196 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	73fb      	strb	r3, [r7, #15]
          break;
 8002194:	e005      	b.n	80021a2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002196:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0ef      	beq.n	8002182 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d106      	bne.n	80021b6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80021aa:	695a      	ldr	r2, [r3, #20]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	4903      	ldr	r1, [pc, #12]	; (80021c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40021000 	.word	0x40021000

080021c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e01d      	b.n	8002212 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d106      	bne.n	80021f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f002 f92c 	bl	8004448 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2202      	movs	r2, #2
 80021f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3304      	adds	r3, #4
 8002200:	4619      	mov	r1, r3
 8002202:	4610      	mov	r0, r2
 8002204:	f000 fa60 	bl	80026c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	4b0c      	ldr	r3, [pc, #48]	; (800226c <HAL_TIM_Base_Start_IT+0x50>)
 800223c:	4013      	ands	r3, r2
 800223e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2b06      	cmp	r3, #6
 8002244:	d00b      	beq.n	800225e <HAL_TIM_Base_Start_IT+0x42>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800224c:	d007      	beq.n	800225e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 0201 	orr.w	r2, r2, #1
 800225c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	00010007 	.word	0x00010007

08002270 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0201 	bic.w	r2, r2, #1
 8002286:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6a1a      	ldr	r2, [r3, #32]
 800228e:	f241 1311 	movw	r3, #4369	; 0x1111
 8002292:	4013      	ands	r3, r2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10f      	bne.n	80022b8 <HAL_TIM_Base_Stop_IT+0x48>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6a1a      	ldr	r2, [r3, #32]
 800229e:	f240 4344 	movw	r3, #1092	; 0x444
 80022a2:	4013      	ands	r3, r2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d107      	bne.n	80022b8 <HAL_TIM_Base_Stop_IT+0x48>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0201 	bic.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d122      	bne.n	8002322 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d11b      	bne.n	8002322 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f06f 0202 	mvn.w	r2, #2
 80022f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f003 0303 	and.w	r3, r3, #3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f9be 	bl	800268a <HAL_TIM_IC_CaptureCallback>
 800230e:	e005      	b.n	800231c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f9b0 	bl	8002676 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f9c1 	bl	800269e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b04      	cmp	r3, #4
 800232e:	d122      	bne.n	8002376 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	2b04      	cmp	r3, #4
 800233c:	d11b      	bne.n	8002376 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f06f 0204 	mvn.w	r2, #4
 8002346:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2202      	movs	r2, #2
 800234c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 f994 	bl	800268a <HAL_TIM_IC_CaptureCallback>
 8002362:	e005      	b.n	8002370 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 f986 	bl	8002676 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f997 	bl	800269e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b08      	cmp	r3, #8
 8002382:	d122      	bne.n	80023ca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b08      	cmp	r3, #8
 8002390:	d11b      	bne.n	80023ca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f06f 0208 	mvn.w	r2, #8
 800239a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2204      	movs	r2, #4
 80023a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f96a 	bl	800268a <HAL_TIM_IC_CaptureCallback>
 80023b6:	e005      	b.n	80023c4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f95c 	bl	8002676 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f96d 	bl	800269e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	f003 0310 	and.w	r3, r3, #16
 80023d4:	2b10      	cmp	r3, #16
 80023d6:	d122      	bne.n	800241e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	2b10      	cmp	r3, #16
 80023e4:	d11b      	bne.n	800241e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f06f 0210 	mvn.w	r2, #16
 80023ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2208      	movs	r2, #8
 80023f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 f940 	bl	800268a <HAL_TIM_IC_CaptureCallback>
 800240a:	e005      	b.n	8002418 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 f932 	bl	8002676 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f943 	bl	800269e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b01      	cmp	r3, #1
 800242a:	d10e      	bne.n	800244a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b01      	cmp	r3, #1
 8002438:	d107      	bne.n	800244a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f06f 0201 	mvn.w	r2, #1
 8002442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f001 fd03 	bl	8003e50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002454:	2b80      	cmp	r3, #128	; 0x80
 8002456:	d10e      	bne.n	8002476 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002462:	2b80      	cmp	r3, #128	; 0x80
 8002464:	d107      	bne.n	8002476 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800246e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 fac3 	bl	80029fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002484:	d10e      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002490:	2b80      	cmp	r3, #128	; 0x80
 8002492:	d107      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800249c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 fab6 	bl	8002a10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ae:	2b40      	cmp	r3, #64	; 0x40
 80024b0:	d10e      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024bc:	2b40      	cmp	r3, #64	; 0x40
 80024be:	d107      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f8f1 	bl	80026b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	f003 0320 	and.w	r3, r3, #32
 80024da:	2b20      	cmp	r3, #32
 80024dc:	d10e      	bne.n	80024fc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f003 0320 	and.w	r3, r3, #32
 80024e8:	2b20      	cmp	r3, #32
 80024ea:	d107      	bne.n	80024fc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f06f 0220 	mvn.w	r2, #32
 80024f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 fa76 	bl	80029e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024fc:	bf00      	nop
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_TIM_ConfigClockSource+0x18>
 8002518:	2302      	movs	r3, #2
 800251a:	e0a8      	b.n	800266e <HAL_TIM_ConfigClockSource+0x16a>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2202      	movs	r2, #2
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800253a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800253e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002546:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b40      	cmp	r3, #64	; 0x40
 8002556:	d067      	beq.n	8002628 <HAL_TIM_ConfigClockSource+0x124>
 8002558:	2b40      	cmp	r3, #64	; 0x40
 800255a:	d80b      	bhi.n	8002574 <HAL_TIM_ConfigClockSource+0x70>
 800255c:	2b10      	cmp	r3, #16
 800255e:	d073      	beq.n	8002648 <HAL_TIM_ConfigClockSource+0x144>
 8002560:	2b10      	cmp	r3, #16
 8002562:	d802      	bhi.n	800256a <HAL_TIM_ConfigClockSource+0x66>
 8002564:	2b00      	cmp	r3, #0
 8002566:	d06f      	beq.n	8002648 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002568:	e078      	b.n	800265c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800256a:	2b20      	cmp	r3, #32
 800256c:	d06c      	beq.n	8002648 <HAL_TIM_ConfigClockSource+0x144>
 800256e:	2b30      	cmp	r3, #48	; 0x30
 8002570:	d06a      	beq.n	8002648 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002572:	e073      	b.n	800265c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002574:	2b70      	cmp	r3, #112	; 0x70
 8002576:	d00d      	beq.n	8002594 <HAL_TIM_ConfigClockSource+0x90>
 8002578:	2b70      	cmp	r3, #112	; 0x70
 800257a:	d804      	bhi.n	8002586 <HAL_TIM_ConfigClockSource+0x82>
 800257c:	2b50      	cmp	r3, #80	; 0x50
 800257e:	d033      	beq.n	80025e8 <HAL_TIM_ConfigClockSource+0xe4>
 8002580:	2b60      	cmp	r3, #96	; 0x60
 8002582:	d041      	beq.n	8002608 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002584:	e06a      	b.n	800265c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800258a:	d066      	beq.n	800265a <HAL_TIM_ConfigClockSource+0x156>
 800258c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002590:	d017      	beq.n	80025c2 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002592:	e063      	b.n	800265c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	6899      	ldr	r1, [r3, #8]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f000 f9a4 	bl	80028f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025b6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	609a      	str	r2, [r3, #8]
      break;
 80025c0:	e04c      	b.n	800265c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	6899      	ldr	r1, [r3, #8]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f000 f98d 	bl	80028f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025e4:	609a      	str	r2, [r3, #8]
      break;
 80025e6:	e039      	b.n	800265c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6818      	ldr	r0, [r3, #0]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	6859      	ldr	r1, [r3, #4]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	461a      	mov	r2, r3
 80025f6:	f000 f901 	bl	80027fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2150      	movs	r1, #80	; 0x50
 8002600:	4618      	mov	r0, r3
 8002602:	f000 f95a 	bl	80028ba <TIM_ITRx_SetConfig>
      break;
 8002606:	e029      	b.n	800265c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6818      	ldr	r0, [r3, #0]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	6859      	ldr	r1, [r3, #4]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	461a      	mov	r2, r3
 8002616:	f000 f920 	bl	800285a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2160      	movs	r1, #96	; 0x60
 8002620:	4618      	mov	r0, r3
 8002622:	f000 f94a 	bl	80028ba <TIM_ITRx_SetConfig>
      break;
 8002626:	e019      	b.n	800265c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6818      	ldr	r0, [r3, #0]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	6859      	ldr	r1, [r3, #4]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	461a      	mov	r2, r3
 8002636:	f000 f8e1 	bl	80027fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2140      	movs	r1, #64	; 0x40
 8002640:	4618      	mov	r0, r3
 8002642:	f000 f93a 	bl	80028ba <TIM_ITRx_SetConfig>
      break;
 8002646:	e009      	b.n	800265c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4619      	mov	r1, r3
 8002652:	4610      	mov	r0, r2
 8002654:	f000 f931 	bl	80028ba <TIM_ITRx_SetConfig>
      break;
 8002658:	e000      	b.n	800265c <HAL_TIM_ConfigClockSource+0x158>
      break;
 800265a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a40      	ldr	r2, [pc, #256]	; (80027dc <TIM_Base_SetConfig+0x114>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d013      	beq.n	8002708 <TIM_Base_SetConfig+0x40>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e6:	d00f      	beq.n	8002708 <TIM_Base_SetConfig+0x40>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a3d      	ldr	r2, [pc, #244]	; (80027e0 <TIM_Base_SetConfig+0x118>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d00b      	beq.n	8002708 <TIM_Base_SetConfig+0x40>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a3c      	ldr	r2, [pc, #240]	; (80027e4 <TIM_Base_SetConfig+0x11c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d007      	beq.n	8002708 <TIM_Base_SetConfig+0x40>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a3b      	ldr	r2, [pc, #236]	; (80027e8 <TIM_Base_SetConfig+0x120>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d003      	beq.n	8002708 <TIM_Base_SetConfig+0x40>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a3a      	ldr	r2, [pc, #232]	; (80027ec <TIM_Base_SetConfig+0x124>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d108      	bne.n	800271a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800270e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	4313      	orrs	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a2f      	ldr	r2, [pc, #188]	; (80027dc <TIM_Base_SetConfig+0x114>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d01f      	beq.n	8002762 <TIM_Base_SetConfig+0x9a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002728:	d01b      	beq.n	8002762 <TIM_Base_SetConfig+0x9a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a2c      	ldr	r2, [pc, #176]	; (80027e0 <TIM_Base_SetConfig+0x118>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d017      	beq.n	8002762 <TIM_Base_SetConfig+0x9a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a2b      	ldr	r2, [pc, #172]	; (80027e4 <TIM_Base_SetConfig+0x11c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d013      	beq.n	8002762 <TIM_Base_SetConfig+0x9a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a2a      	ldr	r2, [pc, #168]	; (80027e8 <TIM_Base_SetConfig+0x120>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d00f      	beq.n	8002762 <TIM_Base_SetConfig+0x9a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a29      	ldr	r2, [pc, #164]	; (80027ec <TIM_Base_SetConfig+0x124>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00b      	beq.n	8002762 <TIM_Base_SetConfig+0x9a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a28      	ldr	r2, [pc, #160]	; (80027f0 <TIM_Base_SetConfig+0x128>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d007      	beq.n	8002762 <TIM_Base_SetConfig+0x9a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a27      	ldr	r2, [pc, #156]	; (80027f4 <TIM_Base_SetConfig+0x12c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d003      	beq.n	8002762 <TIM_Base_SetConfig+0x9a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a26      	ldr	r2, [pc, #152]	; (80027f8 <TIM_Base_SetConfig+0x130>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d108      	bne.n	8002774 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	4313      	orrs	r3, r2
 8002772:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	4313      	orrs	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a10      	ldr	r2, [pc, #64]	; (80027dc <TIM_Base_SetConfig+0x114>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d00f      	beq.n	80027c0 <TIM_Base_SetConfig+0xf8>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a12      	ldr	r2, [pc, #72]	; (80027ec <TIM_Base_SetConfig+0x124>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d00b      	beq.n	80027c0 <TIM_Base_SetConfig+0xf8>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a11      	ldr	r2, [pc, #68]	; (80027f0 <TIM_Base_SetConfig+0x128>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d007      	beq.n	80027c0 <TIM_Base_SetConfig+0xf8>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a10      	ldr	r2, [pc, #64]	; (80027f4 <TIM_Base_SetConfig+0x12c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d003      	beq.n	80027c0 <TIM_Base_SetConfig+0xf8>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a0f      	ldr	r2, [pc, #60]	; (80027f8 <TIM_Base_SetConfig+0x130>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d103      	bne.n	80027c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	691a      	ldr	r2, [r3, #16]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	615a      	str	r2, [r3, #20]
}
 80027ce:	bf00      	nop
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40012c00 	.word	0x40012c00
 80027e0:	40000400 	.word	0x40000400
 80027e4:	40000800 	.word	0x40000800
 80027e8:	40000c00 	.word	0x40000c00
 80027ec:	40013400 	.word	0x40013400
 80027f0:	40014000 	.word	0x40014000
 80027f4:	40014400 	.word	0x40014400
 80027f8:	40014800 	.word	0x40014800

080027fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	f023 0201 	bic.w	r2, r3, #1
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f023 030a 	bic.w	r3, r3, #10
 8002838:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4313      	orrs	r3, r2
 8002840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	621a      	str	r2, [r3, #32]
}
 800284e:	bf00      	nop
 8002850:	371c      	adds	r7, #28
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800285a:	b480      	push	{r7}
 800285c:	b087      	sub	sp, #28
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	f023 0210 	bic.w	r2, r3, #16
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002884:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	031b      	lsls	r3, r3, #12
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4313      	orrs	r3, r2
 800288e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002896:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	621a      	str	r2, [r3, #32]
}
 80028ae:	bf00      	nop
 80028b0:	371c      	adds	r7, #28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b085      	sub	sp, #20
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f043 0307 	orr.w	r3, r3, #7
 80028dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	609a      	str	r2, [r3, #8]
}
 80028e4:	bf00      	nop
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b087      	sub	sp, #28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800290a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	021a      	lsls	r2, r3, #8
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	431a      	orrs	r2, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	4313      	orrs	r3, r2
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	4313      	orrs	r3, r2
 800291c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	609a      	str	r2, [r3, #8]
}
 8002924:	bf00      	nop
 8002926:	371c      	adds	r7, #28
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002944:	2302      	movs	r3, #2
 8002946:	e045      	b.n	80029d4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a1c      	ldr	r2, [pc, #112]	; (80029e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d004      	beq.n	800297c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a1b      	ldr	r2, [pc, #108]	; (80029e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d108      	bne.n	800298e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002982:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	4313      	orrs	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002994:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4313      	orrs	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029a6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	40012c00 	.word	0x40012c00
 80029e4:	40013400 	.word	0x40013400

080029e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e040      	b.n	8002ab8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d106      	bne.n	8002a4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f001 fd52 	bl	80044f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2224      	movs	r2, #36	; 0x24
 8002a50:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0201 	bic.w	r2, r2, #1
 8002a60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f98c 	bl	8002d80 <UART_SetConfig>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d101      	bne.n	8002a72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e022      	b.n	8002ab8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 fcc8 	bl	8003410 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0201 	orr.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 fd4f 	bl	8003554 <UART_CheckIdleState>
 8002ab6:	4603      	mov	r3, r0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08a      	sub	sp, #40	; 0x28
 8002ac4:	af02      	add	r7, sp, #8
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	4613      	mov	r3, r2
 8002ace:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	f040 8081 	bne.w	8002bdc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <HAL_UART_Transmit+0x26>
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e079      	b.n	8002bde <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d101      	bne.n	8002af8 <HAL_UART_Transmit+0x38>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e072      	b.n	8002bde <HAL_UART_Transmit+0x11e>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2221      	movs	r2, #33	; 0x21
 8002b0a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002b0c:	f7fd fd9c 	bl	8000648 <HAL_GetTick>
 8002b10:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	88fa      	ldrh	r2, [r7, #6]
 8002b16:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	88fa      	ldrh	r2, [r7, #6]
 8002b1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b2a:	d108      	bne.n	8002b3e <HAL_UART_Transmit+0x7e>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d104      	bne.n	8002b3e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	61bb      	str	r3, [r7, #24]
 8002b3c:	e003      	b.n	8002b46 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b46:	e02d      	b.n	8002ba4 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2180      	movs	r1, #128	; 0x80
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 fd43 	bl	80035de <UART_WaitOnFlagUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e03d      	b.n	8002bde <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10b      	bne.n	8002b80 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	881a      	ldrh	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b74:	b292      	uxth	r2, r2
 8002b76:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	3302      	adds	r3, #2
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	e008      	b.n	8002b92 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	781a      	ldrb	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	b292      	uxth	r2, r2
 8002b8a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1cb      	bne.n	8002b48 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2140      	movs	r1, #64	; 0x40
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 fd0f 	bl	80035de <UART_WaitOnFlagUntilTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e009      	b.n	8002bde <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	e000      	b.n	8002bde <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002bdc:	2302      	movs	r3, #2
  }
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3720      	adds	r7, #32
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b08a      	sub	sp, #40	; 0x28
 8002bea:	af02      	add	r7, sp, #8
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	603b      	str	r3, [r7, #0]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bfa:	2b20      	cmp	r3, #32
 8002bfc:	f040 80bb 	bne.w	8002d76 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d002      	beq.n	8002c0c <HAL_UART_Receive+0x26>
 8002c06:	88fb      	ldrh	r3, [r7, #6]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0b3      	b.n	8002d78 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_UART_Receive+0x38>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e0ac      	b.n	8002d78 <HAL_UART_Receive+0x192>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2222      	movs	r2, #34	; 0x22
 8002c30:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002c32:	f7fd fd09 	bl	8000648 <HAL_GetTick>
 8002c36:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	88fa      	ldrh	r2, [r7, #6]
 8002c3c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	88fa      	ldrh	r2, [r7, #6]
 8002c44:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c50:	d10e      	bne.n	8002c70 <HAL_UART_Receive+0x8a>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d105      	bne.n	8002c66 <HAL_UART_Receive+0x80>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002c60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c64:	e02d      	b.n	8002cc2 <HAL_UART_Receive+0xdc>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	22ff      	movs	r2, #255	; 0xff
 8002c6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c6e:	e028      	b.n	8002cc2 <HAL_UART_Receive+0xdc>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10d      	bne.n	8002c94 <HAL_UART_Receive+0xae>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d104      	bne.n	8002c8a <HAL_UART_Receive+0xa4>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	22ff      	movs	r2, #255	; 0xff
 8002c84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c88:	e01b      	b.n	8002cc2 <HAL_UART_Receive+0xdc>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	227f      	movs	r2, #127	; 0x7f
 8002c8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c92:	e016      	b.n	8002cc2 <HAL_UART_Receive+0xdc>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c9c:	d10d      	bne.n	8002cba <HAL_UART_Receive+0xd4>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d104      	bne.n	8002cb0 <HAL_UART_Receive+0xca>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	227f      	movs	r2, #127	; 0x7f
 8002caa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002cae:	e008      	b.n	8002cc2 <HAL_UART_Receive+0xdc>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	223f      	movs	r2, #63	; 0x3f
 8002cb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002cb8:	e003      	b.n	8002cc2 <HAL_UART_Receive+0xdc>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002cc8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd2:	d108      	bne.n	8002ce6 <HAL_UART_Receive+0x100>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d104      	bne.n	8002ce6 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	61bb      	str	r3, [r7, #24]
 8002ce4:	e003      	b.n	8002cee <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002cee:	e033      	b.n	8002d58 <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2120      	movs	r1, #32
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 fc6f 	bl	80035de <UART_WaitOnFlagUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e036      	b.n	8002d78 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10c      	bne.n	8002d2a <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	8a7b      	ldrh	r3, [r7, #18]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	3302      	adds	r3, #2
 8002d26:	61bb      	str	r3, [r7, #24]
 8002d28:	e00d      	b.n	8002d46 <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	8a7b      	ldrh	r3, [r7, #18]
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	4013      	ands	r3, r2
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	3301      	adds	r3, #1
 8002d44:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1c5      	bne.n	8002cf0 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2220      	movs	r2, #32
 8002d68:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	e000      	b.n	8002d78 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8002d76:	2302      	movs	r3, #2
  }
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3720      	adds	r7, #32
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d80:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002d84:	b088      	sub	sp, #32
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	4bac      	ldr	r3, [pc, #688]	; (8003068 <UART_SetConfig+0x2e8>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	69f9      	ldr	r1, [r7, #28]
 8002dbe:	430b      	orrs	r3, r1
 8002dc0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4aa2      	ldr	r2, [pc, #648]	; (800306c <UART_SetConfig+0x2ec>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d004      	beq.n	8002df2 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	69fa      	ldr	r2, [r7, #28]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	69fa      	ldr	r2, [r7, #28]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a99      	ldr	r2, [pc, #612]	; (8003070 <UART_SetConfig+0x2f0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d121      	bne.n	8002e54 <UART_SetConfig+0xd4>
 8002e10:	4b98      	ldr	r3, [pc, #608]	; (8003074 <UART_SetConfig+0x2f4>)
 8002e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d816      	bhi.n	8002e4c <UART_SetConfig+0xcc>
 8002e1e:	a201      	add	r2, pc, #4	; (adr r2, 8002e24 <UART_SetConfig+0xa4>)
 8002e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e24:	08002e35 	.word	0x08002e35
 8002e28:	08002e41 	.word	0x08002e41
 8002e2c:	08002e3b 	.word	0x08002e3b
 8002e30:	08002e47 	.word	0x08002e47
 8002e34:	2301      	movs	r3, #1
 8002e36:	76fb      	strb	r3, [r7, #27]
 8002e38:	e0e8      	b.n	800300c <UART_SetConfig+0x28c>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	76fb      	strb	r3, [r7, #27]
 8002e3e:	e0e5      	b.n	800300c <UART_SetConfig+0x28c>
 8002e40:	2304      	movs	r3, #4
 8002e42:	76fb      	strb	r3, [r7, #27]
 8002e44:	e0e2      	b.n	800300c <UART_SetConfig+0x28c>
 8002e46:	2308      	movs	r3, #8
 8002e48:	76fb      	strb	r3, [r7, #27]
 8002e4a:	e0df      	b.n	800300c <UART_SetConfig+0x28c>
 8002e4c:	2310      	movs	r3, #16
 8002e4e:	76fb      	strb	r3, [r7, #27]
 8002e50:	bf00      	nop
 8002e52:	e0db      	b.n	800300c <UART_SetConfig+0x28c>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a87      	ldr	r2, [pc, #540]	; (8003078 <UART_SetConfig+0x2f8>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d134      	bne.n	8002ec8 <UART_SetConfig+0x148>
 8002e5e:	4b85      	ldr	r3, [pc, #532]	; (8003074 <UART_SetConfig+0x2f4>)
 8002e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e64:	f003 030c 	and.w	r3, r3, #12
 8002e68:	2b0c      	cmp	r3, #12
 8002e6a:	d829      	bhi.n	8002ec0 <UART_SetConfig+0x140>
 8002e6c:	a201      	add	r2, pc, #4	; (adr r2, 8002e74 <UART_SetConfig+0xf4>)
 8002e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e72:	bf00      	nop
 8002e74:	08002ea9 	.word	0x08002ea9
 8002e78:	08002ec1 	.word	0x08002ec1
 8002e7c:	08002ec1 	.word	0x08002ec1
 8002e80:	08002ec1 	.word	0x08002ec1
 8002e84:	08002eb5 	.word	0x08002eb5
 8002e88:	08002ec1 	.word	0x08002ec1
 8002e8c:	08002ec1 	.word	0x08002ec1
 8002e90:	08002ec1 	.word	0x08002ec1
 8002e94:	08002eaf 	.word	0x08002eaf
 8002e98:	08002ec1 	.word	0x08002ec1
 8002e9c:	08002ec1 	.word	0x08002ec1
 8002ea0:	08002ec1 	.word	0x08002ec1
 8002ea4:	08002ebb 	.word	0x08002ebb
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	76fb      	strb	r3, [r7, #27]
 8002eac:	e0ae      	b.n	800300c <UART_SetConfig+0x28c>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	76fb      	strb	r3, [r7, #27]
 8002eb2:	e0ab      	b.n	800300c <UART_SetConfig+0x28c>
 8002eb4:	2304      	movs	r3, #4
 8002eb6:	76fb      	strb	r3, [r7, #27]
 8002eb8:	e0a8      	b.n	800300c <UART_SetConfig+0x28c>
 8002eba:	2308      	movs	r3, #8
 8002ebc:	76fb      	strb	r3, [r7, #27]
 8002ebe:	e0a5      	b.n	800300c <UART_SetConfig+0x28c>
 8002ec0:	2310      	movs	r3, #16
 8002ec2:	76fb      	strb	r3, [r7, #27]
 8002ec4:	bf00      	nop
 8002ec6:	e0a1      	b.n	800300c <UART_SetConfig+0x28c>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a6b      	ldr	r2, [pc, #428]	; (800307c <UART_SetConfig+0x2fc>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d120      	bne.n	8002f14 <UART_SetConfig+0x194>
 8002ed2:	4b68      	ldr	r3, [pc, #416]	; (8003074 <UART_SetConfig+0x2f4>)
 8002ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002edc:	2b10      	cmp	r3, #16
 8002ede:	d00f      	beq.n	8002f00 <UART_SetConfig+0x180>
 8002ee0:	2b10      	cmp	r3, #16
 8002ee2:	d802      	bhi.n	8002eea <UART_SetConfig+0x16a>
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d005      	beq.n	8002ef4 <UART_SetConfig+0x174>
 8002ee8:	e010      	b.n	8002f0c <UART_SetConfig+0x18c>
 8002eea:	2b20      	cmp	r3, #32
 8002eec:	d005      	beq.n	8002efa <UART_SetConfig+0x17a>
 8002eee:	2b30      	cmp	r3, #48	; 0x30
 8002ef0:	d009      	beq.n	8002f06 <UART_SetConfig+0x186>
 8002ef2:	e00b      	b.n	8002f0c <UART_SetConfig+0x18c>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	76fb      	strb	r3, [r7, #27]
 8002ef8:	e088      	b.n	800300c <UART_SetConfig+0x28c>
 8002efa:	2302      	movs	r3, #2
 8002efc:	76fb      	strb	r3, [r7, #27]
 8002efe:	e085      	b.n	800300c <UART_SetConfig+0x28c>
 8002f00:	2304      	movs	r3, #4
 8002f02:	76fb      	strb	r3, [r7, #27]
 8002f04:	e082      	b.n	800300c <UART_SetConfig+0x28c>
 8002f06:	2308      	movs	r3, #8
 8002f08:	76fb      	strb	r3, [r7, #27]
 8002f0a:	e07f      	b.n	800300c <UART_SetConfig+0x28c>
 8002f0c:	2310      	movs	r3, #16
 8002f0e:	76fb      	strb	r3, [r7, #27]
 8002f10:	bf00      	nop
 8002f12:	e07b      	b.n	800300c <UART_SetConfig+0x28c>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a59      	ldr	r2, [pc, #356]	; (8003080 <UART_SetConfig+0x300>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d120      	bne.n	8002f60 <UART_SetConfig+0x1e0>
 8002f1e:	4b55      	ldr	r3, [pc, #340]	; (8003074 <UART_SetConfig+0x2f4>)
 8002f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f24:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f28:	2b40      	cmp	r3, #64	; 0x40
 8002f2a:	d00f      	beq.n	8002f4c <UART_SetConfig+0x1cc>
 8002f2c:	2b40      	cmp	r3, #64	; 0x40
 8002f2e:	d802      	bhi.n	8002f36 <UART_SetConfig+0x1b6>
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <UART_SetConfig+0x1c0>
 8002f34:	e010      	b.n	8002f58 <UART_SetConfig+0x1d8>
 8002f36:	2b80      	cmp	r3, #128	; 0x80
 8002f38:	d005      	beq.n	8002f46 <UART_SetConfig+0x1c6>
 8002f3a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f3c:	d009      	beq.n	8002f52 <UART_SetConfig+0x1d2>
 8002f3e:	e00b      	b.n	8002f58 <UART_SetConfig+0x1d8>
 8002f40:	2300      	movs	r3, #0
 8002f42:	76fb      	strb	r3, [r7, #27]
 8002f44:	e062      	b.n	800300c <UART_SetConfig+0x28c>
 8002f46:	2302      	movs	r3, #2
 8002f48:	76fb      	strb	r3, [r7, #27]
 8002f4a:	e05f      	b.n	800300c <UART_SetConfig+0x28c>
 8002f4c:	2304      	movs	r3, #4
 8002f4e:	76fb      	strb	r3, [r7, #27]
 8002f50:	e05c      	b.n	800300c <UART_SetConfig+0x28c>
 8002f52:	2308      	movs	r3, #8
 8002f54:	76fb      	strb	r3, [r7, #27]
 8002f56:	e059      	b.n	800300c <UART_SetConfig+0x28c>
 8002f58:	2310      	movs	r3, #16
 8002f5a:	76fb      	strb	r3, [r7, #27]
 8002f5c:	bf00      	nop
 8002f5e:	e055      	b.n	800300c <UART_SetConfig+0x28c>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a47      	ldr	r2, [pc, #284]	; (8003084 <UART_SetConfig+0x304>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d124      	bne.n	8002fb4 <UART_SetConfig+0x234>
 8002f6a:	4b42      	ldr	r3, [pc, #264]	; (8003074 <UART_SetConfig+0x2f4>)
 8002f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f78:	d012      	beq.n	8002fa0 <UART_SetConfig+0x220>
 8002f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f7e:	d802      	bhi.n	8002f86 <UART_SetConfig+0x206>
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d007      	beq.n	8002f94 <UART_SetConfig+0x214>
 8002f84:	e012      	b.n	8002fac <UART_SetConfig+0x22c>
 8002f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f8a:	d006      	beq.n	8002f9a <UART_SetConfig+0x21a>
 8002f8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f90:	d009      	beq.n	8002fa6 <UART_SetConfig+0x226>
 8002f92:	e00b      	b.n	8002fac <UART_SetConfig+0x22c>
 8002f94:	2300      	movs	r3, #0
 8002f96:	76fb      	strb	r3, [r7, #27]
 8002f98:	e038      	b.n	800300c <UART_SetConfig+0x28c>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	76fb      	strb	r3, [r7, #27]
 8002f9e:	e035      	b.n	800300c <UART_SetConfig+0x28c>
 8002fa0:	2304      	movs	r3, #4
 8002fa2:	76fb      	strb	r3, [r7, #27]
 8002fa4:	e032      	b.n	800300c <UART_SetConfig+0x28c>
 8002fa6:	2308      	movs	r3, #8
 8002fa8:	76fb      	strb	r3, [r7, #27]
 8002faa:	e02f      	b.n	800300c <UART_SetConfig+0x28c>
 8002fac:	2310      	movs	r3, #16
 8002fae:	76fb      	strb	r3, [r7, #27]
 8002fb0:	bf00      	nop
 8002fb2:	e02b      	b.n	800300c <UART_SetConfig+0x28c>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a2c      	ldr	r2, [pc, #176]	; (800306c <UART_SetConfig+0x2ec>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d124      	bne.n	8003008 <UART_SetConfig+0x288>
 8002fbe:	4b2d      	ldr	r3, [pc, #180]	; (8003074 <UART_SetConfig+0x2f4>)
 8002fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fcc:	d012      	beq.n	8002ff4 <UART_SetConfig+0x274>
 8002fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fd2:	d802      	bhi.n	8002fda <UART_SetConfig+0x25a>
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d007      	beq.n	8002fe8 <UART_SetConfig+0x268>
 8002fd8:	e012      	b.n	8003000 <UART_SetConfig+0x280>
 8002fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fde:	d006      	beq.n	8002fee <UART_SetConfig+0x26e>
 8002fe0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fe4:	d009      	beq.n	8002ffa <UART_SetConfig+0x27a>
 8002fe6:	e00b      	b.n	8003000 <UART_SetConfig+0x280>
 8002fe8:	2300      	movs	r3, #0
 8002fea:	76fb      	strb	r3, [r7, #27]
 8002fec:	e00e      	b.n	800300c <UART_SetConfig+0x28c>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	76fb      	strb	r3, [r7, #27]
 8002ff2:	e00b      	b.n	800300c <UART_SetConfig+0x28c>
 8002ff4:	2304      	movs	r3, #4
 8002ff6:	76fb      	strb	r3, [r7, #27]
 8002ff8:	e008      	b.n	800300c <UART_SetConfig+0x28c>
 8002ffa:	2308      	movs	r3, #8
 8002ffc:	76fb      	strb	r3, [r7, #27]
 8002ffe:	e005      	b.n	800300c <UART_SetConfig+0x28c>
 8003000:	2310      	movs	r3, #16
 8003002:	76fb      	strb	r3, [r7, #27]
 8003004:	bf00      	nop
 8003006:	e001      	b.n	800300c <UART_SetConfig+0x28c>
 8003008:	2310      	movs	r3, #16
 800300a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a16      	ldr	r2, [pc, #88]	; (800306c <UART_SetConfig+0x2ec>)
 8003012:	4293      	cmp	r3, r2
 8003014:	f040 80fa 	bne.w	800320c <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003018:	7efb      	ldrb	r3, [r7, #27]
 800301a:	2b08      	cmp	r3, #8
 800301c:	d836      	bhi.n	800308c <UART_SetConfig+0x30c>
 800301e:	a201      	add	r2, pc, #4	; (adr r2, 8003024 <UART_SetConfig+0x2a4>)
 8003020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003024:	08003049 	.word	0x08003049
 8003028:	0800308d 	.word	0x0800308d
 800302c:	08003051 	.word	0x08003051
 8003030:	0800308d 	.word	0x0800308d
 8003034:	08003057 	.word	0x08003057
 8003038:	0800308d 	.word	0x0800308d
 800303c:	0800308d 	.word	0x0800308d
 8003040:	0800308d 	.word	0x0800308d
 8003044:	0800305f 	.word	0x0800305f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003048:	f7fe fb80 	bl	800174c <HAL_RCC_GetPCLK1Freq>
 800304c:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800304e:	e020      	b.n	8003092 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003050:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <UART_SetConfig+0x308>)
 8003052:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003054:	e01d      	b.n	8003092 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003056:	f7fe fae3 	bl	8001620 <HAL_RCC_GetSysClockFreq>
 800305a:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800305c:	e019      	b.n	8003092 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800305e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003062:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003064:	e015      	b.n	8003092 <UART_SetConfig+0x312>
 8003066:	bf00      	nop
 8003068:	efff69f3 	.word	0xefff69f3
 800306c:	40008000 	.word	0x40008000
 8003070:	40013800 	.word	0x40013800
 8003074:	40021000 	.word	0x40021000
 8003078:	40004400 	.word	0x40004400
 800307c:	40004800 	.word	0x40004800
 8003080:	40004c00 	.word	0x40004c00
 8003084:	40005000 	.word	0x40005000
 8003088:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	74fb      	strb	r3, [r7, #19]
        break;
 8003090:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 81ac 	beq.w	80033f2 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	4413      	add	r3, r2
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d305      	bcc.n	80030b6 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d902      	bls.n	80030bc <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	74fb      	strb	r3, [r7, #19]
 80030ba:	e19a      	b.n	80033f2 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 80030bc:	7efb      	ldrb	r3, [r7, #27]
 80030be:	2b08      	cmp	r3, #8
 80030c0:	f200 8091 	bhi.w	80031e6 <UART_SetConfig+0x466>
 80030c4:	a201      	add	r2, pc, #4	; (adr r2, 80030cc <UART_SetConfig+0x34c>)
 80030c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ca:	bf00      	nop
 80030cc:	080030f1 	.word	0x080030f1
 80030d0:	080031e7 	.word	0x080031e7
 80030d4:	0800313d 	.word	0x0800313d
 80030d8:	080031e7 	.word	0x080031e7
 80030dc:	08003171 	.word	0x08003171
 80030e0:	080031e7 	.word	0x080031e7
 80030e4:	080031e7 	.word	0x080031e7
 80030e8:	080031e7 	.word	0x080031e7
 80030ec:	080031bd 	.word	0x080031bd
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80030f0:	f7fe fb2c 	bl	800174c <HAL_RCC_GetPCLK1Freq>
 80030f4:	4603      	mov	r3, r0
 80030f6:	4619      	mov	r1, r3
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	f04f 0400 	mov.w	r4, #0
 8003104:	0214      	lsls	r4, r2, #8
 8003106:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800310a:	020b      	lsls	r3, r1, #8
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6852      	ldr	r2, [r2, #4]
 8003110:	0852      	lsrs	r2, r2, #1
 8003112:	4611      	mov	r1, r2
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	eb13 0b01 	adds.w	fp, r3, r1
 800311c:	eb44 0c02 	adc.w	ip, r4, r2
 8003120:	4658      	mov	r0, fp
 8003122:	4661      	mov	r1, ip
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f04f 0400 	mov.w	r4, #0
 800312c:	461a      	mov	r2, r3
 800312e:	4623      	mov	r3, r4
 8003130:	f7fd f89e 	bl	8000270 <__aeabi_uldivmod>
 8003134:	4603      	mov	r3, r0
 8003136:	460c      	mov	r4, r1
 8003138:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800313a:	e057      	b.n	80031ec <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	085b      	lsrs	r3, r3, #1
 8003142:	f04f 0400 	mov.w	r4, #0
 8003146:	49b1      	ldr	r1, [pc, #708]	; (800340c <UART_SetConfig+0x68c>)
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	eb13 0b01 	adds.w	fp, r3, r1
 8003150:	eb44 0c02 	adc.w	ip, r4, r2
 8003154:	4658      	mov	r0, fp
 8003156:	4661      	mov	r1, ip
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f04f 0400 	mov.w	r4, #0
 8003160:	461a      	mov	r2, r3
 8003162:	4623      	mov	r3, r4
 8003164:	f7fd f884 	bl	8000270 <__aeabi_uldivmod>
 8003168:	4603      	mov	r3, r0
 800316a:	460c      	mov	r4, r1
 800316c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800316e:	e03d      	b.n	80031ec <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003170:	f7fe fa56 	bl	8001620 <HAL_RCC_GetSysClockFreq>
 8003174:	4603      	mov	r3, r0
 8003176:	4619      	mov	r1, r3
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	f04f 0400 	mov.w	r4, #0
 8003184:	0214      	lsls	r4, r2, #8
 8003186:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800318a:	020b      	lsls	r3, r1, #8
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6852      	ldr	r2, [r2, #4]
 8003190:	0852      	lsrs	r2, r2, #1
 8003192:	4611      	mov	r1, r2
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	eb13 0b01 	adds.w	fp, r3, r1
 800319c:	eb44 0c02 	adc.w	ip, r4, r2
 80031a0:	4658      	mov	r0, fp
 80031a2:	4661      	mov	r1, ip
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f04f 0400 	mov.w	r4, #0
 80031ac:	461a      	mov	r2, r3
 80031ae:	4623      	mov	r3, r4
 80031b0:	f7fd f85e 	bl	8000270 <__aeabi_uldivmod>
 80031b4:	4603      	mov	r3, r0
 80031b6:	460c      	mov	r4, r1
 80031b8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80031ba:	e017      	b.n	80031ec <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	085b      	lsrs	r3, r3, #1
 80031c2:	f04f 0400 	mov.w	r4, #0
 80031c6:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80031ca:	f144 0100 	adc.w	r1, r4, #0
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f04f 0400 	mov.w	r4, #0
 80031d6:	461a      	mov	r2, r3
 80031d8:	4623      	mov	r3, r4
 80031da:	f7fd f849 	bl	8000270 <__aeabi_uldivmod>
 80031de:	4603      	mov	r3, r0
 80031e0:	460c      	mov	r4, r1
 80031e2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80031e4:	e002      	b.n	80031ec <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	74fb      	strb	r3, [r7, #19]
            break;
 80031ea:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031f2:	d308      	bcc.n	8003206 <UART_SetConfig+0x486>
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031fa:	d204      	bcs.n	8003206 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	60da      	str	r2, [r3, #12]
 8003204:	e0f5      	b.n	80033f2 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	74fb      	strb	r3, [r7, #19]
 800320a:	e0f2      	b.n	80033f2 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003214:	d17f      	bne.n	8003316 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8003216:	7efb      	ldrb	r3, [r7, #27]
 8003218:	2b08      	cmp	r3, #8
 800321a:	d85c      	bhi.n	80032d6 <UART_SetConfig+0x556>
 800321c:	a201      	add	r2, pc, #4	; (adr r2, 8003224 <UART_SetConfig+0x4a4>)
 800321e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003222:	bf00      	nop
 8003224:	08003249 	.word	0x08003249
 8003228:	08003267 	.word	0x08003267
 800322c:	08003285 	.word	0x08003285
 8003230:	080032d7 	.word	0x080032d7
 8003234:	080032a1 	.word	0x080032a1
 8003238:	080032d7 	.word	0x080032d7
 800323c:	080032d7 	.word	0x080032d7
 8003240:	080032d7 	.word	0x080032d7
 8003244:	080032bf 	.word	0x080032bf
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003248:	f7fe fa80 	bl	800174c <HAL_RCC_GetPCLK1Freq>
 800324c:	4603      	mov	r3, r0
 800324e:	005a      	lsls	r2, r3, #1
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	085b      	lsrs	r3, r3, #1
 8003256:	441a      	add	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003260:	b29b      	uxth	r3, r3
 8003262:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003264:	e03a      	b.n	80032dc <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003266:	f7fe fa87 	bl	8001778 <HAL_RCC_GetPCLK2Freq>
 800326a:	4603      	mov	r3, r0
 800326c:	005a      	lsls	r2, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	085b      	lsrs	r3, r3, #1
 8003274:	441a      	add	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	fbb2 f3f3 	udiv	r3, r2, r3
 800327e:	b29b      	uxth	r3, r3
 8003280:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003282:	e02b      	b.n	80032dc <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	085b      	lsrs	r3, r3, #1
 800328a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800328e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6852      	ldr	r2, [r2, #4]
 8003296:	fbb3 f3f2 	udiv	r3, r3, r2
 800329a:	b29b      	uxth	r3, r3
 800329c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800329e:	e01d      	b.n	80032dc <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80032a0:	f7fe f9be 	bl	8001620 <HAL_RCC_GetSysClockFreq>
 80032a4:	4603      	mov	r3, r0
 80032a6:	005a      	lsls	r2, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	085b      	lsrs	r3, r3, #1
 80032ae:	441a      	add	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80032bc:	e00e      	b.n	80032dc <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	085b      	lsrs	r3, r3, #1
 80032c4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80032d4:	e002      	b.n	80032dc <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	74fb      	strb	r3, [r7, #19]
        break;
 80032da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	d916      	bls.n	8003310 <UART_SetConfig+0x590>
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d212      	bcs.n	8003310 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	f023 030f 	bic.w	r3, r3, #15
 80032f2:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	085b      	lsrs	r3, r3, #1
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	b29a      	uxth	r2, r3
 8003300:	897b      	ldrh	r3, [r7, #10]
 8003302:	4313      	orrs	r3, r2
 8003304:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	897a      	ldrh	r2, [r7, #10]
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	e070      	b.n	80033f2 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	74fb      	strb	r3, [r7, #19]
 8003314:	e06d      	b.n	80033f2 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8003316:	7efb      	ldrb	r3, [r7, #27]
 8003318:	2b08      	cmp	r3, #8
 800331a:	d859      	bhi.n	80033d0 <UART_SetConfig+0x650>
 800331c:	a201      	add	r2, pc, #4	; (adr r2, 8003324 <UART_SetConfig+0x5a4>)
 800331e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003322:	bf00      	nop
 8003324:	08003349 	.word	0x08003349
 8003328:	08003365 	.word	0x08003365
 800332c:	08003381 	.word	0x08003381
 8003330:	080033d1 	.word	0x080033d1
 8003334:	0800339d 	.word	0x0800339d
 8003338:	080033d1 	.word	0x080033d1
 800333c:	080033d1 	.word	0x080033d1
 8003340:	080033d1 	.word	0x080033d1
 8003344:	080033b9 	.word	0x080033b9
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003348:	f7fe fa00 	bl	800174c <HAL_RCC_GetPCLK1Freq>
 800334c:	4602      	mov	r2, r0
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	085b      	lsrs	r3, r3, #1
 8003354:	441a      	add	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	fbb2 f3f3 	udiv	r3, r2, r3
 800335e:	b29b      	uxth	r3, r3
 8003360:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003362:	e038      	b.n	80033d6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003364:	f7fe fa08 	bl	8001778 <HAL_RCC_GetPCLK2Freq>
 8003368:	4602      	mov	r2, r0
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	085b      	lsrs	r3, r3, #1
 8003370:	441a      	add	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	fbb2 f3f3 	udiv	r3, r2, r3
 800337a:	b29b      	uxth	r3, r3
 800337c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800337e:	e02a      	b.n	80033d6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	085b      	lsrs	r3, r3, #1
 8003386:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800338a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6852      	ldr	r2, [r2, #4]
 8003392:	fbb3 f3f2 	udiv	r3, r3, r2
 8003396:	b29b      	uxth	r3, r3
 8003398:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800339a:	e01c      	b.n	80033d6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800339c:	f7fe f940 	bl	8001620 <HAL_RCC_GetSysClockFreq>
 80033a0:	4602      	mov	r2, r0
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	085b      	lsrs	r3, r3, #1
 80033a8:	441a      	add	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80033b6:	e00e      	b.n	80033d6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	085b      	lsrs	r3, r3, #1
 80033be:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80033ce:	e002      	b.n	80033d6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	74fb      	strb	r3, [r7, #19]
        break;
 80033d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b0f      	cmp	r3, #15
 80033da:	d908      	bls.n	80033ee <UART_SetConfig+0x66e>
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e2:	d204      	bcs.n	80033ee <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	60da      	str	r2, [r3, #12]
 80033ec:	e001      	b.n	80033f2 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80033fe:	7cfb      	ldrb	r3, [r7, #19]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3720      	adds	r7, #32
 8003404:	46bd      	mov	sp, r7
 8003406:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800340a:	bf00      	nop
 800340c:	f4240000 	.word	0xf4240000

08003410 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00a      	beq.n	800343a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00a      	beq.n	800345c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00a      	beq.n	800347e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00a      	beq.n	80034a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	f003 0310 	and.w	r3, r3, #16
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00a      	beq.n	80034c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	f003 0320 	and.w	r3, r3, #32
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00a      	beq.n	80034e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d01a      	beq.n	8003526 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800350e:	d10a      	bne.n	8003526 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	605a      	str	r2, [r3, #4]
  }
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af02      	add	r7, sp, #8
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003562:	f7fd f871 	bl	8000648 <HAL_GetTick>
 8003566:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b08      	cmp	r3, #8
 8003574:	d10e      	bne.n	8003594 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003576:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f82a 	bl	80035de <UART_WaitOnFlagUntilTimeout>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e020      	b.n	80035d6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d10e      	bne.n	80035c0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f814 	bl	80035de <UART_WaitOnFlagUntilTimeout>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e00a      	b.n	80035d6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2220      	movs	r2, #32
 80035c4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2220      	movs	r2, #32
 80035ca:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b084      	sub	sp, #16
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	603b      	str	r3, [r7, #0]
 80035ea:	4613      	mov	r3, r2
 80035ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ee:	e02a      	b.n	8003646 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f6:	d026      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f8:	f7fd f826 	bl	8000648 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	429a      	cmp	r2, r3
 8003606:	d302      	bcc.n	800360e <UART_WaitOnFlagUntilTimeout+0x30>
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d11b      	bne.n	8003646 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800361c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 0201 	bic.w	r2, r2, #1
 800362c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2220      	movs	r2, #32
 8003632:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2220      	movs	r2, #32
 8003638:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e00f      	b.n	8003666 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69da      	ldr	r2, [r3, #28]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	4013      	ands	r3, r2
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	429a      	cmp	r2, r3
 8003654:	bf0c      	ite	eq
 8003656:	2301      	moveq	r3, #1
 8003658:	2300      	movne	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	461a      	mov	r2, r3
 800365e:	79fb      	ldrb	r3, [r7, #7]
 8003660:	429a      	cmp	r2, r3
 8003662:	d0c5      	beq.n	80035f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <_ZN9Precharge5reactERK10TimerPulse>:

class Precharge : public tinyfsm::Fsm<Precharge> {
public:
	void react(tinyfsm::Event const &) {};

	virtual void react(TimerPulse const&) {};
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	6039      	str	r1, [r7, #0]
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <_ZN9Precharge5reactERK5Fault>:
	virtual void react(Fault const&) {};
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <_ZN9Precharge5reactERK14StartPrecharge>:
	virtual void react(StartPrecharge const&) {};
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	6039      	str	r1, [r7, #0]
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <_ZN9Precharge5reactERK9Discharge>:
	virtual void react(Discharge const&) {};
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <_ZN9Precharge4exitEv>:

	virtual void entry(void) {};
	void exit(void) {};
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
	...

080036dc <_ZN7OpenK425entryEv>:

// We need to forward declare idle since it's our loopback point
class Idle;

class OpenK42 : public Precharge {
	void entry() {
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(K4_GPIO_Port, K4_Pin, GPIO_PIN_RESET);
 80036e4:	2200      	movs	r2, #0
 80036e6:	2180      	movs	r1, #128	; 0x80
 80036e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036ec:	f7fd fa72 	bl	8000bd4 <HAL_GPIO_WritePin>
		print("Open K4\n");
 80036f0:	4806      	ldr	r0, [pc, #24]	; (800370c <_ZN7OpenK425entryEv+0x30>)
 80036f2:	f000 fcf9 	bl	80040e8 <print>
		print("Discharged!\n");
 80036f6:	4806      	ldr	r0, [pc, #24]	; (8003710 <_ZN7OpenK425entryEv+0x34>)
 80036f8:	f000 fcf6 	bl	80040e8 <print>
		startTimer(50);
 80036fc:	2032      	movs	r0, #50	; 0x32
 80036fe:	f000 fe33 	bl	8004368 <startTimer>
	}
 8003702:	bf00      	nop
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	0800540c 	.word	0x0800540c
 8003710:	08005418 	.word	0x08005418

08003714 <_ZN7OpenK425reactERK10TimerPulse>:

	void react(TimerPulse const&) override {
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 800371e:	4805      	ldr	r0, [pc, #20]	; (8003734 <_ZN7OpenK425reactERK10TimerPulse+0x20>)
 8003720:	f7fe fda6 	bl	8002270 <HAL_TIM_Base_Stop_IT>
		transit<Idle>();
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f9b9 	bl	8003a9c <_ZN7tinyfsm3FsmI9PrechargeE7transitI4IdleEEvv>
	}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	200000d4 	.word	0x200000d4

08003738 <_ZN8CloseK425entryEv>:
};

class CloseK42 : public Precharge {
	void entry() {
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(K4_GPIO_Port, K4_Pin, GPIO_PIN_SET);
 8003740:	2201      	movs	r2, #1
 8003742:	2180      	movs	r1, #128	; 0x80
 8003744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003748:	f7fd fa44 	bl	8000bd4 <HAL_GPIO_WritePin>
		print("Close K4 \n");
 800374c:	4805      	ldr	r0, [pc, #20]	; (8003764 <_ZN8CloseK425entryEv+0x2c>)
 800374e:	f000 fccb 	bl	80040e8 <print>
		startTimer(15*1000);
 8003752:	f643 2098 	movw	r0, #15000	; 0x3a98
 8003756:	f000 fe07 	bl	8004368 <startTimer>
	}
 800375a:	bf00      	nop
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	08005428 	.word	0x08005428

08003768 <_ZN8CloseK425reactERK10TimerPulse>:

	void react(TimerPulse const&) override {
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 8003772:	4805      	ldr	r0, [pc, #20]	; (8003788 <_ZN8CloseK425reactERK10TimerPulse+0x20>)
 8003774:	f7fe fd7c 	bl	8002270 <HAL_TIM_Base_Stop_IT>
		transit<OpenK42>();
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f9ad 	bl	8003ad8 <_ZN7tinyfsm3FsmI9PrechargeE7transitI7OpenK42EEvv>
	}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	200000d4 	.word	0x200000d4

0800378c <_ZN8OpenAll25entryEv>:
};

class OpenAll2 : public Precharge {
	void entry() {
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
			HAL_GPIO_WritePin(K1_GPIO_Port, K1_Pin, GPIO_PIN_RESET);
 8003794:	2200      	movs	r2, #0
 8003796:	f44f 7100 	mov.w	r1, #512	; 0x200
 800379a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800379e:	f7fd fa19 	bl	8000bd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(K2_GPIO_Port, K2_Pin, GPIO_PIN_RESET);
 80037a2:	2200      	movs	r2, #0
 80037a4:	2180      	movs	r1, #128	; 0x80
 80037a6:	480c      	ldr	r0, [pc, #48]	; (80037d8 <_ZN8OpenAll25entryEv+0x4c>)
 80037a8:	f7fd fa14 	bl	8000bd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(K3_GPIO_Port, K3_Pin, GPIO_PIN_RESET);
 80037ac:	2200      	movs	r2, #0
 80037ae:	2140      	movs	r1, #64	; 0x40
 80037b0:	480a      	ldr	r0, [pc, #40]	; (80037dc <_ZN8OpenAll25entryEv+0x50>)
 80037b2:	f7fd fa0f 	bl	8000bd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(K4_GPIO_Port, K4_Pin, GPIO_PIN_RESET);
 80037b6:	2200      	movs	r2, #0
 80037b8:	2180      	movs	r1, #128	; 0x80
 80037ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037be:	f7fd fa09 	bl	8000bd4 <HAL_GPIO_WritePin>
			print("Discharging!\n");
 80037c2:	4807      	ldr	r0, [pc, #28]	; (80037e0 <_ZN8OpenAll25entryEv+0x54>)
 80037c4:	f000 fc90 	bl	80040e8 <print>
			startTimer(50);
 80037c8:	2032      	movs	r0, #50	; 0x32
 80037ca:	f000 fdcd 	bl	8004368 <startTimer>
		}
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	48000800 	.word	0x48000800
 80037dc:	48000400 	.word	0x48000400
 80037e0:	08005434 	.word	0x08005434

080037e4 <_ZN8OpenAll25reactERK10TimerPulse>:

		void react(TimerPulse const&) override {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
			HAL_TIM_Base_Stop_IT(&htim2);
 80037ee:	4805      	ldr	r0, [pc, #20]	; (8003804 <_ZN8OpenAll25reactERK10TimerPulse+0x20>)
 80037f0:	f7fe fd3e 	bl	8002270 <HAL_TIM_Base_Stop_IT>
			transit<CloseK42>();
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f98d 	bl	8003b14 <_ZN7tinyfsm3FsmI9PrechargeE7transitI8CloseK42EEvv>
		}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	200000d4 	.word	0x200000d4

08003808 <_ZN6OpenK25entryEv>:
};

class OpenK2 : public Precharge {
	void entry() {
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(K2_GPIO_Port, K2_Pin, GPIO_PIN_RESET);
 8003810:	2200      	movs	r2, #0
 8003812:	2180      	movs	r1, #128	; 0x80
 8003814:	4806      	ldr	r0, [pc, #24]	; (8003830 <_ZN6OpenK25entryEv+0x28>)
 8003816:	f7fd f9dd 	bl	8000bd4 <HAL_GPIO_WritePin>
		print("Open K2\n");
 800381a:	4806      	ldr	r0, [pc, #24]	; (8003834 <_ZN6OpenK25entryEv+0x2c>)
 800381c:	f000 fc64 	bl	80040e8 <print>
		print("Precharged!\n");
 8003820:	4805      	ldr	r0, [pc, #20]	; (8003838 <_ZN6OpenK25entryEv+0x30>)
 8003822:	f000 fc61 	bl	80040e8 <print>
	}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	48000800 	.word	0x48000800
 8003834:	08005444 	.word	0x08005444
 8003838:	08005450 	.word	0x08005450

0800383c <_ZN6OpenK25reactERK9Discharge>:

	void react(Discharge const&) {
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
		transit<OpenAll2>();
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f982 	bl	8003b50 <_ZN7tinyfsm3FsmI9PrechargeE7transitI8OpenAll2EEvv>
	}
 800384c:	bf00      	nop
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <_ZN7CloseK15entryEv>:
};

class CloseK1 : public Precharge {
	void entry() {
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(K1_GPIO_Port, K1_Pin, GPIO_PIN_SET);
 800385c:	2201      	movs	r2, #1
 800385e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003866:	f7fd f9b5 	bl	8000bd4 <HAL_GPIO_WritePin>
		print("Close K1\n");
 800386a:	4805      	ldr	r0, [pc, #20]	; (8003880 <_ZN7CloseK15entryEv+0x2c>)
 800386c:	f000 fc3c 	bl	80040e8 <print>
		startTimer(50);
 8003870:	2032      	movs	r0, #50	; 0x32
 8003872:	f000 fd79 	bl	8004368 <startTimer>
	}
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	08005460 	.word	0x08005460

08003884 <_ZN7CloseK15reactERK10TimerPulse>:

	void react(TimerPulse const&) override {
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 800388e:	4805      	ldr	r0, [pc, #20]	; (80038a4 <_ZN7CloseK15reactERK10TimerPulse+0x20>)
 8003890:	f7fe fcee 	bl	8002270 <HAL_TIM_Base_Stop_IT>
		transit<OpenK2>();
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f979 	bl	8003b8c <_ZN7tinyfsm3FsmI9PrechargeE7transitI6OpenK2EEvv>
	}
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	200000d4 	.word	0x200000d4

080038a8 <_ZN9CloseK3K25entryEv>:
};

class CloseK3K2 : public Precharge {
	void entry() {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(K3_GPIO_Port, K3_Pin, GPIO_PIN_SET);
 80038b0:	2201      	movs	r2, #1
 80038b2:	2140      	movs	r1, #64	; 0x40
 80038b4:	4809      	ldr	r0, [pc, #36]	; (80038dc <_ZN9CloseK3K25entryEv+0x34>)
 80038b6:	f7fd f98d 	bl	8000bd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(K2_GPIO_Port, K2_Pin, GPIO_PIN_SET);
 80038ba:	2201      	movs	r2, #1
 80038bc:	2180      	movs	r1, #128	; 0x80
 80038be:	4808      	ldr	r0, [pc, #32]	; (80038e0 <_ZN9CloseK3K25entryEv+0x38>)
 80038c0:	f7fd f988 	bl	8000bd4 <HAL_GPIO_WritePin>
		print("Close K3, K2\n");
 80038c4:	4807      	ldr	r0, [pc, #28]	; (80038e4 <_ZN9CloseK3K25entryEv+0x3c>)
 80038c6:	f000 fc0f 	bl	80040e8 <print>
		startTimer(1000);
 80038ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038ce:	f000 fd4b 	bl	8004368 <startTimer>
	}
 80038d2:	bf00      	nop
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	48000400 	.word	0x48000400
 80038e0:	48000800 	.word	0x48000800
 80038e4:	0800546c 	.word	0x0800546c

080038e8 <_ZN9CloseK3K25reactERK10TimerPulse>:

	void react(TimerPulse const&) override {
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 80038f2:	4805      	ldr	r0, [pc, #20]	; (8003908 <_ZN9CloseK3K25reactERK10TimerPulse+0x20>)
 80038f4:	f7fe fcbc 	bl	8002270 <HAL_TIM_Base_Stop_IT>
		transit<CloseK1>();
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f965 	bl	8003bc8 <_ZN7tinyfsm3FsmI9PrechargeE7transitI7CloseK1EEvv>
	}
 80038fe:	bf00      	nop
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	200000d4 	.word	0x200000d4

0800390c <_ZN6OpenK45entryEv>:
};

class OpenK4 : public Precharge {
	void entry() {
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(K4_GPIO_Port, K4_Pin, GPIO_PIN_RESET);
 8003914:	2200      	movs	r2, #0
 8003916:	2180      	movs	r1, #128	; 0x80
 8003918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800391c:	f7fd f95a 	bl	8000bd4 <HAL_GPIO_WritePin>
		print("Open K4\n");
 8003920:	4804      	ldr	r0, [pc, #16]	; (8003934 <_ZN6OpenK45entryEv+0x28>)
 8003922:	f000 fbe1 	bl	80040e8 <print>
		startTimer(50);
 8003926:	2032      	movs	r0, #50	; 0x32
 8003928:	f000 fd1e 	bl	8004368 <startTimer>
	}
 800392c:	bf00      	nop
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	0800540c 	.word	0x0800540c

08003938 <_ZN6OpenK45reactERK10TimerPulse>:

	void react(TimerPulse const&) override {
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 8003942:	4805      	ldr	r0, [pc, #20]	; (8003958 <_ZN6OpenK45reactERK10TimerPulse+0x20>)
 8003944:	f7fe fc94 	bl	8002270 <HAL_TIM_Base_Stop_IT>
		transit<CloseK3K2>();
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f95b 	bl	8003c04 <_ZN7tinyfsm3FsmI9PrechargeE7transitI9CloseK3K2EEvv>
	}
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	200000d4 	.word	0x200000d4

0800395c <_ZN7CloseK45entryEv>:
};

class CloseK4 : public Precharge {
	void entry() {
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(K4_GPIO_Port, K4_Pin, GPIO_PIN_SET);
 8003964:	2201      	movs	r2, #1
 8003966:	2180      	movs	r1, #128	; 0x80
 8003968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800396c:	f7fd f932 	bl	8000bd4 <HAL_GPIO_WritePin>
		print("Close K4 \n");
 8003970:	4805      	ldr	r0, [pc, #20]	; (8003988 <_ZN7CloseK45entryEv+0x2c>)
 8003972:	f000 fbb9 	bl	80040e8 <print>
		startTimer(15*1000);
 8003976:	f643 2098 	movw	r0, #15000	; 0x3a98
 800397a:	f000 fcf5 	bl	8004368 <startTimer>
	}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	08005428 	.word	0x08005428

0800398c <_ZN7CloseK45reactERK10TimerPulse>:

	void react(TimerPulse const&) override {
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 8003996:	4805      	ldr	r0, [pc, #20]	; (80039ac <_ZN7CloseK45reactERK10TimerPulse+0x20>)
 8003998:	f7fe fc6a 	bl	8002270 <HAL_TIM_Base_Stop_IT>
		transit<OpenK4>();
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f94f 	bl	8003c40 <_ZN7tinyfsm3FsmI9PrechargeE7transitI6OpenK4EEvv>
	}
 80039a2:	bf00      	nop
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	200000d4 	.word	0x200000d4

080039b0 <_ZN7OpenAll5entryEv>:
};

class OpenAll : public Precharge {
	void entry() {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
		print("Start Precharging!\n");
 80039b8:	4811      	ldr	r0, [pc, #68]	; (8003a00 <_ZN7OpenAll5entryEv+0x50>)
 80039ba:	f000 fb95 	bl	80040e8 <print>
		HAL_GPIO_WritePin(K1_GPIO_Port, K1_Pin, GPIO_PIN_RESET);
 80039be:	2200      	movs	r2, #0
 80039c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039c8:	f7fd f904 	bl	8000bd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(K2_GPIO_Port, K2_Pin, GPIO_PIN_RESET);
 80039cc:	2200      	movs	r2, #0
 80039ce:	2180      	movs	r1, #128	; 0x80
 80039d0:	480c      	ldr	r0, [pc, #48]	; (8003a04 <_ZN7OpenAll5entryEv+0x54>)
 80039d2:	f7fd f8ff 	bl	8000bd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(K3_GPIO_Port, K3_Pin, GPIO_PIN_RESET);
 80039d6:	2200      	movs	r2, #0
 80039d8:	2140      	movs	r1, #64	; 0x40
 80039da:	480b      	ldr	r0, [pc, #44]	; (8003a08 <_ZN7OpenAll5entryEv+0x58>)
 80039dc:	f7fd f8fa 	bl	8000bd4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(K4_GPIO_Port, K4_Pin, GPIO_PIN_RESET);
 80039e0:	2200      	movs	r2, #0
 80039e2:	2180      	movs	r1, #128	; 0x80
 80039e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039e8:	f7fd f8f4 	bl	8000bd4 <HAL_GPIO_WritePin>
		print("Open K1, K2, K3, K4\n");
 80039ec:	4807      	ldr	r0, [pc, #28]	; (8003a0c <_ZN7OpenAll5entryEv+0x5c>)
 80039ee:	f000 fb7b 	bl	80040e8 <print>
		startTimer(50);
 80039f2:	2032      	movs	r0, #50	; 0x32
 80039f4:	f000 fcb8 	bl	8004368 <startTimer>
	}
 80039f8:	bf00      	nop
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	0800547c 	.word	0x0800547c
 8003a04:	48000800 	.word	0x48000800
 8003a08:	48000400 	.word	0x48000400
 8003a0c:	08005490 	.word	0x08005490

08003a10 <_ZN7OpenAll5reactERK10TimerPulse>:

	void react(TimerPulse const&) override {
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 8003a1a:	4805      	ldr	r0, [pc, #20]	; (8003a30 <_ZN7OpenAll5reactERK10TimerPulse+0x20>)
 8003a1c:	f7fe fc28 	bl	8002270 <HAL_TIM_Base_Stop_IT>
		transit<CloseK4>();
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f92b 	bl	8003c7c <_ZN7tinyfsm3FsmI9PrechargeE7transitI7CloseK4EEvv>
	}
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	200000d4 	.word	0x200000d4

08003a34 <_ZN4Idle5entryEv>:
};

class Idle : public Precharge {
	void entry() override {
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
		print("Idle\n");
 8003a3c:	4803      	ldr	r0, [pc, #12]	; (8003a4c <_ZN4Idle5entryEv+0x18>)
 8003a3e:	f000 fb53 	bl	80040e8 <print>
	}
 8003a42:	bf00      	nop
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	080054a8 	.word	0x080054a8

08003a50 <_ZN4Idle5reactERK14StartPrecharge>:
	void react(StartPrecharge const&) override {
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
		transit<OpenAll>();
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f92c 	bl	8003cb8 <_ZN7tinyfsm3FsmI9PrechargeE7transitI7OpenAllEEvv>
	}
 8003a60:	bf00      	nop
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <_ZN4Idle5reactERK9Discharge>:
	void react(Discharge const&) {
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
			transit<OpenAll2>();
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f86c 	bl	8003b50 <_ZN7tinyfsm3FsmI9PrechargeE7transitI8OpenAll2EEvv>
	}
 8003a78:	bf00      	nop
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <_ZN7tinyfsm3FsmI9PrechargeE17set_initial_stateEv>:
};

FSM_INITIAL_STATE(Precharge, Idle);
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	4b03      	ldr	r3, [pc, #12]	; (8003a94 <_ZN7tinyfsm3FsmI9PrechargeE17set_initial_stateEv+0x14>)
 8003a86:	4a04      	ldr	r2, [pc, #16]	; (8003a98 <_ZN7tinyfsm3FsmI9PrechargeE17set_initial_stateEv+0x18>)
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	bf00      	nop
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	200000b4 	.word	0x200000b4
 8003a98:	20000008 	.word	0x20000008

08003a9c <_ZN7tinyfsm3FsmI9PrechargeE7transitI4IdleEEvv>:

  /// state transition functions
  protected:

    template<typename S>
    void transit(void) {
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
      static_assert(is_same_fsm<F, S>::value, "transit to different state machine");
      current_state_ptr->exit();
 8003aa4:	4b0a      	ldr	r3, [pc, #40]	; (8003ad0 <_ZN7tinyfsm3FsmI9PrechargeE7transitI4IdleEEvv+0x34>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff fe0c 	bl	80036c6 <_ZN9Precharge4exitEv>
      current_state_ptr = &_state_instance<S>::value;
 8003aae:	4b08      	ldr	r3, [pc, #32]	; (8003ad0 <_ZN7tinyfsm3FsmI9PrechargeE7transitI4IdleEEvv+0x34>)
 8003ab0:	4a08      	ldr	r2, [pc, #32]	; (8003ad4 <_ZN7tinyfsm3FsmI9PrechargeE7transitI4IdleEEvv+0x38>)
 8003ab2:	601a      	str	r2, [r3, #0]
      current_state_ptr->entry();
 8003ab4:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <_ZN7tinyfsm3FsmI9PrechargeE7transitI4IdleEEvv+0x34>)
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <_ZN7tinyfsm3FsmI9PrechargeE7transitI4IdleEEvv+0x34>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3310      	adds	r3, #16
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	4798      	blx	r3
    }
 8003ac6:	bf00      	nop
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	200000b4 	.word	0x200000b4
 8003ad4:	20000008 	.word	0x20000008

08003ad8 <_ZN7tinyfsm3FsmI9PrechargeE7transitI7OpenK42EEvv>:
    void transit(void) {
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
      current_state_ptr->exit();
 8003ae0:	4b0a      	ldr	r3, [pc, #40]	; (8003b0c <_ZN7tinyfsm3FsmI9PrechargeE7transitI7OpenK42EEvv+0x34>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff fdee 	bl	80036c6 <_ZN9Precharge4exitEv>
      current_state_ptr = &_state_instance<S>::value;
 8003aea:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <_ZN7tinyfsm3FsmI9PrechargeE7transitI7OpenK42EEvv+0x34>)
 8003aec:	4a08      	ldr	r2, [pc, #32]	; (8003b10 <_ZN7tinyfsm3FsmI9PrechargeE7transitI7OpenK42EEvv+0x38>)
 8003aee:	601a      	str	r2, [r3, #0]
      current_state_ptr->entry();
 8003af0:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <_ZN7tinyfsm3FsmI9PrechargeE7transitI7OpenK42EEvv+0x34>)
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <_ZN7tinyfsm3FsmI9PrechargeE7transitI7OpenK42EEvv+0x34>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	3310      	adds	r3, #16
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4610      	mov	r0, r2
 8003b00:	4798      	blx	r3
    }
 8003b02:	bf00      	nop
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	200000b4 	.word	0x200000b4
 8003b10:	2000000c 	.word	0x2000000c

08003b14 <_ZN7tinyfsm3FsmI9PrechargeE7transitI8CloseK42EEvv>:
    void transit(void) {
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
      current_state_ptr->exit();
 8003b1c:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <_ZN7tinyfsm3FsmI9PrechargeE7transitI8CloseK42EEvv+0x34>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff fdd0 	bl	80036c6 <_ZN9Precharge4exitEv>
      current_state_ptr = &_state_instance<S>::value;
 8003b26:	4b08      	ldr	r3, [pc, #32]	; (8003b48 <_ZN7tinyfsm3FsmI9PrechargeE7transitI8CloseK42EEvv+0x34>)
 8003b28:	4a08      	ldr	r2, [pc, #32]	; (8003b4c <_ZN7tinyfsm3FsmI9PrechargeE7transitI8CloseK42EEvv+0x38>)
 8003b2a:	601a      	str	r2, [r3, #0]
      current_state_ptr->entry();
 8003b2c:	4b06      	ldr	r3, [pc, #24]	; (8003b48 <_ZN7tinyfsm3FsmI9PrechargeE7transitI8CloseK42EEvv+0x34>)
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <_ZN7tinyfsm3FsmI9PrechargeE7transitI8CloseK42EEvv+0x34>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	3310      	adds	r3, #16
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	4798      	blx	r3
    }
 8003b3e:	bf00      	nop
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	200000b4 	.word	0x200000b4
 8003b4c:	20000010 	.word	0x20000010

08003b50 <_ZN7tinyfsm3FsmI9PrechargeE7transitI8OpenAll2EEvv>:
    void transit(void) {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
      current_state_ptr->exit();
 8003b58:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <_ZN7tinyfsm3FsmI9PrechargeE7transitI8OpenAll2EEvv+0x34>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff fdb2 	bl	80036c6 <_ZN9Precharge4exitEv>
      current_state_ptr = &_state_instance<S>::value;
 8003b62:	4b08      	ldr	r3, [pc, #32]	; (8003b84 <_ZN7tinyfsm3FsmI9PrechargeE7transitI8OpenAll2EEvv+0x34>)
 8003b64:	4a08      	ldr	r2, [pc, #32]	; (8003b88 <_ZN7tinyfsm3FsmI9PrechargeE7transitI8OpenAll2EEvv+0x38>)
 8003b66:	601a      	str	r2, [r3, #0]
      current_state_ptr->entry();
 8003b68:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <_ZN7tinyfsm3FsmI9PrechargeE7transitI8OpenAll2EEvv+0x34>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <_ZN7tinyfsm3FsmI9PrechargeE7transitI8OpenAll2EEvv+0x34>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	3310      	adds	r3, #16
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4610      	mov	r0, r2
 8003b78:	4798      	blx	r3
    }
 8003b7a:	bf00      	nop
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	200000b4 	.word	0x200000b4
 8003b88:	20000014 	.word	0x20000014

08003b8c <_ZN7tinyfsm3FsmI9PrechargeE7transitI6OpenK2EEvv>:
    void transit(void) {
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
      current_state_ptr->exit();
 8003b94:	4b0a      	ldr	r3, [pc, #40]	; (8003bc0 <_ZN7tinyfsm3FsmI9PrechargeE7transitI6OpenK2EEvv+0x34>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff fd94 	bl	80036c6 <_ZN9Precharge4exitEv>
      current_state_ptr = &_state_instance<S>::value;
 8003b9e:	4b08      	ldr	r3, [pc, #32]	; (8003bc0 <_ZN7tinyfsm3FsmI9PrechargeE7transitI6OpenK2EEvv+0x34>)
 8003ba0:	4a08      	ldr	r2, [pc, #32]	; (8003bc4 <_ZN7tinyfsm3FsmI9PrechargeE7transitI6OpenK2EEvv+0x38>)
 8003ba2:	601a      	str	r2, [r3, #0]
      current_state_ptr->entry();
 8003ba4:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <_ZN7tinyfsm3FsmI9PrechargeE7transitI6OpenK2EEvv+0x34>)
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <_ZN7tinyfsm3FsmI9PrechargeE7transitI6OpenK2EEvv+0x34>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	3310      	adds	r3, #16
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4610      	mov	r0, r2
 8003bb4:	4798      	blx	r3
    }
 8003bb6:	bf00      	nop
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	200000b4 	.word	0x200000b4
 8003bc4:	20000018 	.word	0x20000018

08003bc8 <_ZN7tinyfsm3FsmI9PrechargeE7transitI7CloseK1EEvv>:
    void transit(void) {
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
      current_state_ptr->exit();
 8003bd0:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <_ZN7tinyfsm3FsmI9PrechargeE7transitI7CloseK1EEvv+0x34>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff fd76 	bl	80036c6 <_ZN9Precharge4exitEv>
      current_state_ptr = &_state_instance<S>::value;
 8003bda:	4b08      	ldr	r3, [pc, #32]	; (8003bfc <_ZN7tinyfsm3FsmI9PrechargeE7transitI7CloseK1EEvv+0x34>)
 8003bdc:	4a08      	ldr	r2, [pc, #32]	; (8003c00 <_ZN7tinyfsm3FsmI9PrechargeE7transitI7CloseK1EEvv+0x38>)
 8003bde:	601a      	str	r2, [r3, #0]
      current_state_ptr->entry();
 8003be0:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <_ZN7tinyfsm3FsmI9PrechargeE7transitI7CloseK1EEvv+0x34>)
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <_ZN7tinyfsm3FsmI9PrechargeE7transitI7CloseK1EEvv+0x34>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	3310      	adds	r3, #16
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4610      	mov	r0, r2
 8003bf0:	4798      	blx	r3
    }
 8003bf2:	bf00      	nop
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	200000b4 	.word	0x200000b4
 8003c00:	2000001c 	.word	0x2000001c

08003c04 <_ZN7tinyfsm3FsmI9PrechargeE7transitI9CloseK3K2EEvv>:
    void transit(void) {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
      current_state_ptr->exit();
 8003c0c:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <_ZN7tinyfsm3FsmI9PrechargeE7transitI9CloseK3K2EEvv+0x34>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff fd58 	bl	80036c6 <_ZN9Precharge4exitEv>
      current_state_ptr = &_state_instance<S>::value;
 8003c16:	4b08      	ldr	r3, [pc, #32]	; (8003c38 <_ZN7tinyfsm3FsmI9PrechargeE7transitI9CloseK3K2EEvv+0x34>)
 8003c18:	4a08      	ldr	r2, [pc, #32]	; (8003c3c <_ZN7tinyfsm3FsmI9PrechargeE7transitI9CloseK3K2EEvv+0x38>)
 8003c1a:	601a      	str	r2, [r3, #0]
      current_state_ptr->entry();
 8003c1c:	4b06      	ldr	r3, [pc, #24]	; (8003c38 <_ZN7tinyfsm3FsmI9PrechargeE7transitI9CloseK3K2EEvv+0x34>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	4b05      	ldr	r3, [pc, #20]	; (8003c38 <_ZN7tinyfsm3FsmI9PrechargeE7transitI9CloseK3K2EEvv+0x34>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	3310      	adds	r3, #16
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	4798      	blx	r3
    }
 8003c2e:	bf00      	nop
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	200000b4 	.word	0x200000b4
 8003c3c:	20000020 	.word	0x20000020

08003c40 <_ZN7tinyfsm3FsmI9PrechargeE7transitI6OpenK4EEvv>:
    void transit(void) {
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
      current_state_ptr->exit();
 8003c48:	4b0a      	ldr	r3, [pc, #40]	; (8003c74 <_ZN7tinyfsm3FsmI9PrechargeE7transitI6OpenK4EEvv+0x34>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7ff fd3a 	bl	80036c6 <_ZN9Precharge4exitEv>
      current_state_ptr = &_state_instance<S>::value;
 8003c52:	4b08      	ldr	r3, [pc, #32]	; (8003c74 <_ZN7tinyfsm3FsmI9PrechargeE7transitI6OpenK4EEvv+0x34>)
 8003c54:	4a08      	ldr	r2, [pc, #32]	; (8003c78 <_ZN7tinyfsm3FsmI9PrechargeE7transitI6OpenK4EEvv+0x38>)
 8003c56:	601a      	str	r2, [r3, #0]
      current_state_ptr->entry();
 8003c58:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <_ZN7tinyfsm3FsmI9PrechargeE7transitI6OpenK4EEvv+0x34>)
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <_ZN7tinyfsm3FsmI9PrechargeE7transitI6OpenK4EEvv+0x34>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3310      	adds	r3, #16
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4610      	mov	r0, r2
 8003c68:	4798      	blx	r3
    }
 8003c6a:	bf00      	nop
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	200000b4 	.word	0x200000b4
 8003c78:	20000024 	.word	0x20000024

08003c7c <_ZN7tinyfsm3FsmI9PrechargeE7transitI7CloseK4EEvv>:
    void transit(void) {
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
      current_state_ptr->exit();
 8003c84:	4b0a      	ldr	r3, [pc, #40]	; (8003cb0 <_ZN7tinyfsm3FsmI9PrechargeE7transitI7CloseK4EEvv+0x34>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff fd1c 	bl	80036c6 <_ZN9Precharge4exitEv>
      current_state_ptr = &_state_instance<S>::value;
 8003c8e:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <_ZN7tinyfsm3FsmI9PrechargeE7transitI7CloseK4EEvv+0x34>)
 8003c90:	4a08      	ldr	r2, [pc, #32]	; (8003cb4 <_ZN7tinyfsm3FsmI9PrechargeE7transitI7CloseK4EEvv+0x38>)
 8003c92:	601a      	str	r2, [r3, #0]
      current_state_ptr->entry();
 8003c94:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <_ZN7tinyfsm3FsmI9PrechargeE7transitI7CloseK4EEvv+0x34>)
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <_ZN7tinyfsm3FsmI9PrechargeE7transitI7CloseK4EEvv+0x34>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3310      	adds	r3, #16
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4610      	mov	r0, r2
 8003ca4:	4798      	blx	r3
    }
 8003ca6:	bf00      	nop
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	200000b4 	.word	0x200000b4
 8003cb4:	20000028 	.word	0x20000028

08003cb8 <_ZN7tinyfsm3FsmI9PrechargeE7transitI7OpenAllEEvv>:
    void transit(void) {
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
      current_state_ptr->exit();
 8003cc0:	4b0a      	ldr	r3, [pc, #40]	; (8003cec <_ZN7tinyfsm3FsmI9PrechargeE7transitI7OpenAllEEvv+0x34>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff fcfe 	bl	80036c6 <_ZN9Precharge4exitEv>
      current_state_ptr = &_state_instance<S>::value;
 8003cca:	4b08      	ldr	r3, [pc, #32]	; (8003cec <_ZN7tinyfsm3FsmI9PrechargeE7transitI7OpenAllEEvv+0x34>)
 8003ccc:	4a08      	ldr	r2, [pc, #32]	; (8003cf0 <_ZN7tinyfsm3FsmI9PrechargeE7transitI7OpenAllEEvv+0x38>)
 8003cce:	601a      	str	r2, [r3, #0]
      current_state_ptr->entry();
 8003cd0:	4b06      	ldr	r3, [pc, #24]	; (8003cec <_ZN7tinyfsm3FsmI9PrechargeE7transitI7OpenAllEEvv+0x34>)
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	4b05      	ldr	r3, [pc, #20]	; (8003cec <_ZN7tinyfsm3FsmI9PrechargeE7transitI7OpenAllEEvv+0x34>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	3310      	adds	r3, #16
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4610      	mov	r0, r2
 8003ce0:	4798      	blx	r3
    }
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	200000b4 	.word	0x200000b4
 8003cf0:	2000002c 	.word	0x2000002c

08003cf4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08a      	sub	sp, #40	; 0x28
 8003cf8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cfa:	f107 0314 	add.w	r3, r7, #20
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	605a      	str	r2, [r3, #4]
 8003d04:	609a      	str	r2, [r3, #8]
 8003d06:	60da      	str	r2, [r3, #12]
 8003d08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d0a:	4b43      	ldr	r3, [pc, #268]	; (8003e18 <MX_GPIO_Init+0x124>)
 8003d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0e:	4a42      	ldr	r2, [pc, #264]	; (8003e18 <MX_GPIO_Init+0x124>)
 8003d10:	f043 0304 	orr.w	r3, r3, #4
 8003d14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d16:	4b40      	ldr	r3, [pc, #256]	; (8003e18 <MX_GPIO_Init+0x124>)
 8003d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d22:	4b3d      	ldr	r3, [pc, #244]	; (8003e18 <MX_GPIO_Init+0x124>)
 8003d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d26:	4a3c      	ldr	r2, [pc, #240]	; (8003e18 <MX_GPIO_Init+0x124>)
 8003d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d2e:	4b3a      	ldr	r3, [pc, #232]	; (8003e18 <MX_GPIO_Init+0x124>)
 8003d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d3a:	4b37      	ldr	r3, [pc, #220]	; (8003e18 <MX_GPIO_Init+0x124>)
 8003d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d3e:	4a36      	ldr	r2, [pc, #216]	; (8003e18 <MX_GPIO_Init+0x124>)
 8003d40:	f043 0301 	orr.w	r3, r3, #1
 8003d44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d46:	4b34      	ldr	r3, [pc, #208]	; (8003e18 <MX_GPIO_Init+0x124>)
 8003d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	60bb      	str	r3, [r7, #8]
 8003d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d52:	4b31      	ldr	r3, [pc, #196]	; (8003e18 <MX_GPIO_Init+0x124>)
 8003d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d56:	4a30      	ldr	r2, [pc, #192]	; (8003e18 <MX_GPIO_Init+0x124>)
 8003d58:	f043 0302 	orr.w	r3, r3, #2
 8003d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d5e:	4b2e      	ldr	r3, [pc, #184]	; (8003e18 <MX_GPIO_Init+0x124>)
 8003d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	607b      	str	r3, [r7, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|K4_Pin|K1_Pin, GPIO_PIN_RESET);
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 8003d70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d74:	f7fc ff2e 	bl	8000bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(K2_GPIO_Port, K2_Pin, GPIO_PIN_RESET);
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2180      	movs	r1, #128	; 0x80
 8003d7c:	4827      	ldr	r0, [pc, #156]	; (8003e1c <MX_GPIO_Init+0x128>)
 8003d7e:	f7fc ff29 	bl	8000bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(K3_GPIO_Port, K3_Pin, GPIO_PIN_RESET);
 8003d82:	2200      	movs	r2, #0
 8003d84:	2140      	movs	r1, #64	; 0x40
 8003d86:	4826      	ldr	r0, [pc, #152]	; (8003e20 <MX_GPIO_Init+0x12c>)
 8003d88:	f7fc ff24 	bl	8000bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003d8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003d92:	4b24      	ldr	r3, [pc, #144]	; (8003e24 <MX_GPIO_Init+0x130>)
 8003d94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d96:	2300      	movs	r3, #0
 8003d98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003d9a:	f107 0314 	add.w	r3, r7, #20
 8003d9e:	4619      	mov	r1, r3
 8003da0:	481e      	ldr	r0, [pc, #120]	; (8003e1c <MX_GPIO_Init+0x128>)
 8003da2:	f7fc fd6f 	bl	8000884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|K4_Pin|K1_Pin;
 8003da6:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8003daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dac:	2301      	movs	r3, #1
 8003dae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db0:	2300      	movs	r3, #0
 8003db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003db4:	2300      	movs	r3, #0
 8003db6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003db8:	f107 0314 	add.w	r3, r7, #20
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dc2:	f7fc fd5f 	bl	8000884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = K2_Pin;
 8003dc6:	2380      	movs	r3, #128	; 0x80
 8003dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K2_GPIO_Port, &GPIO_InitStruct);
 8003dd6:	f107 0314 	add.w	r3, r7, #20
 8003dda:	4619      	mov	r1, r3
 8003ddc:	480f      	ldr	r0, [pc, #60]	; (8003e1c <MX_GPIO_Init+0x128>)
 8003dde:	f7fc fd51 	bl	8000884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = K3_Pin;
 8003de2:	2340      	movs	r3, #64	; 0x40
 8003de4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003de6:	2301      	movs	r3, #1
 8003de8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dea:	2300      	movs	r3, #0
 8003dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dee:	2300      	movs	r3, #0
 8003df0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(K3_GPIO_Port, &GPIO_InitStruct);
 8003df2:	f107 0314 	add.w	r3, r7, #20
 8003df6:	4619      	mov	r1, r3
 8003df8:	4809      	ldr	r0, [pc, #36]	; (8003e20 <MX_GPIO_Init+0x12c>)
 8003dfa:	f7fc fd43 	bl	8000884 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2100      	movs	r1, #0
 8003e02:	2028      	movs	r0, #40	; 0x28
 8003e04:	f7fc fd07 	bl	8000816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e08:	2028      	movs	r0, #40	; 0x28
 8003e0a:	f7fc fd20 	bl	800084e <HAL_NVIC_EnableIRQ>

}
 8003e0e:	bf00      	nop
 8003e10:	3728      	adds	r7, #40	; 0x28
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	48000800 	.word	0x48000800
 8003e20:	48000400 	.word	0x48000400
 8003e24:	10210000 	.word	0x10210000

08003e28 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
using fsm_handle = Precharge;
int startBit = 0;
int timeBit = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 8003e32:	88fb      	ldrh	r3, [r7, #6]
 8003e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e38:	d102      	bne.n	8003e40 <HAL_GPIO_EXTI_Callback+0x18>
		startBit = 1;
 8003e3a:	4b04      	ldr	r3, [pc, #16]	; (8003e4c <HAL_GPIO_EXTI_Callback+0x24>)
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
	}
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	200000bc 	.word	0x200000bc

08003e50 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
	timeBit = 1;
 8003e58:	4b04      	ldr	r3, [pc, #16]	; (8003e6c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	200000c0 	.word	0x200000c0

08003e70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e76:	f7fc fb7b 	bl	8000570 <HAL_Init>

  /* USER CODE BEGIN Init */
	fsm_handle::start();
 8003e7a:	f000 f8cb 	bl	8004014 <_ZN7tinyfsm3FsmI9PrechargeE5startEv>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e7e:	f000 f839 	bl	8003ef4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e82:	f7ff ff37 	bl	8003cf4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003e86:	f000 fb03 	bl	8004490 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8003e8a:	f000 fa8f 	bl	80043ac <MX_TIM2_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  (void*)fsm_handle::current_state_ptr;
  	  HAL_UART_Receive(&huart2, buffer, 1, 50);
 8003e8e:	2332      	movs	r3, #50	; 0x32
 8003e90:	2201      	movs	r2, #1
 8003e92:	4914      	ldr	r1, [pc, #80]	; (8003ee4 <main+0x74>)
 8003e94:	4814      	ldr	r0, [pc, #80]	; (8003ee8 <main+0x78>)
 8003e96:	f7fe fea6 	bl	8002be6 <HAL_UART_Receive>
  	  if(buffer[0] == 'd') {
 8003e9a:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <main+0x74>)
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	2b64      	cmp	r3, #100	; 0x64
 8003ea0:	d106      	bne.n	8003eb0 <main+0x40>
  		  buffer[0] = 0;
 8003ea2:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <main+0x74>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	701a      	strb	r2, [r3, #0]
  		  fsm_handle::dispatch(Discharge());
 8003ea8:	1d3b      	adds	r3, r7, #4
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 f8ba 	bl	8004024 <_ZN7tinyfsm3FsmI9PrechargeE8dispatchI9DischargeEEvRKT_>
  	  }
    /* USER CODE BEGIN 3 */
	  if(startBit) {
 8003eb0:	4b0e      	ldr	r3, [pc, #56]	; (8003eec <main+0x7c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d007      	beq.n	8003ec8 <main+0x58>
		  fsm_handle::dispatch(StartPrecharge());
 8003eb8:	f107 0308 	add.w	r3, r7, #8
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 f8c5 	bl	800404c <_ZN7tinyfsm3FsmI9PrechargeE8dispatchI14StartPrechargeEEvRKT_>
		  startBit = 0;
 8003ec2:	4b0a      	ldr	r3, [pc, #40]	; (8003eec <main+0x7c>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]
	  }
	  if(timeBit) {
 8003ec8:	4b09      	ldr	r3, [pc, #36]	; (8003ef0 <main+0x80>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0de      	beq.n	8003e8e <main+0x1e>
			fsm_handle::dispatch(TimerPulse());
 8003ed0:	f107 030c 	add.w	r3, r7, #12
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 f8cd 	bl	8004074 <_ZN7tinyfsm3FsmI9PrechargeE8dispatchI10TimerPulseEEvRKT_>
			timeBit = 0;
 8003eda:	4b05      	ldr	r3, [pc, #20]	; (8003ef0 <main+0x80>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]
	  (void*)fsm_handle::current_state_ptr;
 8003ee0:	e7d5      	b.n	8003e8e <main+0x1e>
 8003ee2:	bf00      	nop
 8003ee4:	200000b8 	.word	0x200000b8
 8003ee8:	20000114 	.word	0x20000114
 8003eec:	200000bc 	.word	0x200000bc
 8003ef0:	200000c0 	.word	0x200000c0

08003ef4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b0b8      	sub	sp, #224	; 0xe0
 8003ef8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003efa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003efe:	2244      	movs	r2, #68	; 0x44
 8003f00:	2100      	movs	r1, #0
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 fb8a 	bl	800461c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f08:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	605a      	str	r2, [r3, #4]
 8003f12:	609a      	str	r2, [r3, #8]
 8003f14:	60da      	str	r2, [r3, #12]
 8003f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f18:	463b      	mov	r3, r7
 8003f1a:	2288      	movs	r2, #136	; 0x88
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fb7c 	bl	800461c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003f24:	2302      	movs	r3, #2
 8003f26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003f32:	2310      	movs	r3, #16
 8003f34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f38:	2302      	movs	r3, #2
 8003f3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003f3e:	2302      	movs	r3, #2
 8003f40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003f44:	2301      	movs	r3, #1
 8003f46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003f4a:	230a      	movs	r3, #10
 8003f4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003f50:	2307      	movs	r3, #7
 8003f52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003f56:	2302      	movs	r3, #2
 8003f58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f62:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fc fec8 	bl	8000cfc <HAL_RCC_OscConfig>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	bf14      	ite	ne
 8003f72:	2301      	movne	r3, #1
 8003f74:	2300      	moveq	r3, #0
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8003f7c:	f000 f843 	bl	8004006 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f80:	230f      	movs	r3, #15
 8003f82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f86:	2303      	movs	r3, #3
 8003f88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003f92:	2300      	movs	r3, #0
 8003f94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003f9e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003fa2:	2104      	movs	r1, #4
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fd fa59 	bl	800145c <HAL_RCC_ClockConfig>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	bf14      	ite	ne
 8003fb0:	2301      	movne	r3, #1
 8003fb2:	2300      	moveq	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 8003fba:	f000 f824 	bl	8004006 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fc6:	463b      	mov	r3, r7
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fd fc4b 	bl	8001864 <HAL_RCCEx_PeriphCLKConfig>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	bf14      	ite	ne
 8003fd4:	2301      	movne	r3, #1
 8003fd6:	2300      	moveq	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <_Z18SystemClock_Configv+0xee>
  {
    Error_Handler();
 8003fde:	f000 f812 	bl	8004006 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003fe2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003fe6:	f7fc fe33 	bl	8000c50 <HAL_PWREx_ControlVoltageScaling>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	bf14      	ite	ne
 8003ff0:	2301      	movne	r3, #1
 8003ff2:	2300      	moveq	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <_Z18SystemClock_Configv+0x10a>
  {
    Error_Handler();
 8003ffa:	f000 f804 	bl	8004006 <Error_Handler>
  }
}
 8003ffe:	bf00      	nop
 8004000:	37e0      	adds	r7, #224	; 0xe0
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004006:	b480      	push	{r7}
 8004008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800400a:	bf00      	nop
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <_ZN7tinyfsm3FsmI9PrechargeE5startEv>:
    static void start() {
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
      set_initial_state();
 8004018:	f7ff fd32 	bl	8003a80 <_ZN7tinyfsm3FsmI9PrechargeE17set_initial_stateEv>
      enter();
 800401c:	f000 f83e 	bl	800409c <_ZN7tinyfsm3FsmI9PrechargeE5enterEv>
    }
 8004020:	bf00      	nop
 8004022:	bd80      	pop	{r7, pc}

08004024 <_ZN7tinyfsm3FsmI9PrechargeE8dispatchI9DischargeEEvRKT_>:
    static void dispatch(E const & event) {
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
      current_state_ptr->react(event);
 800402c:	4b06      	ldr	r3, [pc, #24]	; (8004048 <_ZN7tinyfsm3FsmI9PrechargeE8dispatchI9DischargeEEvRKT_+0x24>)
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	4b05      	ldr	r3, [pc, #20]	; (8004048 <_ZN7tinyfsm3FsmI9PrechargeE8dispatchI9DischargeEEvRKT_+0x24>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	330c      	adds	r3, #12
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	4610      	mov	r0, r2
 800403e:	4798      	blx	r3
    }
 8004040:	bf00      	nop
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	200000b4 	.word	0x200000b4

0800404c <_ZN7tinyfsm3FsmI9PrechargeE8dispatchI14StartPrechargeEEvRKT_>:
    static void dispatch(E const & event) {
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
      current_state_ptr->react(event);
 8004054:	4b06      	ldr	r3, [pc, #24]	; (8004070 <_ZN7tinyfsm3FsmI9PrechargeE8dispatchI14StartPrechargeEEvRKT_+0x24>)
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	4b05      	ldr	r3, [pc, #20]	; (8004070 <_ZN7tinyfsm3FsmI9PrechargeE8dispatchI14StartPrechargeEEvRKT_+0x24>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3308      	adds	r3, #8
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	4610      	mov	r0, r2
 8004066:	4798      	blx	r3
    }
 8004068:	bf00      	nop
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	200000b4 	.word	0x200000b4

08004074 <_ZN7tinyfsm3FsmI9PrechargeE8dispatchI10TimerPulseEEvRKT_>:
    static void dispatch(E const & event) {
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
      current_state_ptr->react(event);
 800407c:	4b06      	ldr	r3, [pc, #24]	; (8004098 <_ZN7tinyfsm3FsmI9PrechargeE8dispatchI10TimerPulseEEvRKT_+0x24>)
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	4b05      	ldr	r3, [pc, #20]	; (8004098 <_ZN7tinyfsm3FsmI9PrechargeE8dispatchI10TimerPulseEEvRKT_+0x24>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	4610      	mov	r0, r2
 800408c:	4798      	blx	r3
    }
 800408e:	bf00      	nop
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	200000b4 	.word	0x200000b4

0800409c <_ZN7tinyfsm3FsmI9PrechargeE5enterEv>:
    static void enter() {
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
      current_state_ptr->entry();
 80040a0:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <_ZN7tinyfsm3FsmI9PrechargeE5enterEv+0x1c>)
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	4b04      	ldr	r3, [pc, #16]	; (80040b8 <_ZN7tinyfsm3FsmI9PrechargeE5enterEv+0x1c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3310      	adds	r3, #16
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4610      	mov	r0, r2
 80040b0:	4798      	blx	r3
    }
 80040b2:	bf00      	nop
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	200000b4 	.word	0x200000b4

080040bc <__io_putchar>:

#include "stdio.h"
#include "print.h"
#include "usart.h"

int __io_putchar(int ch) {
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, &*c, 1, 10);
 80040ca:	f107 010c 	add.w	r1, r7, #12
 80040ce:	230a      	movs	r3, #10
 80040d0:	2201      	movs	r2, #1
 80040d2:	4804      	ldr	r0, [pc, #16]	; (80040e4 <__io_putchar+0x28>)
 80040d4:	f7fe fcf4 	bl	8002ac0 <HAL_UART_Transmit>
	return ch;
 80040d8:	687b      	ldr	r3, [r7, #4]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20000114 	.word	0x20000114

080040e8 <print>:

void print(char* formatString) {
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
	printf(formatString);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 fa9b 	bl	800462c <iprintf>
}
 80040f6:	bf00      	nop
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004106:	4b0f      	ldr	r3, [pc, #60]	; (8004144 <HAL_MspInit+0x44>)
 8004108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800410a:	4a0e      	ldr	r2, [pc, #56]	; (8004144 <HAL_MspInit+0x44>)
 800410c:	f043 0301 	orr.w	r3, r3, #1
 8004110:	6613      	str	r3, [r2, #96]	; 0x60
 8004112:	4b0c      	ldr	r3, [pc, #48]	; (8004144 <HAL_MspInit+0x44>)
 8004114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	607b      	str	r3, [r7, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800411e:	4b09      	ldr	r3, [pc, #36]	; (8004144 <HAL_MspInit+0x44>)
 8004120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004122:	4a08      	ldr	r2, [pc, #32]	; (8004144 <HAL_MspInit+0x44>)
 8004124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004128:	6593      	str	r3, [r2, #88]	; 0x58
 800412a:	4b06      	ldr	r3, [pc, #24]	; (8004144 <HAL_MspInit+0x44>)
 800412c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004132:	603b      	str	r3, [r7, #0]
 8004134:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	40021000 	.word	0x40021000

08004148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800414c:	bf00      	nop
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004156:	b480      	push	{r7}
 8004158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800415a:	e7fe      	b.n	800415a <HardFault_Handler+0x4>

0800415c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004160:	e7fe      	b.n	8004160 <MemManage_Handler+0x4>

08004162 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004162:	b480      	push	{r7}
 8004164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004166:	e7fe      	b.n	8004166 <BusFault_Handler+0x4>

08004168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800416c:	e7fe      	b.n	800416c <UsageFault_Handler+0x4>

0800416e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800416e:	b480      	push	{r7}
 8004170:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004172:	bf00      	nop
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004180:	bf00      	nop
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800418a:	b480      	push	{r7}
 800418c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800418e:	bf00      	nop
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800419c:	f7fc fa42 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041a0:	bf00      	nop
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80041a8:	4802      	ldr	r0, [pc, #8]	; (80041b4 <TIM2_IRQHandler+0x10>)
 80041aa:	f7fe f88c 	bl	80022c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80041ae:	bf00      	nop
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	200000d4 	.word	0x200000d4

080041b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80041bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80041c0:	f7fc fd20 	bl	8000c04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80041c4:	bf00      	nop
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041d4:	2300      	movs	r3, #0
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	e00a      	b.n	80041f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80041da:	f3af 8000 	nop.w
 80041de:	4601      	mov	r1, r0
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	1c5a      	adds	r2, r3, #1
 80041e4:	60ba      	str	r2, [r7, #8]
 80041e6:	b2ca      	uxtb	r2, r1
 80041e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	3301      	adds	r3, #1
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	dbf0      	blt.n	80041da <_read+0x12>
	}

return len;
 80041f8:	687b      	ldr	r3, [r7, #4]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b086      	sub	sp, #24
 8004206:	af00      	add	r7, sp, #0
 8004208:	60f8      	str	r0, [r7, #12]
 800420a:	60b9      	str	r1, [r7, #8]
 800420c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800420e:	2300      	movs	r3, #0
 8004210:	617b      	str	r3, [r7, #20]
 8004212:	e009      	b.n	8004228 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	60ba      	str	r2, [r7, #8]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff ff4d 	bl	80040bc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	3301      	adds	r3, #1
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	429a      	cmp	r2, r3
 800422e:	dbf1      	blt.n	8004214 <_write+0x12>
	}
	return len;
 8004230:	687b      	ldr	r3, [r7, #4]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <_close>:

int _close(int file)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
	return -1;
 8004242:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004246:	4618      	mov	r0, r3
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004262:	605a      	str	r2, [r3, #4]
	return 0;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <_isatty>:

int _isatty(int file)
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
	return 1;
 800427a:	2301      	movs	r3, #1
}
 800427c:	4618      	mov	r0, r3
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
	return 0;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
	...

080042a4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80042ac:	4b11      	ldr	r3, [pc, #68]	; (80042f4 <_sbrk+0x50>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d102      	bne.n	80042ba <_sbrk+0x16>
		heap_end = &end;
 80042b4:	4b0f      	ldr	r3, [pc, #60]	; (80042f4 <_sbrk+0x50>)
 80042b6:	4a10      	ldr	r2, [pc, #64]	; (80042f8 <_sbrk+0x54>)
 80042b8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80042ba:	4b0e      	ldr	r3, [pc, #56]	; (80042f4 <_sbrk+0x50>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80042c0:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <_sbrk+0x50>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4413      	add	r3, r2
 80042c8:	466a      	mov	r2, sp
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d907      	bls.n	80042de <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80042ce:	f000 f97b 	bl	80045c8 <__errno>
 80042d2:	4602      	mov	r2, r0
 80042d4:	230c      	movs	r3, #12
 80042d6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80042d8:	f04f 33ff 	mov.w	r3, #4294967295
 80042dc:	e006      	b.n	80042ec <_sbrk+0x48>
	}

	heap_end += incr;
 80042de:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <_sbrk+0x50>)
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4413      	add	r3, r2
 80042e6:	4a03      	ldr	r2, [pc, #12]	; (80042f4 <_sbrk+0x50>)
 80042e8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80042ea:	68fb      	ldr	r3, [r7, #12]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	200000c4 	.word	0x200000c4
 80042f8:	20000198 	.word	0x20000198

080042fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004300:	4b17      	ldr	r3, [pc, #92]	; (8004360 <SystemInit+0x64>)
 8004302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004306:	4a16      	ldr	r2, [pc, #88]	; (8004360 <SystemInit+0x64>)
 8004308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800430c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004310:	4b14      	ldr	r3, [pc, #80]	; (8004364 <SystemInit+0x68>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a13      	ldr	r2, [pc, #76]	; (8004364 <SystemInit+0x68>)
 8004316:	f043 0301 	orr.w	r3, r3, #1
 800431a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800431c:	4b11      	ldr	r3, [pc, #68]	; (8004364 <SystemInit+0x68>)
 800431e:	2200      	movs	r2, #0
 8004320:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004322:	4b10      	ldr	r3, [pc, #64]	; (8004364 <SystemInit+0x68>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a0f      	ldr	r2, [pc, #60]	; (8004364 <SystemInit+0x68>)
 8004328:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800432c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004330:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004332:	4b0c      	ldr	r3, [pc, #48]	; (8004364 <SystemInit+0x68>)
 8004334:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004338:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800433a:	4b0a      	ldr	r3, [pc, #40]	; (8004364 <SystemInit+0x68>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a09      	ldr	r2, [pc, #36]	; (8004364 <SystemInit+0x68>)
 8004340:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004344:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004346:	4b07      	ldr	r3, [pc, #28]	; (8004364 <SystemInit+0x68>)
 8004348:	2200      	movs	r2, #0
 800434a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800434c:	4b04      	ldr	r3, [pc, #16]	; (8004360 <SystemInit+0x64>)
 800434e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004352:	609a      	str	r2, [r3, #8]
#endif
}
 8004354:	bf00      	nop
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	e000ed00 	.word	0xe000ed00
 8004364:	40021000 	.word	0x40021000

08004368 <startTimer>:

/* Includes ------------------------------------------------------------------*/
#include "tim.h"

/* USER CODE BEGIN 0 */
int startTimer(int ms) {
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(&htim2);
 8004370:	480d      	ldr	r0, [pc, #52]	; (80043a8 <startTimer+0x40>)
 8004372:	f7fd ff7d 	bl	8002270 <HAL_TIM_Base_Stop_IT>
	htim2.Init.Period = ms*1000;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800437c:	fb02 f303 	mul.w	r3, r2, r3
 8004380:	461a      	mov	r2, r3
 8004382:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <startTimer+0x40>)
 8004384:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim2);
 8004386:	4808      	ldr	r0, [pc, #32]	; (80043a8 <startTimer+0x40>)
 8004388:	f7fd ff1c 	bl	80021c4 <HAL_TIM_Base_Init>
	__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 800438c:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <startTimer+0x40>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f06f 0201 	mvn.w	r2, #1
 8004394:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim2);
 8004396:	4804      	ldr	r0, [pc, #16]	; (80043a8 <startTimer+0x40>)
 8004398:	f7fd ff40 	bl	800221c <HAL_TIM_Base_Start_IT>
}
 800439c:	bf00      	nop
 800439e:	4618      	mov	r0, r3
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	200000d4 	.word	0x200000d4

080043ac <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b088      	sub	sp, #32
 80043b0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043b2:	f107 0310 	add.w	r3, r7, #16
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	605a      	str	r2, [r3, #4]
 80043bc:	609a      	str	r2, [r3, #8]
 80043be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043c0:	1d3b      	adds	r3, r7, #4
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	605a      	str	r2, [r3, #4]
 80043c8:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80043ca:	4b1d      	ldr	r3, [pc, #116]	; (8004440 <MX_TIM2_Init+0x94>)
 80043cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80043d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80043d2:	4b1b      	ldr	r3, [pc, #108]	; (8004440 <MX_TIM2_Init+0x94>)
 80043d4:	224f      	movs	r2, #79	; 0x4f
 80043d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043d8:	4b19      	ldr	r3, [pc, #100]	; (8004440 <MX_TIM2_Init+0x94>)
 80043da:	2200      	movs	r2, #0
 80043dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 80043de:	4b18      	ldr	r3, [pc, #96]	; (8004440 <MX_TIM2_Init+0x94>)
 80043e0:	4a18      	ldr	r2, [pc, #96]	; (8004444 <MX_TIM2_Init+0x98>)
 80043e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043e4:	4b16      	ldr	r3, [pc, #88]	; (8004440 <MX_TIM2_Init+0x94>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043ea:	4b15      	ldr	r3, [pc, #84]	; (8004440 <MX_TIM2_Init+0x94>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80043f0:	4813      	ldr	r0, [pc, #76]	; (8004440 <MX_TIM2_Init+0x94>)
 80043f2:	f7fd fee7 	bl	80021c4 <HAL_TIM_Base_Init>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80043fc:	f7ff fe03 	bl	8004006 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004404:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004406:	f107 0310 	add.w	r3, r7, #16
 800440a:	4619      	mov	r1, r3
 800440c:	480c      	ldr	r0, [pc, #48]	; (8004440 <MX_TIM2_Init+0x94>)
 800440e:	f7fe f879 	bl	8002504 <HAL_TIM_ConfigClockSource>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004418:	f7ff fdf5 	bl	8004006 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800441c:	2300      	movs	r3, #0
 800441e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004420:	2300      	movs	r3, #0
 8004422:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004424:	1d3b      	adds	r3, r7, #4
 8004426:	4619      	mov	r1, r3
 8004428:	4805      	ldr	r0, [pc, #20]	; (8004440 <MX_TIM2_Init+0x94>)
 800442a:	f7fe fa81 	bl	8002930 <HAL_TIMEx_MasterConfigSynchronization>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004434:	f7ff fde7 	bl	8004006 <Error_Handler>
  }

}
 8004438:	bf00      	nop
 800443a:	3720      	adds	r7, #32
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	200000d4 	.word	0x200000d4
 8004444:	000f4240 	.word	0x000f4240

08004448 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004458:	d113      	bne.n	8004482 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800445a:	4b0c      	ldr	r3, [pc, #48]	; (800448c <HAL_TIM_Base_MspInit+0x44>)
 800445c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445e:	4a0b      	ldr	r2, [pc, #44]	; (800448c <HAL_TIM_Base_MspInit+0x44>)
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	6593      	str	r3, [r2, #88]	; 0x58
 8004466:	4b09      	ldr	r3, [pc, #36]	; (800448c <HAL_TIM_Base_MspInit+0x44>)
 8004468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004472:	2200      	movs	r2, #0
 8004474:	2100      	movs	r1, #0
 8004476:	201c      	movs	r0, #28
 8004478:	f7fc f9cd 	bl	8000816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800447c:	201c      	movs	r0, #28
 800447e:	f7fc f9e6 	bl	800084e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004482:	bf00      	nop
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40021000 	.word	0x40021000

08004490 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8004494:	4b14      	ldr	r3, [pc, #80]	; (80044e8 <MX_USART2_UART_Init+0x58>)
 8004496:	4a15      	ldr	r2, [pc, #84]	; (80044ec <MX_USART2_UART_Init+0x5c>)
 8004498:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800449a:	4b13      	ldr	r3, [pc, #76]	; (80044e8 <MX_USART2_UART_Init+0x58>)
 800449c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80044a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80044a2:	4b11      	ldr	r3, [pc, #68]	; (80044e8 <MX_USART2_UART_Init+0x58>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80044a8:	4b0f      	ldr	r3, [pc, #60]	; (80044e8 <MX_USART2_UART_Init+0x58>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80044ae:	4b0e      	ldr	r3, [pc, #56]	; (80044e8 <MX_USART2_UART_Init+0x58>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80044b4:	4b0c      	ldr	r3, [pc, #48]	; (80044e8 <MX_USART2_UART_Init+0x58>)
 80044b6:	220c      	movs	r2, #12
 80044b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044ba:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <MX_USART2_UART_Init+0x58>)
 80044bc:	2200      	movs	r2, #0
 80044be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80044c0:	4b09      	ldr	r3, [pc, #36]	; (80044e8 <MX_USART2_UART_Init+0x58>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80044c6:	4b08      	ldr	r3, [pc, #32]	; (80044e8 <MX_USART2_UART_Init+0x58>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80044cc:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <MX_USART2_UART_Init+0x58>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80044d2:	4805      	ldr	r0, [pc, #20]	; (80044e8 <MX_USART2_UART_Init+0x58>)
 80044d4:	f7fe faa6 	bl	8002a24 <HAL_UART_Init>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80044de:	f7ff fd92 	bl	8004006 <Error_Handler>
  }

}
 80044e2:	bf00      	nop
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	20000114 	.word	0x20000114
 80044ec:	40004400 	.word	0x40004400

080044f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08a      	sub	sp, #40	; 0x28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044f8:	f107 0314 	add.w	r3, r7, #20
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	605a      	str	r2, [r3, #4]
 8004502:	609a      	str	r2, [r3, #8]
 8004504:	60da      	str	r2, [r3, #12]
 8004506:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a17      	ldr	r2, [pc, #92]	; (800456c <HAL_UART_MspInit+0x7c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d128      	bne.n	8004564 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004512:	4b17      	ldr	r3, [pc, #92]	; (8004570 <HAL_UART_MspInit+0x80>)
 8004514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004516:	4a16      	ldr	r2, [pc, #88]	; (8004570 <HAL_UART_MspInit+0x80>)
 8004518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800451c:	6593      	str	r3, [r2, #88]	; 0x58
 800451e:	4b14      	ldr	r3, [pc, #80]	; (8004570 <HAL_UART_MspInit+0x80>)
 8004520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004526:	613b      	str	r3, [r7, #16]
 8004528:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800452a:	4b11      	ldr	r3, [pc, #68]	; (8004570 <HAL_UART_MspInit+0x80>)
 800452c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452e:	4a10      	ldr	r2, [pc, #64]	; (8004570 <HAL_UART_MspInit+0x80>)
 8004530:	f043 0301 	orr.w	r3, r3, #1
 8004534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004536:	4b0e      	ldr	r3, [pc, #56]	; (8004570 <HAL_UART_MspInit+0x80>)
 8004538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004542:	230c      	movs	r3, #12
 8004544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004546:	2302      	movs	r3, #2
 8004548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800454a:	2300      	movs	r3, #0
 800454c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800454e:	2303      	movs	r3, #3
 8004550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004552:	2307      	movs	r3, #7
 8004554:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004556:	f107 0314 	add.w	r3, r7, #20
 800455a:	4619      	mov	r1, r3
 800455c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004560:	f7fc f990 	bl	8000884 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004564:	bf00      	nop
 8004566:	3728      	adds	r7, #40	; 0x28
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	40004400 	.word	0x40004400
 8004570:	40021000 	.word	0x40021000

08004574 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004574:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045ac <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004578:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800457a:	e003      	b.n	8004584 <LoopCopyDataInit>

0800457c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800457c:	4b0c      	ldr	r3, [pc, #48]	; (80045b0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800457e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004580:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004582:	3104      	adds	r1, #4

08004584 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004584:	480b      	ldr	r0, [pc, #44]	; (80045b4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004586:	4b0c      	ldr	r3, [pc, #48]	; (80045b8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004588:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800458a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800458c:	d3f6      	bcc.n	800457c <CopyDataInit>
	ldr	r2, =_sbss
 800458e:	4a0b      	ldr	r2, [pc, #44]	; (80045bc <LoopForever+0x12>)
	b	LoopFillZerobss
 8004590:	e002      	b.n	8004598 <LoopFillZerobss>

08004592 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004592:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004594:	f842 3b04 	str.w	r3, [r2], #4

08004598 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004598:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <LoopForever+0x16>)
	cmp	r2, r3
 800459a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800459c:	d3f9      	bcc.n	8004592 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800459e:	f7ff fead 	bl	80042fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045a2:	f000 f817 	bl	80045d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80045a6:	f7ff fc63 	bl	8003e70 <main>

080045aa <LoopForever>:

LoopForever:
    b LoopForever
 80045aa:	e7fe      	b.n	80045aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80045ac:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80045b0:	080056b8 	.word	0x080056b8
	ldr	r0, =_sdata
 80045b4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80045b8:	20000098 	.word	0x20000098
	ldr	r2, =_sbss
 80045bc:	20000098 	.word	0x20000098
	ldr	r3, = _ebss
 80045c0:	20000198 	.word	0x20000198

080045c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80045c4:	e7fe      	b.n	80045c4 <ADC1_2_IRQHandler>
	...

080045c8 <__errno>:
 80045c8:	4b01      	ldr	r3, [pc, #4]	; (80045d0 <__errno+0x8>)
 80045ca:	6818      	ldr	r0, [r3, #0]
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	20000034 	.word	0x20000034

080045d4 <__libc_init_array>:
 80045d4:	b570      	push	{r4, r5, r6, lr}
 80045d6:	4e0d      	ldr	r6, [pc, #52]	; (800460c <__libc_init_array+0x38>)
 80045d8:	4c0d      	ldr	r4, [pc, #52]	; (8004610 <__libc_init_array+0x3c>)
 80045da:	1ba4      	subs	r4, r4, r6
 80045dc:	10a4      	asrs	r4, r4, #2
 80045de:	2500      	movs	r5, #0
 80045e0:	42a5      	cmp	r5, r4
 80045e2:	d109      	bne.n	80045f8 <__libc_init_array+0x24>
 80045e4:	4e0b      	ldr	r6, [pc, #44]	; (8004614 <__libc_init_array+0x40>)
 80045e6:	4c0c      	ldr	r4, [pc, #48]	; (8004618 <__libc_init_array+0x44>)
 80045e8:	f000 ff04 	bl	80053f4 <_init>
 80045ec:	1ba4      	subs	r4, r4, r6
 80045ee:	10a4      	asrs	r4, r4, #2
 80045f0:	2500      	movs	r5, #0
 80045f2:	42a5      	cmp	r5, r4
 80045f4:	d105      	bne.n	8004602 <__libc_init_array+0x2e>
 80045f6:	bd70      	pop	{r4, r5, r6, pc}
 80045f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045fc:	4798      	blx	r3
 80045fe:	3501      	adds	r5, #1
 8004600:	e7ee      	b.n	80045e0 <__libc_init_array+0xc>
 8004602:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004606:	4798      	blx	r3
 8004608:	3501      	adds	r5, #1
 800460a:	e7f2      	b.n	80045f2 <__libc_init_array+0x1e>
 800460c:	080056b0 	.word	0x080056b0
 8004610:	080056b0 	.word	0x080056b0
 8004614:	080056b0 	.word	0x080056b0
 8004618:	080056b4 	.word	0x080056b4

0800461c <memset>:
 800461c:	4402      	add	r2, r0
 800461e:	4603      	mov	r3, r0
 8004620:	4293      	cmp	r3, r2
 8004622:	d100      	bne.n	8004626 <memset+0xa>
 8004624:	4770      	bx	lr
 8004626:	f803 1b01 	strb.w	r1, [r3], #1
 800462a:	e7f9      	b.n	8004620 <memset+0x4>

0800462c <iprintf>:
 800462c:	b40f      	push	{r0, r1, r2, r3}
 800462e:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <iprintf+0x2c>)
 8004630:	b513      	push	{r0, r1, r4, lr}
 8004632:	681c      	ldr	r4, [r3, #0]
 8004634:	b124      	cbz	r4, 8004640 <iprintf+0x14>
 8004636:	69a3      	ldr	r3, [r4, #24]
 8004638:	b913      	cbnz	r3, 8004640 <iprintf+0x14>
 800463a:	4620      	mov	r0, r4
 800463c:	f000 f84e 	bl	80046dc <__sinit>
 8004640:	ab05      	add	r3, sp, #20
 8004642:	9a04      	ldr	r2, [sp, #16]
 8004644:	68a1      	ldr	r1, [r4, #8]
 8004646:	9301      	str	r3, [sp, #4]
 8004648:	4620      	mov	r0, r4
 800464a:	f000 f955 	bl	80048f8 <_vfiprintf_r>
 800464e:	b002      	add	sp, #8
 8004650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004654:	b004      	add	sp, #16
 8004656:	4770      	bx	lr
 8004658:	20000034 	.word	0x20000034

0800465c <std>:
 800465c:	2300      	movs	r3, #0
 800465e:	b510      	push	{r4, lr}
 8004660:	4604      	mov	r4, r0
 8004662:	e9c0 3300 	strd	r3, r3, [r0]
 8004666:	6083      	str	r3, [r0, #8]
 8004668:	8181      	strh	r1, [r0, #12]
 800466a:	6643      	str	r3, [r0, #100]	; 0x64
 800466c:	81c2      	strh	r2, [r0, #14]
 800466e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004672:	6183      	str	r3, [r0, #24]
 8004674:	4619      	mov	r1, r3
 8004676:	2208      	movs	r2, #8
 8004678:	305c      	adds	r0, #92	; 0x5c
 800467a:	f7ff ffcf 	bl	800461c <memset>
 800467e:	4b05      	ldr	r3, [pc, #20]	; (8004694 <std+0x38>)
 8004680:	6263      	str	r3, [r4, #36]	; 0x24
 8004682:	4b05      	ldr	r3, [pc, #20]	; (8004698 <std+0x3c>)
 8004684:	62a3      	str	r3, [r4, #40]	; 0x28
 8004686:	4b05      	ldr	r3, [pc, #20]	; (800469c <std+0x40>)
 8004688:	62e3      	str	r3, [r4, #44]	; 0x2c
 800468a:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <std+0x44>)
 800468c:	6224      	str	r4, [r4, #32]
 800468e:	6323      	str	r3, [r4, #48]	; 0x30
 8004690:	bd10      	pop	{r4, pc}
 8004692:	bf00      	nop
 8004694:	08004e55 	.word	0x08004e55
 8004698:	08004e77 	.word	0x08004e77
 800469c:	08004eaf 	.word	0x08004eaf
 80046a0:	08004ed3 	.word	0x08004ed3

080046a4 <_cleanup_r>:
 80046a4:	4901      	ldr	r1, [pc, #4]	; (80046ac <_cleanup_r+0x8>)
 80046a6:	f000 b885 	b.w	80047b4 <_fwalk_reent>
 80046aa:	bf00      	nop
 80046ac:	080051ad 	.word	0x080051ad

080046b0 <__sfmoreglue>:
 80046b0:	b570      	push	{r4, r5, r6, lr}
 80046b2:	1e4a      	subs	r2, r1, #1
 80046b4:	2568      	movs	r5, #104	; 0x68
 80046b6:	4355      	muls	r5, r2
 80046b8:	460e      	mov	r6, r1
 80046ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80046be:	f000 f897 	bl	80047f0 <_malloc_r>
 80046c2:	4604      	mov	r4, r0
 80046c4:	b140      	cbz	r0, 80046d8 <__sfmoreglue+0x28>
 80046c6:	2100      	movs	r1, #0
 80046c8:	e9c0 1600 	strd	r1, r6, [r0]
 80046cc:	300c      	adds	r0, #12
 80046ce:	60a0      	str	r0, [r4, #8]
 80046d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80046d4:	f7ff ffa2 	bl	800461c <memset>
 80046d8:	4620      	mov	r0, r4
 80046da:	bd70      	pop	{r4, r5, r6, pc}

080046dc <__sinit>:
 80046dc:	6983      	ldr	r3, [r0, #24]
 80046de:	b510      	push	{r4, lr}
 80046e0:	4604      	mov	r4, r0
 80046e2:	bb33      	cbnz	r3, 8004732 <__sinit+0x56>
 80046e4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80046e8:	6503      	str	r3, [r0, #80]	; 0x50
 80046ea:	4b12      	ldr	r3, [pc, #72]	; (8004734 <__sinit+0x58>)
 80046ec:	4a12      	ldr	r2, [pc, #72]	; (8004738 <__sinit+0x5c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6282      	str	r2, [r0, #40]	; 0x28
 80046f2:	4298      	cmp	r0, r3
 80046f4:	bf04      	itt	eq
 80046f6:	2301      	moveq	r3, #1
 80046f8:	6183      	streq	r3, [r0, #24]
 80046fa:	f000 f81f 	bl	800473c <__sfp>
 80046fe:	6060      	str	r0, [r4, #4]
 8004700:	4620      	mov	r0, r4
 8004702:	f000 f81b 	bl	800473c <__sfp>
 8004706:	60a0      	str	r0, [r4, #8]
 8004708:	4620      	mov	r0, r4
 800470a:	f000 f817 	bl	800473c <__sfp>
 800470e:	2200      	movs	r2, #0
 8004710:	60e0      	str	r0, [r4, #12]
 8004712:	2104      	movs	r1, #4
 8004714:	6860      	ldr	r0, [r4, #4]
 8004716:	f7ff ffa1 	bl	800465c <std>
 800471a:	2201      	movs	r2, #1
 800471c:	2109      	movs	r1, #9
 800471e:	68a0      	ldr	r0, [r4, #8]
 8004720:	f7ff ff9c 	bl	800465c <std>
 8004724:	2202      	movs	r2, #2
 8004726:	2112      	movs	r1, #18
 8004728:	68e0      	ldr	r0, [r4, #12]
 800472a:	f7ff ff97 	bl	800465c <std>
 800472e:	2301      	movs	r3, #1
 8004730:	61a3      	str	r3, [r4, #24]
 8004732:	bd10      	pop	{r4, pc}
 8004734:	08005610 	.word	0x08005610
 8004738:	080046a5 	.word	0x080046a5

0800473c <__sfp>:
 800473c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473e:	4b1b      	ldr	r3, [pc, #108]	; (80047ac <__sfp+0x70>)
 8004740:	681e      	ldr	r6, [r3, #0]
 8004742:	69b3      	ldr	r3, [r6, #24]
 8004744:	4607      	mov	r7, r0
 8004746:	b913      	cbnz	r3, 800474e <__sfp+0x12>
 8004748:	4630      	mov	r0, r6
 800474a:	f7ff ffc7 	bl	80046dc <__sinit>
 800474e:	3648      	adds	r6, #72	; 0x48
 8004750:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004754:	3b01      	subs	r3, #1
 8004756:	d503      	bpl.n	8004760 <__sfp+0x24>
 8004758:	6833      	ldr	r3, [r6, #0]
 800475a:	b133      	cbz	r3, 800476a <__sfp+0x2e>
 800475c:	6836      	ldr	r6, [r6, #0]
 800475e:	e7f7      	b.n	8004750 <__sfp+0x14>
 8004760:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004764:	b16d      	cbz	r5, 8004782 <__sfp+0x46>
 8004766:	3468      	adds	r4, #104	; 0x68
 8004768:	e7f4      	b.n	8004754 <__sfp+0x18>
 800476a:	2104      	movs	r1, #4
 800476c:	4638      	mov	r0, r7
 800476e:	f7ff ff9f 	bl	80046b0 <__sfmoreglue>
 8004772:	6030      	str	r0, [r6, #0]
 8004774:	2800      	cmp	r0, #0
 8004776:	d1f1      	bne.n	800475c <__sfp+0x20>
 8004778:	230c      	movs	r3, #12
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	4604      	mov	r4, r0
 800477e:	4620      	mov	r0, r4
 8004780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004782:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <__sfp+0x74>)
 8004784:	6665      	str	r5, [r4, #100]	; 0x64
 8004786:	e9c4 5500 	strd	r5, r5, [r4]
 800478a:	60a5      	str	r5, [r4, #8]
 800478c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004790:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004794:	2208      	movs	r2, #8
 8004796:	4629      	mov	r1, r5
 8004798:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800479c:	f7ff ff3e 	bl	800461c <memset>
 80047a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80047a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80047a8:	e7e9      	b.n	800477e <__sfp+0x42>
 80047aa:	bf00      	nop
 80047ac:	08005610 	.word	0x08005610
 80047b0:	ffff0001 	.word	0xffff0001

080047b4 <_fwalk_reent>:
 80047b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047b8:	4680      	mov	r8, r0
 80047ba:	4689      	mov	r9, r1
 80047bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80047c0:	2600      	movs	r6, #0
 80047c2:	b914      	cbnz	r4, 80047ca <_fwalk_reent+0x16>
 80047c4:	4630      	mov	r0, r6
 80047c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047ca:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80047ce:	3f01      	subs	r7, #1
 80047d0:	d501      	bpl.n	80047d6 <_fwalk_reent+0x22>
 80047d2:	6824      	ldr	r4, [r4, #0]
 80047d4:	e7f5      	b.n	80047c2 <_fwalk_reent+0xe>
 80047d6:	89ab      	ldrh	r3, [r5, #12]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d907      	bls.n	80047ec <_fwalk_reent+0x38>
 80047dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047e0:	3301      	adds	r3, #1
 80047e2:	d003      	beq.n	80047ec <_fwalk_reent+0x38>
 80047e4:	4629      	mov	r1, r5
 80047e6:	4640      	mov	r0, r8
 80047e8:	47c8      	blx	r9
 80047ea:	4306      	orrs	r6, r0
 80047ec:	3568      	adds	r5, #104	; 0x68
 80047ee:	e7ee      	b.n	80047ce <_fwalk_reent+0x1a>

080047f0 <_malloc_r>:
 80047f0:	b570      	push	{r4, r5, r6, lr}
 80047f2:	1ccd      	adds	r5, r1, #3
 80047f4:	f025 0503 	bic.w	r5, r5, #3
 80047f8:	3508      	adds	r5, #8
 80047fa:	2d0c      	cmp	r5, #12
 80047fc:	bf38      	it	cc
 80047fe:	250c      	movcc	r5, #12
 8004800:	2d00      	cmp	r5, #0
 8004802:	4606      	mov	r6, r0
 8004804:	db01      	blt.n	800480a <_malloc_r+0x1a>
 8004806:	42a9      	cmp	r1, r5
 8004808:	d903      	bls.n	8004812 <_malloc_r+0x22>
 800480a:	230c      	movs	r3, #12
 800480c:	6033      	str	r3, [r6, #0]
 800480e:	2000      	movs	r0, #0
 8004810:	bd70      	pop	{r4, r5, r6, pc}
 8004812:	f000 fd6b 	bl	80052ec <__malloc_lock>
 8004816:	4a21      	ldr	r2, [pc, #132]	; (800489c <_malloc_r+0xac>)
 8004818:	6814      	ldr	r4, [r2, #0]
 800481a:	4621      	mov	r1, r4
 800481c:	b991      	cbnz	r1, 8004844 <_malloc_r+0x54>
 800481e:	4c20      	ldr	r4, [pc, #128]	; (80048a0 <_malloc_r+0xb0>)
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	b91b      	cbnz	r3, 800482c <_malloc_r+0x3c>
 8004824:	4630      	mov	r0, r6
 8004826:	f000 fb05 	bl	8004e34 <_sbrk_r>
 800482a:	6020      	str	r0, [r4, #0]
 800482c:	4629      	mov	r1, r5
 800482e:	4630      	mov	r0, r6
 8004830:	f000 fb00 	bl	8004e34 <_sbrk_r>
 8004834:	1c43      	adds	r3, r0, #1
 8004836:	d124      	bne.n	8004882 <_malloc_r+0x92>
 8004838:	230c      	movs	r3, #12
 800483a:	6033      	str	r3, [r6, #0]
 800483c:	4630      	mov	r0, r6
 800483e:	f000 fd56 	bl	80052ee <__malloc_unlock>
 8004842:	e7e4      	b.n	800480e <_malloc_r+0x1e>
 8004844:	680b      	ldr	r3, [r1, #0]
 8004846:	1b5b      	subs	r3, r3, r5
 8004848:	d418      	bmi.n	800487c <_malloc_r+0x8c>
 800484a:	2b0b      	cmp	r3, #11
 800484c:	d90f      	bls.n	800486e <_malloc_r+0x7e>
 800484e:	600b      	str	r3, [r1, #0]
 8004850:	50cd      	str	r5, [r1, r3]
 8004852:	18cc      	adds	r4, r1, r3
 8004854:	4630      	mov	r0, r6
 8004856:	f000 fd4a 	bl	80052ee <__malloc_unlock>
 800485a:	f104 000b 	add.w	r0, r4, #11
 800485e:	1d23      	adds	r3, r4, #4
 8004860:	f020 0007 	bic.w	r0, r0, #7
 8004864:	1ac3      	subs	r3, r0, r3
 8004866:	d0d3      	beq.n	8004810 <_malloc_r+0x20>
 8004868:	425a      	negs	r2, r3
 800486a:	50e2      	str	r2, [r4, r3]
 800486c:	e7d0      	b.n	8004810 <_malloc_r+0x20>
 800486e:	428c      	cmp	r4, r1
 8004870:	684b      	ldr	r3, [r1, #4]
 8004872:	bf16      	itet	ne
 8004874:	6063      	strne	r3, [r4, #4]
 8004876:	6013      	streq	r3, [r2, #0]
 8004878:	460c      	movne	r4, r1
 800487a:	e7eb      	b.n	8004854 <_malloc_r+0x64>
 800487c:	460c      	mov	r4, r1
 800487e:	6849      	ldr	r1, [r1, #4]
 8004880:	e7cc      	b.n	800481c <_malloc_r+0x2c>
 8004882:	1cc4      	adds	r4, r0, #3
 8004884:	f024 0403 	bic.w	r4, r4, #3
 8004888:	42a0      	cmp	r0, r4
 800488a:	d005      	beq.n	8004898 <_malloc_r+0xa8>
 800488c:	1a21      	subs	r1, r4, r0
 800488e:	4630      	mov	r0, r6
 8004890:	f000 fad0 	bl	8004e34 <_sbrk_r>
 8004894:	3001      	adds	r0, #1
 8004896:	d0cf      	beq.n	8004838 <_malloc_r+0x48>
 8004898:	6025      	str	r5, [r4, #0]
 800489a:	e7db      	b.n	8004854 <_malloc_r+0x64>
 800489c:	200000c8 	.word	0x200000c8
 80048a0:	200000cc 	.word	0x200000cc

080048a4 <__sfputc_r>:
 80048a4:	6893      	ldr	r3, [r2, #8]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	b410      	push	{r4}
 80048ac:	6093      	str	r3, [r2, #8]
 80048ae:	da08      	bge.n	80048c2 <__sfputc_r+0x1e>
 80048b0:	6994      	ldr	r4, [r2, #24]
 80048b2:	42a3      	cmp	r3, r4
 80048b4:	db01      	blt.n	80048ba <__sfputc_r+0x16>
 80048b6:	290a      	cmp	r1, #10
 80048b8:	d103      	bne.n	80048c2 <__sfputc_r+0x1e>
 80048ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048be:	f000 bb0d 	b.w	8004edc <__swbuf_r>
 80048c2:	6813      	ldr	r3, [r2, #0]
 80048c4:	1c58      	adds	r0, r3, #1
 80048c6:	6010      	str	r0, [r2, #0]
 80048c8:	7019      	strb	r1, [r3, #0]
 80048ca:	4608      	mov	r0, r1
 80048cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <__sfputs_r>:
 80048d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d4:	4606      	mov	r6, r0
 80048d6:	460f      	mov	r7, r1
 80048d8:	4614      	mov	r4, r2
 80048da:	18d5      	adds	r5, r2, r3
 80048dc:	42ac      	cmp	r4, r5
 80048de:	d101      	bne.n	80048e4 <__sfputs_r+0x12>
 80048e0:	2000      	movs	r0, #0
 80048e2:	e007      	b.n	80048f4 <__sfputs_r+0x22>
 80048e4:	463a      	mov	r2, r7
 80048e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ea:	4630      	mov	r0, r6
 80048ec:	f7ff ffda 	bl	80048a4 <__sfputc_r>
 80048f0:	1c43      	adds	r3, r0, #1
 80048f2:	d1f3      	bne.n	80048dc <__sfputs_r+0xa>
 80048f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080048f8 <_vfiprintf_r>:
 80048f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048fc:	460c      	mov	r4, r1
 80048fe:	b09d      	sub	sp, #116	; 0x74
 8004900:	4617      	mov	r7, r2
 8004902:	461d      	mov	r5, r3
 8004904:	4606      	mov	r6, r0
 8004906:	b118      	cbz	r0, 8004910 <_vfiprintf_r+0x18>
 8004908:	6983      	ldr	r3, [r0, #24]
 800490a:	b90b      	cbnz	r3, 8004910 <_vfiprintf_r+0x18>
 800490c:	f7ff fee6 	bl	80046dc <__sinit>
 8004910:	4b7c      	ldr	r3, [pc, #496]	; (8004b04 <_vfiprintf_r+0x20c>)
 8004912:	429c      	cmp	r4, r3
 8004914:	d158      	bne.n	80049c8 <_vfiprintf_r+0xd0>
 8004916:	6874      	ldr	r4, [r6, #4]
 8004918:	89a3      	ldrh	r3, [r4, #12]
 800491a:	0718      	lsls	r0, r3, #28
 800491c:	d55e      	bpl.n	80049dc <_vfiprintf_r+0xe4>
 800491e:	6923      	ldr	r3, [r4, #16]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d05b      	beq.n	80049dc <_vfiprintf_r+0xe4>
 8004924:	2300      	movs	r3, #0
 8004926:	9309      	str	r3, [sp, #36]	; 0x24
 8004928:	2320      	movs	r3, #32
 800492a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800492e:	2330      	movs	r3, #48	; 0x30
 8004930:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004934:	9503      	str	r5, [sp, #12]
 8004936:	f04f 0b01 	mov.w	fp, #1
 800493a:	46b8      	mov	r8, r7
 800493c:	4645      	mov	r5, r8
 800493e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004942:	b10b      	cbz	r3, 8004948 <_vfiprintf_r+0x50>
 8004944:	2b25      	cmp	r3, #37	; 0x25
 8004946:	d154      	bne.n	80049f2 <_vfiprintf_r+0xfa>
 8004948:	ebb8 0a07 	subs.w	sl, r8, r7
 800494c:	d00b      	beq.n	8004966 <_vfiprintf_r+0x6e>
 800494e:	4653      	mov	r3, sl
 8004950:	463a      	mov	r2, r7
 8004952:	4621      	mov	r1, r4
 8004954:	4630      	mov	r0, r6
 8004956:	f7ff ffbc 	bl	80048d2 <__sfputs_r>
 800495a:	3001      	adds	r0, #1
 800495c:	f000 80c2 	beq.w	8004ae4 <_vfiprintf_r+0x1ec>
 8004960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004962:	4453      	add	r3, sl
 8004964:	9309      	str	r3, [sp, #36]	; 0x24
 8004966:	f898 3000 	ldrb.w	r3, [r8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 80ba 	beq.w	8004ae4 <_vfiprintf_r+0x1ec>
 8004970:	2300      	movs	r3, #0
 8004972:	f04f 32ff 	mov.w	r2, #4294967295
 8004976:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800497a:	9304      	str	r3, [sp, #16]
 800497c:	9307      	str	r3, [sp, #28]
 800497e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004982:	931a      	str	r3, [sp, #104]	; 0x68
 8004984:	46a8      	mov	r8, r5
 8004986:	2205      	movs	r2, #5
 8004988:	f818 1b01 	ldrb.w	r1, [r8], #1
 800498c:	485e      	ldr	r0, [pc, #376]	; (8004b08 <_vfiprintf_r+0x210>)
 800498e:	f7fb fc1f 	bl	80001d0 <memchr>
 8004992:	9b04      	ldr	r3, [sp, #16]
 8004994:	bb78      	cbnz	r0, 80049f6 <_vfiprintf_r+0xfe>
 8004996:	06d9      	lsls	r1, r3, #27
 8004998:	bf44      	itt	mi
 800499a:	2220      	movmi	r2, #32
 800499c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80049a0:	071a      	lsls	r2, r3, #28
 80049a2:	bf44      	itt	mi
 80049a4:	222b      	movmi	r2, #43	; 0x2b
 80049a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80049aa:	782a      	ldrb	r2, [r5, #0]
 80049ac:	2a2a      	cmp	r2, #42	; 0x2a
 80049ae:	d02a      	beq.n	8004a06 <_vfiprintf_r+0x10e>
 80049b0:	9a07      	ldr	r2, [sp, #28]
 80049b2:	46a8      	mov	r8, r5
 80049b4:	2000      	movs	r0, #0
 80049b6:	250a      	movs	r5, #10
 80049b8:	4641      	mov	r1, r8
 80049ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049be:	3b30      	subs	r3, #48	; 0x30
 80049c0:	2b09      	cmp	r3, #9
 80049c2:	d969      	bls.n	8004a98 <_vfiprintf_r+0x1a0>
 80049c4:	b360      	cbz	r0, 8004a20 <_vfiprintf_r+0x128>
 80049c6:	e024      	b.n	8004a12 <_vfiprintf_r+0x11a>
 80049c8:	4b50      	ldr	r3, [pc, #320]	; (8004b0c <_vfiprintf_r+0x214>)
 80049ca:	429c      	cmp	r4, r3
 80049cc:	d101      	bne.n	80049d2 <_vfiprintf_r+0xda>
 80049ce:	68b4      	ldr	r4, [r6, #8]
 80049d0:	e7a2      	b.n	8004918 <_vfiprintf_r+0x20>
 80049d2:	4b4f      	ldr	r3, [pc, #316]	; (8004b10 <_vfiprintf_r+0x218>)
 80049d4:	429c      	cmp	r4, r3
 80049d6:	bf08      	it	eq
 80049d8:	68f4      	ldreq	r4, [r6, #12]
 80049da:	e79d      	b.n	8004918 <_vfiprintf_r+0x20>
 80049dc:	4621      	mov	r1, r4
 80049de:	4630      	mov	r0, r6
 80049e0:	f000 fae0 	bl	8004fa4 <__swsetup_r>
 80049e4:	2800      	cmp	r0, #0
 80049e6:	d09d      	beq.n	8004924 <_vfiprintf_r+0x2c>
 80049e8:	f04f 30ff 	mov.w	r0, #4294967295
 80049ec:	b01d      	add	sp, #116	; 0x74
 80049ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049f2:	46a8      	mov	r8, r5
 80049f4:	e7a2      	b.n	800493c <_vfiprintf_r+0x44>
 80049f6:	4a44      	ldr	r2, [pc, #272]	; (8004b08 <_vfiprintf_r+0x210>)
 80049f8:	1a80      	subs	r0, r0, r2
 80049fa:	fa0b f000 	lsl.w	r0, fp, r0
 80049fe:	4318      	orrs	r0, r3
 8004a00:	9004      	str	r0, [sp, #16]
 8004a02:	4645      	mov	r5, r8
 8004a04:	e7be      	b.n	8004984 <_vfiprintf_r+0x8c>
 8004a06:	9a03      	ldr	r2, [sp, #12]
 8004a08:	1d11      	adds	r1, r2, #4
 8004a0a:	6812      	ldr	r2, [r2, #0]
 8004a0c:	9103      	str	r1, [sp, #12]
 8004a0e:	2a00      	cmp	r2, #0
 8004a10:	db01      	blt.n	8004a16 <_vfiprintf_r+0x11e>
 8004a12:	9207      	str	r2, [sp, #28]
 8004a14:	e004      	b.n	8004a20 <_vfiprintf_r+0x128>
 8004a16:	4252      	negs	r2, r2
 8004a18:	f043 0302 	orr.w	r3, r3, #2
 8004a1c:	9207      	str	r2, [sp, #28]
 8004a1e:	9304      	str	r3, [sp, #16]
 8004a20:	f898 3000 	ldrb.w	r3, [r8]
 8004a24:	2b2e      	cmp	r3, #46	; 0x2e
 8004a26:	d10e      	bne.n	8004a46 <_vfiprintf_r+0x14e>
 8004a28:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004a2c:	2b2a      	cmp	r3, #42	; 0x2a
 8004a2e:	d138      	bne.n	8004aa2 <_vfiprintf_r+0x1aa>
 8004a30:	9b03      	ldr	r3, [sp, #12]
 8004a32:	1d1a      	adds	r2, r3, #4
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	9203      	str	r2, [sp, #12]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	bfb8      	it	lt
 8004a3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a40:	f108 0802 	add.w	r8, r8, #2
 8004a44:	9305      	str	r3, [sp, #20]
 8004a46:	4d33      	ldr	r5, [pc, #204]	; (8004b14 <_vfiprintf_r+0x21c>)
 8004a48:	f898 1000 	ldrb.w	r1, [r8]
 8004a4c:	2203      	movs	r2, #3
 8004a4e:	4628      	mov	r0, r5
 8004a50:	f7fb fbbe 	bl	80001d0 <memchr>
 8004a54:	b140      	cbz	r0, 8004a68 <_vfiprintf_r+0x170>
 8004a56:	2340      	movs	r3, #64	; 0x40
 8004a58:	1b40      	subs	r0, r0, r5
 8004a5a:	fa03 f000 	lsl.w	r0, r3, r0
 8004a5e:	9b04      	ldr	r3, [sp, #16]
 8004a60:	4303      	orrs	r3, r0
 8004a62:	f108 0801 	add.w	r8, r8, #1
 8004a66:	9304      	str	r3, [sp, #16]
 8004a68:	f898 1000 	ldrb.w	r1, [r8]
 8004a6c:	482a      	ldr	r0, [pc, #168]	; (8004b18 <_vfiprintf_r+0x220>)
 8004a6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a72:	2206      	movs	r2, #6
 8004a74:	f108 0701 	add.w	r7, r8, #1
 8004a78:	f7fb fbaa 	bl	80001d0 <memchr>
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	d037      	beq.n	8004af0 <_vfiprintf_r+0x1f8>
 8004a80:	4b26      	ldr	r3, [pc, #152]	; (8004b1c <_vfiprintf_r+0x224>)
 8004a82:	bb1b      	cbnz	r3, 8004acc <_vfiprintf_r+0x1d4>
 8004a84:	9b03      	ldr	r3, [sp, #12]
 8004a86:	3307      	adds	r3, #7
 8004a88:	f023 0307 	bic.w	r3, r3, #7
 8004a8c:	3308      	adds	r3, #8
 8004a8e:	9303      	str	r3, [sp, #12]
 8004a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a92:	444b      	add	r3, r9
 8004a94:	9309      	str	r3, [sp, #36]	; 0x24
 8004a96:	e750      	b.n	800493a <_vfiprintf_r+0x42>
 8004a98:	fb05 3202 	mla	r2, r5, r2, r3
 8004a9c:	2001      	movs	r0, #1
 8004a9e:	4688      	mov	r8, r1
 8004aa0:	e78a      	b.n	80049b8 <_vfiprintf_r+0xc0>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	f108 0801 	add.w	r8, r8, #1
 8004aa8:	9305      	str	r3, [sp, #20]
 8004aaa:	4619      	mov	r1, r3
 8004aac:	250a      	movs	r5, #10
 8004aae:	4640      	mov	r0, r8
 8004ab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ab4:	3a30      	subs	r2, #48	; 0x30
 8004ab6:	2a09      	cmp	r2, #9
 8004ab8:	d903      	bls.n	8004ac2 <_vfiprintf_r+0x1ca>
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0c3      	beq.n	8004a46 <_vfiprintf_r+0x14e>
 8004abe:	9105      	str	r1, [sp, #20]
 8004ac0:	e7c1      	b.n	8004a46 <_vfiprintf_r+0x14e>
 8004ac2:	fb05 2101 	mla	r1, r5, r1, r2
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	4680      	mov	r8, r0
 8004aca:	e7f0      	b.n	8004aae <_vfiprintf_r+0x1b6>
 8004acc:	ab03      	add	r3, sp, #12
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	4622      	mov	r2, r4
 8004ad2:	4b13      	ldr	r3, [pc, #76]	; (8004b20 <_vfiprintf_r+0x228>)
 8004ad4:	a904      	add	r1, sp, #16
 8004ad6:	4630      	mov	r0, r6
 8004ad8:	f3af 8000 	nop.w
 8004adc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004ae0:	4681      	mov	r9, r0
 8004ae2:	d1d5      	bne.n	8004a90 <_vfiprintf_r+0x198>
 8004ae4:	89a3      	ldrh	r3, [r4, #12]
 8004ae6:	065b      	lsls	r3, r3, #25
 8004ae8:	f53f af7e 	bmi.w	80049e8 <_vfiprintf_r+0xf0>
 8004aec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004aee:	e77d      	b.n	80049ec <_vfiprintf_r+0xf4>
 8004af0:	ab03      	add	r3, sp, #12
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	4622      	mov	r2, r4
 8004af6:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <_vfiprintf_r+0x228>)
 8004af8:	a904      	add	r1, sp, #16
 8004afa:	4630      	mov	r0, r6
 8004afc:	f000 f888 	bl	8004c10 <_printf_i>
 8004b00:	e7ec      	b.n	8004adc <_vfiprintf_r+0x1e4>
 8004b02:	bf00      	nop
 8004b04:	08005634 	.word	0x08005634
 8004b08:	08005674 	.word	0x08005674
 8004b0c:	08005654 	.word	0x08005654
 8004b10:	08005614 	.word	0x08005614
 8004b14:	0800567a 	.word	0x0800567a
 8004b18:	0800567e 	.word	0x0800567e
 8004b1c:	00000000 	.word	0x00000000
 8004b20:	080048d3 	.word	0x080048d3

08004b24 <_printf_common>:
 8004b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b28:	4691      	mov	r9, r2
 8004b2a:	461f      	mov	r7, r3
 8004b2c:	688a      	ldr	r2, [r1, #8]
 8004b2e:	690b      	ldr	r3, [r1, #16]
 8004b30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b34:	4293      	cmp	r3, r2
 8004b36:	bfb8      	it	lt
 8004b38:	4613      	movlt	r3, r2
 8004b3a:	f8c9 3000 	str.w	r3, [r9]
 8004b3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b42:	4606      	mov	r6, r0
 8004b44:	460c      	mov	r4, r1
 8004b46:	b112      	cbz	r2, 8004b4e <_printf_common+0x2a>
 8004b48:	3301      	adds	r3, #1
 8004b4a:	f8c9 3000 	str.w	r3, [r9]
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	0699      	lsls	r1, r3, #26
 8004b52:	bf42      	ittt	mi
 8004b54:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004b58:	3302      	addmi	r3, #2
 8004b5a:	f8c9 3000 	strmi.w	r3, [r9]
 8004b5e:	6825      	ldr	r5, [r4, #0]
 8004b60:	f015 0506 	ands.w	r5, r5, #6
 8004b64:	d107      	bne.n	8004b76 <_printf_common+0x52>
 8004b66:	f104 0a19 	add.w	sl, r4, #25
 8004b6a:	68e3      	ldr	r3, [r4, #12]
 8004b6c:	f8d9 2000 	ldr.w	r2, [r9]
 8004b70:	1a9b      	subs	r3, r3, r2
 8004b72:	42ab      	cmp	r3, r5
 8004b74:	dc28      	bgt.n	8004bc8 <_printf_common+0xa4>
 8004b76:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004b7a:	6822      	ldr	r2, [r4, #0]
 8004b7c:	3300      	adds	r3, #0
 8004b7e:	bf18      	it	ne
 8004b80:	2301      	movne	r3, #1
 8004b82:	0692      	lsls	r2, r2, #26
 8004b84:	d42d      	bmi.n	8004be2 <_printf_common+0xbe>
 8004b86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b8a:	4639      	mov	r1, r7
 8004b8c:	4630      	mov	r0, r6
 8004b8e:	47c0      	blx	r8
 8004b90:	3001      	adds	r0, #1
 8004b92:	d020      	beq.n	8004bd6 <_printf_common+0xb2>
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	68e5      	ldr	r5, [r4, #12]
 8004b98:	f8d9 2000 	ldr.w	r2, [r9]
 8004b9c:	f003 0306 	and.w	r3, r3, #6
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	bf08      	it	eq
 8004ba4:	1aad      	subeq	r5, r5, r2
 8004ba6:	68a3      	ldr	r3, [r4, #8]
 8004ba8:	6922      	ldr	r2, [r4, #16]
 8004baa:	bf0c      	ite	eq
 8004bac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bb0:	2500      	movne	r5, #0
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	bfc4      	itt	gt
 8004bb6:	1a9b      	subgt	r3, r3, r2
 8004bb8:	18ed      	addgt	r5, r5, r3
 8004bba:	f04f 0900 	mov.w	r9, #0
 8004bbe:	341a      	adds	r4, #26
 8004bc0:	454d      	cmp	r5, r9
 8004bc2:	d11a      	bne.n	8004bfa <_printf_common+0xd6>
 8004bc4:	2000      	movs	r0, #0
 8004bc6:	e008      	b.n	8004bda <_printf_common+0xb6>
 8004bc8:	2301      	movs	r3, #1
 8004bca:	4652      	mov	r2, sl
 8004bcc:	4639      	mov	r1, r7
 8004bce:	4630      	mov	r0, r6
 8004bd0:	47c0      	blx	r8
 8004bd2:	3001      	adds	r0, #1
 8004bd4:	d103      	bne.n	8004bde <_printf_common+0xba>
 8004bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bde:	3501      	adds	r5, #1
 8004be0:	e7c3      	b.n	8004b6a <_printf_common+0x46>
 8004be2:	18e1      	adds	r1, r4, r3
 8004be4:	1c5a      	adds	r2, r3, #1
 8004be6:	2030      	movs	r0, #48	; 0x30
 8004be8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bec:	4422      	add	r2, r4
 8004bee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bf2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bf6:	3302      	adds	r3, #2
 8004bf8:	e7c5      	b.n	8004b86 <_printf_common+0x62>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	4622      	mov	r2, r4
 8004bfe:	4639      	mov	r1, r7
 8004c00:	4630      	mov	r0, r6
 8004c02:	47c0      	blx	r8
 8004c04:	3001      	adds	r0, #1
 8004c06:	d0e6      	beq.n	8004bd6 <_printf_common+0xb2>
 8004c08:	f109 0901 	add.w	r9, r9, #1
 8004c0c:	e7d8      	b.n	8004bc0 <_printf_common+0x9c>
	...

08004c10 <_printf_i>:
 8004c10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c14:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004c18:	460c      	mov	r4, r1
 8004c1a:	7e09      	ldrb	r1, [r1, #24]
 8004c1c:	b085      	sub	sp, #20
 8004c1e:	296e      	cmp	r1, #110	; 0x6e
 8004c20:	4617      	mov	r7, r2
 8004c22:	4606      	mov	r6, r0
 8004c24:	4698      	mov	r8, r3
 8004c26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c28:	f000 80b3 	beq.w	8004d92 <_printf_i+0x182>
 8004c2c:	d822      	bhi.n	8004c74 <_printf_i+0x64>
 8004c2e:	2963      	cmp	r1, #99	; 0x63
 8004c30:	d036      	beq.n	8004ca0 <_printf_i+0x90>
 8004c32:	d80a      	bhi.n	8004c4a <_printf_i+0x3a>
 8004c34:	2900      	cmp	r1, #0
 8004c36:	f000 80b9 	beq.w	8004dac <_printf_i+0x19c>
 8004c3a:	2958      	cmp	r1, #88	; 0x58
 8004c3c:	f000 8083 	beq.w	8004d46 <_printf_i+0x136>
 8004c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c44:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004c48:	e032      	b.n	8004cb0 <_printf_i+0xa0>
 8004c4a:	2964      	cmp	r1, #100	; 0x64
 8004c4c:	d001      	beq.n	8004c52 <_printf_i+0x42>
 8004c4e:	2969      	cmp	r1, #105	; 0x69
 8004c50:	d1f6      	bne.n	8004c40 <_printf_i+0x30>
 8004c52:	6820      	ldr	r0, [r4, #0]
 8004c54:	6813      	ldr	r3, [r2, #0]
 8004c56:	0605      	lsls	r5, r0, #24
 8004c58:	f103 0104 	add.w	r1, r3, #4
 8004c5c:	d52a      	bpl.n	8004cb4 <_printf_i+0xa4>
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6011      	str	r1, [r2, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	da03      	bge.n	8004c6e <_printf_i+0x5e>
 8004c66:	222d      	movs	r2, #45	; 0x2d
 8004c68:	425b      	negs	r3, r3
 8004c6a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004c6e:	486f      	ldr	r0, [pc, #444]	; (8004e2c <_printf_i+0x21c>)
 8004c70:	220a      	movs	r2, #10
 8004c72:	e039      	b.n	8004ce8 <_printf_i+0xd8>
 8004c74:	2973      	cmp	r1, #115	; 0x73
 8004c76:	f000 809d 	beq.w	8004db4 <_printf_i+0x1a4>
 8004c7a:	d808      	bhi.n	8004c8e <_printf_i+0x7e>
 8004c7c:	296f      	cmp	r1, #111	; 0x6f
 8004c7e:	d020      	beq.n	8004cc2 <_printf_i+0xb2>
 8004c80:	2970      	cmp	r1, #112	; 0x70
 8004c82:	d1dd      	bne.n	8004c40 <_printf_i+0x30>
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	f043 0320 	orr.w	r3, r3, #32
 8004c8a:	6023      	str	r3, [r4, #0]
 8004c8c:	e003      	b.n	8004c96 <_printf_i+0x86>
 8004c8e:	2975      	cmp	r1, #117	; 0x75
 8004c90:	d017      	beq.n	8004cc2 <_printf_i+0xb2>
 8004c92:	2978      	cmp	r1, #120	; 0x78
 8004c94:	d1d4      	bne.n	8004c40 <_printf_i+0x30>
 8004c96:	2378      	movs	r3, #120	; 0x78
 8004c98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c9c:	4864      	ldr	r0, [pc, #400]	; (8004e30 <_printf_i+0x220>)
 8004c9e:	e055      	b.n	8004d4c <_printf_i+0x13c>
 8004ca0:	6813      	ldr	r3, [r2, #0]
 8004ca2:	1d19      	adds	r1, r3, #4
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6011      	str	r1, [r2, #0]
 8004ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e08c      	b.n	8004dce <_printf_i+0x1be>
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6011      	str	r1, [r2, #0]
 8004cb8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004cbc:	bf18      	it	ne
 8004cbe:	b21b      	sxthne	r3, r3
 8004cc0:	e7cf      	b.n	8004c62 <_printf_i+0x52>
 8004cc2:	6813      	ldr	r3, [r2, #0]
 8004cc4:	6825      	ldr	r5, [r4, #0]
 8004cc6:	1d18      	adds	r0, r3, #4
 8004cc8:	6010      	str	r0, [r2, #0]
 8004cca:	0628      	lsls	r0, r5, #24
 8004ccc:	d501      	bpl.n	8004cd2 <_printf_i+0xc2>
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	e002      	b.n	8004cd8 <_printf_i+0xc8>
 8004cd2:	0668      	lsls	r0, r5, #25
 8004cd4:	d5fb      	bpl.n	8004cce <_printf_i+0xbe>
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	4854      	ldr	r0, [pc, #336]	; (8004e2c <_printf_i+0x21c>)
 8004cda:	296f      	cmp	r1, #111	; 0x6f
 8004cdc:	bf14      	ite	ne
 8004cde:	220a      	movne	r2, #10
 8004ce0:	2208      	moveq	r2, #8
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ce8:	6865      	ldr	r5, [r4, #4]
 8004cea:	60a5      	str	r5, [r4, #8]
 8004cec:	2d00      	cmp	r5, #0
 8004cee:	f2c0 8095 	blt.w	8004e1c <_printf_i+0x20c>
 8004cf2:	6821      	ldr	r1, [r4, #0]
 8004cf4:	f021 0104 	bic.w	r1, r1, #4
 8004cf8:	6021      	str	r1, [r4, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d13d      	bne.n	8004d7a <_printf_i+0x16a>
 8004cfe:	2d00      	cmp	r5, #0
 8004d00:	f040 808e 	bne.w	8004e20 <_printf_i+0x210>
 8004d04:	4665      	mov	r5, ip
 8004d06:	2a08      	cmp	r2, #8
 8004d08:	d10b      	bne.n	8004d22 <_printf_i+0x112>
 8004d0a:	6823      	ldr	r3, [r4, #0]
 8004d0c:	07db      	lsls	r3, r3, #31
 8004d0e:	d508      	bpl.n	8004d22 <_printf_i+0x112>
 8004d10:	6923      	ldr	r3, [r4, #16]
 8004d12:	6862      	ldr	r2, [r4, #4]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	bfde      	ittt	le
 8004d18:	2330      	movle	r3, #48	; 0x30
 8004d1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d1e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d22:	ebac 0305 	sub.w	r3, ip, r5
 8004d26:	6123      	str	r3, [r4, #16]
 8004d28:	f8cd 8000 	str.w	r8, [sp]
 8004d2c:	463b      	mov	r3, r7
 8004d2e:	aa03      	add	r2, sp, #12
 8004d30:	4621      	mov	r1, r4
 8004d32:	4630      	mov	r0, r6
 8004d34:	f7ff fef6 	bl	8004b24 <_printf_common>
 8004d38:	3001      	adds	r0, #1
 8004d3a:	d14d      	bne.n	8004dd8 <_printf_i+0x1c8>
 8004d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d40:	b005      	add	sp, #20
 8004d42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d46:	4839      	ldr	r0, [pc, #228]	; (8004e2c <_printf_i+0x21c>)
 8004d48:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004d4c:	6813      	ldr	r3, [r2, #0]
 8004d4e:	6821      	ldr	r1, [r4, #0]
 8004d50:	1d1d      	adds	r5, r3, #4
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6015      	str	r5, [r2, #0]
 8004d56:	060a      	lsls	r2, r1, #24
 8004d58:	d50b      	bpl.n	8004d72 <_printf_i+0x162>
 8004d5a:	07ca      	lsls	r2, r1, #31
 8004d5c:	bf44      	itt	mi
 8004d5e:	f041 0120 	orrmi.w	r1, r1, #32
 8004d62:	6021      	strmi	r1, [r4, #0]
 8004d64:	b91b      	cbnz	r3, 8004d6e <_printf_i+0x15e>
 8004d66:	6822      	ldr	r2, [r4, #0]
 8004d68:	f022 0220 	bic.w	r2, r2, #32
 8004d6c:	6022      	str	r2, [r4, #0]
 8004d6e:	2210      	movs	r2, #16
 8004d70:	e7b7      	b.n	8004ce2 <_printf_i+0xd2>
 8004d72:	064d      	lsls	r5, r1, #25
 8004d74:	bf48      	it	mi
 8004d76:	b29b      	uxthmi	r3, r3
 8004d78:	e7ef      	b.n	8004d5a <_printf_i+0x14a>
 8004d7a:	4665      	mov	r5, ip
 8004d7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d80:	fb02 3311 	mls	r3, r2, r1, r3
 8004d84:	5cc3      	ldrb	r3, [r0, r3]
 8004d86:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	2900      	cmp	r1, #0
 8004d8e:	d1f5      	bne.n	8004d7c <_printf_i+0x16c>
 8004d90:	e7b9      	b.n	8004d06 <_printf_i+0xf6>
 8004d92:	6813      	ldr	r3, [r2, #0]
 8004d94:	6825      	ldr	r5, [r4, #0]
 8004d96:	6961      	ldr	r1, [r4, #20]
 8004d98:	1d18      	adds	r0, r3, #4
 8004d9a:	6010      	str	r0, [r2, #0]
 8004d9c:	0628      	lsls	r0, r5, #24
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	d501      	bpl.n	8004da6 <_printf_i+0x196>
 8004da2:	6019      	str	r1, [r3, #0]
 8004da4:	e002      	b.n	8004dac <_printf_i+0x19c>
 8004da6:	066a      	lsls	r2, r5, #25
 8004da8:	d5fb      	bpl.n	8004da2 <_printf_i+0x192>
 8004daa:	8019      	strh	r1, [r3, #0]
 8004dac:	2300      	movs	r3, #0
 8004dae:	6123      	str	r3, [r4, #16]
 8004db0:	4665      	mov	r5, ip
 8004db2:	e7b9      	b.n	8004d28 <_printf_i+0x118>
 8004db4:	6813      	ldr	r3, [r2, #0]
 8004db6:	1d19      	adds	r1, r3, #4
 8004db8:	6011      	str	r1, [r2, #0]
 8004dba:	681d      	ldr	r5, [r3, #0]
 8004dbc:	6862      	ldr	r2, [r4, #4]
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	f7fb fa05 	bl	80001d0 <memchr>
 8004dc6:	b108      	cbz	r0, 8004dcc <_printf_i+0x1bc>
 8004dc8:	1b40      	subs	r0, r0, r5
 8004dca:	6060      	str	r0, [r4, #4]
 8004dcc:	6863      	ldr	r3, [r4, #4]
 8004dce:	6123      	str	r3, [r4, #16]
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dd6:	e7a7      	b.n	8004d28 <_printf_i+0x118>
 8004dd8:	6923      	ldr	r3, [r4, #16]
 8004dda:	462a      	mov	r2, r5
 8004ddc:	4639      	mov	r1, r7
 8004dde:	4630      	mov	r0, r6
 8004de0:	47c0      	blx	r8
 8004de2:	3001      	adds	r0, #1
 8004de4:	d0aa      	beq.n	8004d3c <_printf_i+0x12c>
 8004de6:	6823      	ldr	r3, [r4, #0]
 8004de8:	079b      	lsls	r3, r3, #30
 8004dea:	d413      	bmi.n	8004e14 <_printf_i+0x204>
 8004dec:	68e0      	ldr	r0, [r4, #12]
 8004dee:	9b03      	ldr	r3, [sp, #12]
 8004df0:	4298      	cmp	r0, r3
 8004df2:	bfb8      	it	lt
 8004df4:	4618      	movlt	r0, r3
 8004df6:	e7a3      	b.n	8004d40 <_printf_i+0x130>
 8004df8:	2301      	movs	r3, #1
 8004dfa:	464a      	mov	r2, r9
 8004dfc:	4639      	mov	r1, r7
 8004dfe:	4630      	mov	r0, r6
 8004e00:	47c0      	blx	r8
 8004e02:	3001      	adds	r0, #1
 8004e04:	d09a      	beq.n	8004d3c <_printf_i+0x12c>
 8004e06:	3501      	adds	r5, #1
 8004e08:	68e3      	ldr	r3, [r4, #12]
 8004e0a:	9a03      	ldr	r2, [sp, #12]
 8004e0c:	1a9b      	subs	r3, r3, r2
 8004e0e:	42ab      	cmp	r3, r5
 8004e10:	dcf2      	bgt.n	8004df8 <_printf_i+0x1e8>
 8004e12:	e7eb      	b.n	8004dec <_printf_i+0x1dc>
 8004e14:	2500      	movs	r5, #0
 8004e16:	f104 0919 	add.w	r9, r4, #25
 8004e1a:	e7f5      	b.n	8004e08 <_printf_i+0x1f8>
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1ac      	bne.n	8004d7a <_printf_i+0x16a>
 8004e20:	7803      	ldrb	r3, [r0, #0]
 8004e22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e2a:	e76c      	b.n	8004d06 <_printf_i+0xf6>
 8004e2c:	08005685 	.word	0x08005685
 8004e30:	08005696 	.word	0x08005696

08004e34 <_sbrk_r>:
 8004e34:	b538      	push	{r3, r4, r5, lr}
 8004e36:	4c06      	ldr	r4, [pc, #24]	; (8004e50 <_sbrk_r+0x1c>)
 8004e38:	2300      	movs	r3, #0
 8004e3a:	4605      	mov	r5, r0
 8004e3c:	4608      	mov	r0, r1
 8004e3e:	6023      	str	r3, [r4, #0]
 8004e40:	f7ff fa30 	bl	80042a4 <_sbrk>
 8004e44:	1c43      	adds	r3, r0, #1
 8004e46:	d102      	bne.n	8004e4e <_sbrk_r+0x1a>
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	b103      	cbz	r3, 8004e4e <_sbrk_r+0x1a>
 8004e4c:	602b      	str	r3, [r5, #0]
 8004e4e:	bd38      	pop	{r3, r4, r5, pc}
 8004e50:	20000194 	.word	0x20000194

08004e54 <__sread>:
 8004e54:	b510      	push	{r4, lr}
 8004e56:	460c      	mov	r4, r1
 8004e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e5c:	f000 fa96 	bl	800538c <_read_r>
 8004e60:	2800      	cmp	r0, #0
 8004e62:	bfab      	itete	ge
 8004e64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e66:	89a3      	ldrhlt	r3, [r4, #12]
 8004e68:	181b      	addge	r3, r3, r0
 8004e6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e6e:	bfac      	ite	ge
 8004e70:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e72:	81a3      	strhlt	r3, [r4, #12]
 8004e74:	bd10      	pop	{r4, pc}

08004e76 <__swrite>:
 8004e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e7a:	461f      	mov	r7, r3
 8004e7c:	898b      	ldrh	r3, [r1, #12]
 8004e7e:	05db      	lsls	r3, r3, #23
 8004e80:	4605      	mov	r5, r0
 8004e82:	460c      	mov	r4, r1
 8004e84:	4616      	mov	r6, r2
 8004e86:	d505      	bpl.n	8004e94 <__swrite+0x1e>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e90:	f000 f9b6 	bl	8005200 <_lseek_r>
 8004e94:	89a3      	ldrh	r3, [r4, #12]
 8004e96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e9e:	81a3      	strh	r3, [r4, #12]
 8004ea0:	4632      	mov	r2, r6
 8004ea2:	463b      	mov	r3, r7
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eaa:	f000 b869 	b.w	8004f80 <_write_r>

08004eae <__sseek>:
 8004eae:	b510      	push	{r4, lr}
 8004eb0:	460c      	mov	r4, r1
 8004eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eb6:	f000 f9a3 	bl	8005200 <_lseek_r>
 8004eba:	1c43      	adds	r3, r0, #1
 8004ebc:	89a3      	ldrh	r3, [r4, #12]
 8004ebe:	bf15      	itete	ne
 8004ec0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ec2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ec6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004eca:	81a3      	strheq	r3, [r4, #12]
 8004ecc:	bf18      	it	ne
 8004ece:	81a3      	strhne	r3, [r4, #12]
 8004ed0:	bd10      	pop	{r4, pc}

08004ed2 <__sclose>:
 8004ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ed6:	f000 b8d3 	b.w	8005080 <_close_r>
	...

08004edc <__swbuf_r>:
 8004edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ede:	460e      	mov	r6, r1
 8004ee0:	4614      	mov	r4, r2
 8004ee2:	4605      	mov	r5, r0
 8004ee4:	b118      	cbz	r0, 8004eee <__swbuf_r+0x12>
 8004ee6:	6983      	ldr	r3, [r0, #24]
 8004ee8:	b90b      	cbnz	r3, 8004eee <__swbuf_r+0x12>
 8004eea:	f7ff fbf7 	bl	80046dc <__sinit>
 8004eee:	4b21      	ldr	r3, [pc, #132]	; (8004f74 <__swbuf_r+0x98>)
 8004ef0:	429c      	cmp	r4, r3
 8004ef2:	d12a      	bne.n	8004f4a <__swbuf_r+0x6e>
 8004ef4:	686c      	ldr	r4, [r5, #4]
 8004ef6:	69a3      	ldr	r3, [r4, #24]
 8004ef8:	60a3      	str	r3, [r4, #8]
 8004efa:	89a3      	ldrh	r3, [r4, #12]
 8004efc:	071a      	lsls	r2, r3, #28
 8004efe:	d52e      	bpl.n	8004f5e <__swbuf_r+0x82>
 8004f00:	6923      	ldr	r3, [r4, #16]
 8004f02:	b363      	cbz	r3, 8004f5e <__swbuf_r+0x82>
 8004f04:	6923      	ldr	r3, [r4, #16]
 8004f06:	6820      	ldr	r0, [r4, #0]
 8004f08:	1ac0      	subs	r0, r0, r3
 8004f0a:	6963      	ldr	r3, [r4, #20]
 8004f0c:	b2f6      	uxtb	r6, r6
 8004f0e:	4283      	cmp	r3, r0
 8004f10:	4637      	mov	r7, r6
 8004f12:	dc04      	bgt.n	8004f1e <__swbuf_r+0x42>
 8004f14:	4621      	mov	r1, r4
 8004f16:	4628      	mov	r0, r5
 8004f18:	f000 f948 	bl	80051ac <_fflush_r>
 8004f1c:	bb28      	cbnz	r0, 8004f6a <__swbuf_r+0x8e>
 8004f1e:	68a3      	ldr	r3, [r4, #8]
 8004f20:	3b01      	subs	r3, #1
 8004f22:	60a3      	str	r3, [r4, #8]
 8004f24:	6823      	ldr	r3, [r4, #0]
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	6022      	str	r2, [r4, #0]
 8004f2a:	701e      	strb	r6, [r3, #0]
 8004f2c:	6963      	ldr	r3, [r4, #20]
 8004f2e:	3001      	adds	r0, #1
 8004f30:	4283      	cmp	r3, r0
 8004f32:	d004      	beq.n	8004f3e <__swbuf_r+0x62>
 8004f34:	89a3      	ldrh	r3, [r4, #12]
 8004f36:	07db      	lsls	r3, r3, #31
 8004f38:	d519      	bpl.n	8004f6e <__swbuf_r+0x92>
 8004f3a:	2e0a      	cmp	r6, #10
 8004f3c:	d117      	bne.n	8004f6e <__swbuf_r+0x92>
 8004f3e:	4621      	mov	r1, r4
 8004f40:	4628      	mov	r0, r5
 8004f42:	f000 f933 	bl	80051ac <_fflush_r>
 8004f46:	b190      	cbz	r0, 8004f6e <__swbuf_r+0x92>
 8004f48:	e00f      	b.n	8004f6a <__swbuf_r+0x8e>
 8004f4a:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <__swbuf_r+0x9c>)
 8004f4c:	429c      	cmp	r4, r3
 8004f4e:	d101      	bne.n	8004f54 <__swbuf_r+0x78>
 8004f50:	68ac      	ldr	r4, [r5, #8]
 8004f52:	e7d0      	b.n	8004ef6 <__swbuf_r+0x1a>
 8004f54:	4b09      	ldr	r3, [pc, #36]	; (8004f7c <__swbuf_r+0xa0>)
 8004f56:	429c      	cmp	r4, r3
 8004f58:	bf08      	it	eq
 8004f5a:	68ec      	ldreq	r4, [r5, #12]
 8004f5c:	e7cb      	b.n	8004ef6 <__swbuf_r+0x1a>
 8004f5e:	4621      	mov	r1, r4
 8004f60:	4628      	mov	r0, r5
 8004f62:	f000 f81f 	bl	8004fa4 <__swsetup_r>
 8004f66:	2800      	cmp	r0, #0
 8004f68:	d0cc      	beq.n	8004f04 <__swbuf_r+0x28>
 8004f6a:	f04f 37ff 	mov.w	r7, #4294967295
 8004f6e:	4638      	mov	r0, r7
 8004f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f72:	bf00      	nop
 8004f74:	08005634 	.word	0x08005634
 8004f78:	08005654 	.word	0x08005654
 8004f7c:	08005614 	.word	0x08005614

08004f80 <_write_r>:
 8004f80:	b538      	push	{r3, r4, r5, lr}
 8004f82:	4c07      	ldr	r4, [pc, #28]	; (8004fa0 <_write_r+0x20>)
 8004f84:	4605      	mov	r5, r0
 8004f86:	4608      	mov	r0, r1
 8004f88:	4611      	mov	r1, r2
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	6022      	str	r2, [r4, #0]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	f7ff f937 	bl	8004202 <_write>
 8004f94:	1c43      	adds	r3, r0, #1
 8004f96:	d102      	bne.n	8004f9e <_write_r+0x1e>
 8004f98:	6823      	ldr	r3, [r4, #0]
 8004f9a:	b103      	cbz	r3, 8004f9e <_write_r+0x1e>
 8004f9c:	602b      	str	r3, [r5, #0]
 8004f9e:	bd38      	pop	{r3, r4, r5, pc}
 8004fa0:	20000194 	.word	0x20000194

08004fa4 <__swsetup_r>:
 8004fa4:	4b32      	ldr	r3, [pc, #200]	; (8005070 <__swsetup_r+0xcc>)
 8004fa6:	b570      	push	{r4, r5, r6, lr}
 8004fa8:	681d      	ldr	r5, [r3, #0]
 8004faa:	4606      	mov	r6, r0
 8004fac:	460c      	mov	r4, r1
 8004fae:	b125      	cbz	r5, 8004fba <__swsetup_r+0x16>
 8004fb0:	69ab      	ldr	r3, [r5, #24]
 8004fb2:	b913      	cbnz	r3, 8004fba <__swsetup_r+0x16>
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	f7ff fb91 	bl	80046dc <__sinit>
 8004fba:	4b2e      	ldr	r3, [pc, #184]	; (8005074 <__swsetup_r+0xd0>)
 8004fbc:	429c      	cmp	r4, r3
 8004fbe:	d10f      	bne.n	8004fe0 <__swsetup_r+0x3c>
 8004fc0:	686c      	ldr	r4, [r5, #4]
 8004fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	0715      	lsls	r5, r2, #28
 8004fca:	d42c      	bmi.n	8005026 <__swsetup_r+0x82>
 8004fcc:	06d0      	lsls	r0, r2, #27
 8004fce:	d411      	bmi.n	8004ff4 <__swsetup_r+0x50>
 8004fd0:	2209      	movs	r2, #9
 8004fd2:	6032      	str	r2, [r6, #0]
 8004fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fd8:	81a3      	strh	r3, [r4, #12]
 8004fda:	f04f 30ff 	mov.w	r0, #4294967295
 8004fde:	e03e      	b.n	800505e <__swsetup_r+0xba>
 8004fe0:	4b25      	ldr	r3, [pc, #148]	; (8005078 <__swsetup_r+0xd4>)
 8004fe2:	429c      	cmp	r4, r3
 8004fe4:	d101      	bne.n	8004fea <__swsetup_r+0x46>
 8004fe6:	68ac      	ldr	r4, [r5, #8]
 8004fe8:	e7eb      	b.n	8004fc2 <__swsetup_r+0x1e>
 8004fea:	4b24      	ldr	r3, [pc, #144]	; (800507c <__swsetup_r+0xd8>)
 8004fec:	429c      	cmp	r4, r3
 8004fee:	bf08      	it	eq
 8004ff0:	68ec      	ldreq	r4, [r5, #12]
 8004ff2:	e7e6      	b.n	8004fc2 <__swsetup_r+0x1e>
 8004ff4:	0751      	lsls	r1, r2, #29
 8004ff6:	d512      	bpl.n	800501e <__swsetup_r+0x7a>
 8004ff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ffa:	b141      	cbz	r1, 800500e <__swsetup_r+0x6a>
 8004ffc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005000:	4299      	cmp	r1, r3
 8005002:	d002      	beq.n	800500a <__swsetup_r+0x66>
 8005004:	4630      	mov	r0, r6
 8005006:	f000 f973 	bl	80052f0 <_free_r>
 800500a:	2300      	movs	r3, #0
 800500c:	6363      	str	r3, [r4, #52]	; 0x34
 800500e:	89a3      	ldrh	r3, [r4, #12]
 8005010:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005014:	81a3      	strh	r3, [r4, #12]
 8005016:	2300      	movs	r3, #0
 8005018:	6063      	str	r3, [r4, #4]
 800501a:	6923      	ldr	r3, [r4, #16]
 800501c:	6023      	str	r3, [r4, #0]
 800501e:	89a3      	ldrh	r3, [r4, #12]
 8005020:	f043 0308 	orr.w	r3, r3, #8
 8005024:	81a3      	strh	r3, [r4, #12]
 8005026:	6923      	ldr	r3, [r4, #16]
 8005028:	b94b      	cbnz	r3, 800503e <__swsetup_r+0x9a>
 800502a:	89a3      	ldrh	r3, [r4, #12]
 800502c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005034:	d003      	beq.n	800503e <__swsetup_r+0x9a>
 8005036:	4621      	mov	r1, r4
 8005038:	4630      	mov	r0, r6
 800503a:	f000 f917 	bl	800526c <__smakebuf_r>
 800503e:	89a2      	ldrh	r2, [r4, #12]
 8005040:	f012 0301 	ands.w	r3, r2, #1
 8005044:	d00c      	beq.n	8005060 <__swsetup_r+0xbc>
 8005046:	2300      	movs	r3, #0
 8005048:	60a3      	str	r3, [r4, #8]
 800504a:	6963      	ldr	r3, [r4, #20]
 800504c:	425b      	negs	r3, r3
 800504e:	61a3      	str	r3, [r4, #24]
 8005050:	6923      	ldr	r3, [r4, #16]
 8005052:	b953      	cbnz	r3, 800506a <__swsetup_r+0xc6>
 8005054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005058:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800505c:	d1ba      	bne.n	8004fd4 <__swsetup_r+0x30>
 800505e:	bd70      	pop	{r4, r5, r6, pc}
 8005060:	0792      	lsls	r2, r2, #30
 8005062:	bf58      	it	pl
 8005064:	6963      	ldrpl	r3, [r4, #20]
 8005066:	60a3      	str	r3, [r4, #8]
 8005068:	e7f2      	b.n	8005050 <__swsetup_r+0xac>
 800506a:	2000      	movs	r0, #0
 800506c:	e7f7      	b.n	800505e <__swsetup_r+0xba>
 800506e:	bf00      	nop
 8005070:	20000034 	.word	0x20000034
 8005074:	08005634 	.word	0x08005634
 8005078:	08005654 	.word	0x08005654
 800507c:	08005614 	.word	0x08005614

08005080 <_close_r>:
 8005080:	b538      	push	{r3, r4, r5, lr}
 8005082:	4c06      	ldr	r4, [pc, #24]	; (800509c <_close_r+0x1c>)
 8005084:	2300      	movs	r3, #0
 8005086:	4605      	mov	r5, r0
 8005088:	4608      	mov	r0, r1
 800508a:	6023      	str	r3, [r4, #0]
 800508c:	f7ff f8d5 	bl	800423a <_close>
 8005090:	1c43      	adds	r3, r0, #1
 8005092:	d102      	bne.n	800509a <_close_r+0x1a>
 8005094:	6823      	ldr	r3, [r4, #0]
 8005096:	b103      	cbz	r3, 800509a <_close_r+0x1a>
 8005098:	602b      	str	r3, [r5, #0]
 800509a:	bd38      	pop	{r3, r4, r5, pc}
 800509c:	20000194 	.word	0x20000194

080050a0 <__sflush_r>:
 80050a0:	898a      	ldrh	r2, [r1, #12]
 80050a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050a6:	4605      	mov	r5, r0
 80050a8:	0710      	lsls	r0, r2, #28
 80050aa:	460c      	mov	r4, r1
 80050ac:	d458      	bmi.n	8005160 <__sflush_r+0xc0>
 80050ae:	684b      	ldr	r3, [r1, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	dc05      	bgt.n	80050c0 <__sflush_r+0x20>
 80050b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	dc02      	bgt.n	80050c0 <__sflush_r+0x20>
 80050ba:	2000      	movs	r0, #0
 80050bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050c2:	2e00      	cmp	r6, #0
 80050c4:	d0f9      	beq.n	80050ba <__sflush_r+0x1a>
 80050c6:	2300      	movs	r3, #0
 80050c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80050cc:	682f      	ldr	r7, [r5, #0]
 80050ce:	6a21      	ldr	r1, [r4, #32]
 80050d0:	602b      	str	r3, [r5, #0]
 80050d2:	d032      	beq.n	800513a <__sflush_r+0x9a>
 80050d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80050d6:	89a3      	ldrh	r3, [r4, #12]
 80050d8:	075a      	lsls	r2, r3, #29
 80050da:	d505      	bpl.n	80050e8 <__sflush_r+0x48>
 80050dc:	6863      	ldr	r3, [r4, #4]
 80050de:	1ac0      	subs	r0, r0, r3
 80050e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80050e2:	b10b      	cbz	r3, 80050e8 <__sflush_r+0x48>
 80050e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050e6:	1ac0      	subs	r0, r0, r3
 80050e8:	2300      	movs	r3, #0
 80050ea:	4602      	mov	r2, r0
 80050ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050ee:	6a21      	ldr	r1, [r4, #32]
 80050f0:	4628      	mov	r0, r5
 80050f2:	47b0      	blx	r6
 80050f4:	1c43      	adds	r3, r0, #1
 80050f6:	89a3      	ldrh	r3, [r4, #12]
 80050f8:	d106      	bne.n	8005108 <__sflush_r+0x68>
 80050fa:	6829      	ldr	r1, [r5, #0]
 80050fc:	291d      	cmp	r1, #29
 80050fe:	d848      	bhi.n	8005192 <__sflush_r+0xf2>
 8005100:	4a29      	ldr	r2, [pc, #164]	; (80051a8 <__sflush_r+0x108>)
 8005102:	40ca      	lsrs	r2, r1
 8005104:	07d6      	lsls	r6, r2, #31
 8005106:	d544      	bpl.n	8005192 <__sflush_r+0xf2>
 8005108:	2200      	movs	r2, #0
 800510a:	6062      	str	r2, [r4, #4]
 800510c:	04d9      	lsls	r1, r3, #19
 800510e:	6922      	ldr	r2, [r4, #16]
 8005110:	6022      	str	r2, [r4, #0]
 8005112:	d504      	bpl.n	800511e <__sflush_r+0x7e>
 8005114:	1c42      	adds	r2, r0, #1
 8005116:	d101      	bne.n	800511c <__sflush_r+0x7c>
 8005118:	682b      	ldr	r3, [r5, #0]
 800511a:	b903      	cbnz	r3, 800511e <__sflush_r+0x7e>
 800511c:	6560      	str	r0, [r4, #84]	; 0x54
 800511e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005120:	602f      	str	r7, [r5, #0]
 8005122:	2900      	cmp	r1, #0
 8005124:	d0c9      	beq.n	80050ba <__sflush_r+0x1a>
 8005126:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800512a:	4299      	cmp	r1, r3
 800512c:	d002      	beq.n	8005134 <__sflush_r+0x94>
 800512e:	4628      	mov	r0, r5
 8005130:	f000 f8de 	bl	80052f0 <_free_r>
 8005134:	2000      	movs	r0, #0
 8005136:	6360      	str	r0, [r4, #52]	; 0x34
 8005138:	e7c0      	b.n	80050bc <__sflush_r+0x1c>
 800513a:	2301      	movs	r3, #1
 800513c:	4628      	mov	r0, r5
 800513e:	47b0      	blx	r6
 8005140:	1c41      	adds	r1, r0, #1
 8005142:	d1c8      	bne.n	80050d6 <__sflush_r+0x36>
 8005144:	682b      	ldr	r3, [r5, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0c5      	beq.n	80050d6 <__sflush_r+0x36>
 800514a:	2b1d      	cmp	r3, #29
 800514c:	d001      	beq.n	8005152 <__sflush_r+0xb2>
 800514e:	2b16      	cmp	r3, #22
 8005150:	d101      	bne.n	8005156 <__sflush_r+0xb6>
 8005152:	602f      	str	r7, [r5, #0]
 8005154:	e7b1      	b.n	80050ba <__sflush_r+0x1a>
 8005156:	89a3      	ldrh	r3, [r4, #12]
 8005158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800515c:	81a3      	strh	r3, [r4, #12]
 800515e:	e7ad      	b.n	80050bc <__sflush_r+0x1c>
 8005160:	690f      	ldr	r7, [r1, #16]
 8005162:	2f00      	cmp	r7, #0
 8005164:	d0a9      	beq.n	80050ba <__sflush_r+0x1a>
 8005166:	0793      	lsls	r3, r2, #30
 8005168:	680e      	ldr	r6, [r1, #0]
 800516a:	bf08      	it	eq
 800516c:	694b      	ldreq	r3, [r1, #20]
 800516e:	600f      	str	r7, [r1, #0]
 8005170:	bf18      	it	ne
 8005172:	2300      	movne	r3, #0
 8005174:	eba6 0807 	sub.w	r8, r6, r7
 8005178:	608b      	str	r3, [r1, #8]
 800517a:	f1b8 0f00 	cmp.w	r8, #0
 800517e:	dd9c      	ble.n	80050ba <__sflush_r+0x1a>
 8005180:	4643      	mov	r3, r8
 8005182:	463a      	mov	r2, r7
 8005184:	6a21      	ldr	r1, [r4, #32]
 8005186:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005188:	4628      	mov	r0, r5
 800518a:	47b0      	blx	r6
 800518c:	2800      	cmp	r0, #0
 800518e:	dc06      	bgt.n	800519e <__sflush_r+0xfe>
 8005190:	89a3      	ldrh	r3, [r4, #12]
 8005192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005196:	81a3      	strh	r3, [r4, #12]
 8005198:	f04f 30ff 	mov.w	r0, #4294967295
 800519c:	e78e      	b.n	80050bc <__sflush_r+0x1c>
 800519e:	4407      	add	r7, r0
 80051a0:	eba8 0800 	sub.w	r8, r8, r0
 80051a4:	e7e9      	b.n	800517a <__sflush_r+0xda>
 80051a6:	bf00      	nop
 80051a8:	20400001 	.word	0x20400001

080051ac <_fflush_r>:
 80051ac:	b538      	push	{r3, r4, r5, lr}
 80051ae:	690b      	ldr	r3, [r1, #16]
 80051b0:	4605      	mov	r5, r0
 80051b2:	460c      	mov	r4, r1
 80051b4:	b1db      	cbz	r3, 80051ee <_fflush_r+0x42>
 80051b6:	b118      	cbz	r0, 80051c0 <_fflush_r+0x14>
 80051b8:	6983      	ldr	r3, [r0, #24]
 80051ba:	b90b      	cbnz	r3, 80051c0 <_fflush_r+0x14>
 80051bc:	f7ff fa8e 	bl	80046dc <__sinit>
 80051c0:	4b0c      	ldr	r3, [pc, #48]	; (80051f4 <_fflush_r+0x48>)
 80051c2:	429c      	cmp	r4, r3
 80051c4:	d109      	bne.n	80051da <_fflush_r+0x2e>
 80051c6:	686c      	ldr	r4, [r5, #4]
 80051c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051cc:	b17b      	cbz	r3, 80051ee <_fflush_r+0x42>
 80051ce:	4621      	mov	r1, r4
 80051d0:	4628      	mov	r0, r5
 80051d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051d6:	f7ff bf63 	b.w	80050a0 <__sflush_r>
 80051da:	4b07      	ldr	r3, [pc, #28]	; (80051f8 <_fflush_r+0x4c>)
 80051dc:	429c      	cmp	r4, r3
 80051de:	d101      	bne.n	80051e4 <_fflush_r+0x38>
 80051e0:	68ac      	ldr	r4, [r5, #8]
 80051e2:	e7f1      	b.n	80051c8 <_fflush_r+0x1c>
 80051e4:	4b05      	ldr	r3, [pc, #20]	; (80051fc <_fflush_r+0x50>)
 80051e6:	429c      	cmp	r4, r3
 80051e8:	bf08      	it	eq
 80051ea:	68ec      	ldreq	r4, [r5, #12]
 80051ec:	e7ec      	b.n	80051c8 <_fflush_r+0x1c>
 80051ee:	2000      	movs	r0, #0
 80051f0:	bd38      	pop	{r3, r4, r5, pc}
 80051f2:	bf00      	nop
 80051f4:	08005634 	.word	0x08005634
 80051f8:	08005654 	.word	0x08005654
 80051fc:	08005614 	.word	0x08005614

08005200 <_lseek_r>:
 8005200:	b538      	push	{r3, r4, r5, lr}
 8005202:	4c07      	ldr	r4, [pc, #28]	; (8005220 <_lseek_r+0x20>)
 8005204:	4605      	mov	r5, r0
 8005206:	4608      	mov	r0, r1
 8005208:	4611      	mov	r1, r2
 800520a:	2200      	movs	r2, #0
 800520c:	6022      	str	r2, [r4, #0]
 800520e:	461a      	mov	r2, r3
 8005210:	f7ff f83a 	bl	8004288 <_lseek>
 8005214:	1c43      	adds	r3, r0, #1
 8005216:	d102      	bne.n	800521e <_lseek_r+0x1e>
 8005218:	6823      	ldr	r3, [r4, #0]
 800521a:	b103      	cbz	r3, 800521e <_lseek_r+0x1e>
 800521c:	602b      	str	r3, [r5, #0]
 800521e:	bd38      	pop	{r3, r4, r5, pc}
 8005220:	20000194 	.word	0x20000194

08005224 <__swhatbuf_r>:
 8005224:	b570      	push	{r4, r5, r6, lr}
 8005226:	460e      	mov	r6, r1
 8005228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800522c:	2900      	cmp	r1, #0
 800522e:	b096      	sub	sp, #88	; 0x58
 8005230:	4614      	mov	r4, r2
 8005232:	461d      	mov	r5, r3
 8005234:	da07      	bge.n	8005246 <__swhatbuf_r+0x22>
 8005236:	2300      	movs	r3, #0
 8005238:	602b      	str	r3, [r5, #0]
 800523a:	89b3      	ldrh	r3, [r6, #12]
 800523c:	061a      	lsls	r2, r3, #24
 800523e:	d410      	bmi.n	8005262 <__swhatbuf_r+0x3e>
 8005240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005244:	e00e      	b.n	8005264 <__swhatbuf_r+0x40>
 8005246:	466a      	mov	r2, sp
 8005248:	f000 f8b2 	bl	80053b0 <_fstat_r>
 800524c:	2800      	cmp	r0, #0
 800524e:	dbf2      	blt.n	8005236 <__swhatbuf_r+0x12>
 8005250:	9a01      	ldr	r2, [sp, #4]
 8005252:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005256:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800525a:	425a      	negs	r2, r3
 800525c:	415a      	adcs	r2, r3
 800525e:	602a      	str	r2, [r5, #0]
 8005260:	e7ee      	b.n	8005240 <__swhatbuf_r+0x1c>
 8005262:	2340      	movs	r3, #64	; 0x40
 8005264:	2000      	movs	r0, #0
 8005266:	6023      	str	r3, [r4, #0]
 8005268:	b016      	add	sp, #88	; 0x58
 800526a:	bd70      	pop	{r4, r5, r6, pc}

0800526c <__smakebuf_r>:
 800526c:	898b      	ldrh	r3, [r1, #12]
 800526e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005270:	079d      	lsls	r5, r3, #30
 8005272:	4606      	mov	r6, r0
 8005274:	460c      	mov	r4, r1
 8005276:	d507      	bpl.n	8005288 <__smakebuf_r+0x1c>
 8005278:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800527c:	6023      	str	r3, [r4, #0]
 800527e:	6123      	str	r3, [r4, #16]
 8005280:	2301      	movs	r3, #1
 8005282:	6163      	str	r3, [r4, #20]
 8005284:	b002      	add	sp, #8
 8005286:	bd70      	pop	{r4, r5, r6, pc}
 8005288:	ab01      	add	r3, sp, #4
 800528a:	466a      	mov	r2, sp
 800528c:	f7ff ffca 	bl	8005224 <__swhatbuf_r>
 8005290:	9900      	ldr	r1, [sp, #0]
 8005292:	4605      	mov	r5, r0
 8005294:	4630      	mov	r0, r6
 8005296:	f7ff faab 	bl	80047f0 <_malloc_r>
 800529a:	b948      	cbnz	r0, 80052b0 <__smakebuf_r+0x44>
 800529c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052a0:	059a      	lsls	r2, r3, #22
 80052a2:	d4ef      	bmi.n	8005284 <__smakebuf_r+0x18>
 80052a4:	f023 0303 	bic.w	r3, r3, #3
 80052a8:	f043 0302 	orr.w	r3, r3, #2
 80052ac:	81a3      	strh	r3, [r4, #12]
 80052ae:	e7e3      	b.n	8005278 <__smakebuf_r+0xc>
 80052b0:	4b0d      	ldr	r3, [pc, #52]	; (80052e8 <__smakebuf_r+0x7c>)
 80052b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80052b4:	89a3      	ldrh	r3, [r4, #12]
 80052b6:	6020      	str	r0, [r4, #0]
 80052b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052bc:	81a3      	strh	r3, [r4, #12]
 80052be:	9b00      	ldr	r3, [sp, #0]
 80052c0:	6163      	str	r3, [r4, #20]
 80052c2:	9b01      	ldr	r3, [sp, #4]
 80052c4:	6120      	str	r0, [r4, #16]
 80052c6:	b15b      	cbz	r3, 80052e0 <__smakebuf_r+0x74>
 80052c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052cc:	4630      	mov	r0, r6
 80052ce:	f000 f881 	bl	80053d4 <_isatty_r>
 80052d2:	b128      	cbz	r0, 80052e0 <__smakebuf_r+0x74>
 80052d4:	89a3      	ldrh	r3, [r4, #12]
 80052d6:	f023 0303 	bic.w	r3, r3, #3
 80052da:	f043 0301 	orr.w	r3, r3, #1
 80052de:	81a3      	strh	r3, [r4, #12]
 80052e0:	89a3      	ldrh	r3, [r4, #12]
 80052e2:	431d      	orrs	r5, r3
 80052e4:	81a5      	strh	r5, [r4, #12]
 80052e6:	e7cd      	b.n	8005284 <__smakebuf_r+0x18>
 80052e8:	080046a5 	.word	0x080046a5

080052ec <__malloc_lock>:
 80052ec:	4770      	bx	lr

080052ee <__malloc_unlock>:
 80052ee:	4770      	bx	lr

080052f0 <_free_r>:
 80052f0:	b538      	push	{r3, r4, r5, lr}
 80052f2:	4605      	mov	r5, r0
 80052f4:	2900      	cmp	r1, #0
 80052f6:	d045      	beq.n	8005384 <_free_r+0x94>
 80052f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052fc:	1f0c      	subs	r4, r1, #4
 80052fe:	2b00      	cmp	r3, #0
 8005300:	bfb8      	it	lt
 8005302:	18e4      	addlt	r4, r4, r3
 8005304:	f7ff fff2 	bl	80052ec <__malloc_lock>
 8005308:	4a1f      	ldr	r2, [pc, #124]	; (8005388 <_free_r+0x98>)
 800530a:	6813      	ldr	r3, [r2, #0]
 800530c:	4610      	mov	r0, r2
 800530e:	b933      	cbnz	r3, 800531e <_free_r+0x2e>
 8005310:	6063      	str	r3, [r4, #4]
 8005312:	6014      	str	r4, [r2, #0]
 8005314:	4628      	mov	r0, r5
 8005316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800531a:	f7ff bfe8 	b.w	80052ee <__malloc_unlock>
 800531e:	42a3      	cmp	r3, r4
 8005320:	d90c      	bls.n	800533c <_free_r+0x4c>
 8005322:	6821      	ldr	r1, [r4, #0]
 8005324:	1862      	adds	r2, r4, r1
 8005326:	4293      	cmp	r3, r2
 8005328:	bf04      	itt	eq
 800532a:	681a      	ldreq	r2, [r3, #0]
 800532c:	685b      	ldreq	r3, [r3, #4]
 800532e:	6063      	str	r3, [r4, #4]
 8005330:	bf04      	itt	eq
 8005332:	1852      	addeq	r2, r2, r1
 8005334:	6022      	streq	r2, [r4, #0]
 8005336:	6004      	str	r4, [r0, #0]
 8005338:	e7ec      	b.n	8005314 <_free_r+0x24>
 800533a:	4613      	mov	r3, r2
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	b10a      	cbz	r2, 8005344 <_free_r+0x54>
 8005340:	42a2      	cmp	r2, r4
 8005342:	d9fa      	bls.n	800533a <_free_r+0x4a>
 8005344:	6819      	ldr	r1, [r3, #0]
 8005346:	1858      	adds	r0, r3, r1
 8005348:	42a0      	cmp	r0, r4
 800534a:	d10b      	bne.n	8005364 <_free_r+0x74>
 800534c:	6820      	ldr	r0, [r4, #0]
 800534e:	4401      	add	r1, r0
 8005350:	1858      	adds	r0, r3, r1
 8005352:	4282      	cmp	r2, r0
 8005354:	6019      	str	r1, [r3, #0]
 8005356:	d1dd      	bne.n	8005314 <_free_r+0x24>
 8005358:	6810      	ldr	r0, [r2, #0]
 800535a:	6852      	ldr	r2, [r2, #4]
 800535c:	605a      	str	r2, [r3, #4]
 800535e:	4401      	add	r1, r0
 8005360:	6019      	str	r1, [r3, #0]
 8005362:	e7d7      	b.n	8005314 <_free_r+0x24>
 8005364:	d902      	bls.n	800536c <_free_r+0x7c>
 8005366:	230c      	movs	r3, #12
 8005368:	602b      	str	r3, [r5, #0]
 800536a:	e7d3      	b.n	8005314 <_free_r+0x24>
 800536c:	6820      	ldr	r0, [r4, #0]
 800536e:	1821      	adds	r1, r4, r0
 8005370:	428a      	cmp	r2, r1
 8005372:	bf04      	itt	eq
 8005374:	6811      	ldreq	r1, [r2, #0]
 8005376:	6852      	ldreq	r2, [r2, #4]
 8005378:	6062      	str	r2, [r4, #4]
 800537a:	bf04      	itt	eq
 800537c:	1809      	addeq	r1, r1, r0
 800537e:	6021      	streq	r1, [r4, #0]
 8005380:	605c      	str	r4, [r3, #4]
 8005382:	e7c7      	b.n	8005314 <_free_r+0x24>
 8005384:	bd38      	pop	{r3, r4, r5, pc}
 8005386:	bf00      	nop
 8005388:	200000c8 	.word	0x200000c8

0800538c <_read_r>:
 800538c:	b538      	push	{r3, r4, r5, lr}
 800538e:	4c07      	ldr	r4, [pc, #28]	; (80053ac <_read_r+0x20>)
 8005390:	4605      	mov	r5, r0
 8005392:	4608      	mov	r0, r1
 8005394:	4611      	mov	r1, r2
 8005396:	2200      	movs	r2, #0
 8005398:	6022      	str	r2, [r4, #0]
 800539a:	461a      	mov	r2, r3
 800539c:	f7fe ff14 	bl	80041c8 <_read>
 80053a0:	1c43      	adds	r3, r0, #1
 80053a2:	d102      	bne.n	80053aa <_read_r+0x1e>
 80053a4:	6823      	ldr	r3, [r4, #0]
 80053a6:	b103      	cbz	r3, 80053aa <_read_r+0x1e>
 80053a8:	602b      	str	r3, [r5, #0]
 80053aa:	bd38      	pop	{r3, r4, r5, pc}
 80053ac:	20000194 	.word	0x20000194

080053b0 <_fstat_r>:
 80053b0:	b538      	push	{r3, r4, r5, lr}
 80053b2:	4c07      	ldr	r4, [pc, #28]	; (80053d0 <_fstat_r+0x20>)
 80053b4:	2300      	movs	r3, #0
 80053b6:	4605      	mov	r5, r0
 80053b8:	4608      	mov	r0, r1
 80053ba:	4611      	mov	r1, r2
 80053bc:	6023      	str	r3, [r4, #0]
 80053be:	f7fe ff48 	bl	8004252 <_fstat>
 80053c2:	1c43      	adds	r3, r0, #1
 80053c4:	d102      	bne.n	80053cc <_fstat_r+0x1c>
 80053c6:	6823      	ldr	r3, [r4, #0]
 80053c8:	b103      	cbz	r3, 80053cc <_fstat_r+0x1c>
 80053ca:	602b      	str	r3, [r5, #0]
 80053cc:	bd38      	pop	{r3, r4, r5, pc}
 80053ce:	bf00      	nop
 80053d0:	20000194 	.word	0x20000194

080053d4 <_isatty_r>:
 80053d4:	b538      	push	{r3, r4, r5, lr}
 80053d6:	4c06      	ldr	r4, [pc, #24]	; (80053f0 <_isatty_r+0x1c>)
 80053d8:	2300      	movs	r3, #0
 80053da:	4605      	mov	r5, r0
 80053dc:	4608      	mov	r0, r1
 80053de:	6023      	str	r3, [r4, #0]
 80053e0:	f7fe ff47 	bl	8004272 <_isatty>
 80053e4:	1c43      	adds	r3, r0, #1
 80053e6:	d102      	bne.n	80053ee <_isatty_r+0x1a>
 80053e8:	6823      	ldr	r3, [r4, #0]
 80053ea:	b103      	cbz	r3, 80053ee <_isatty_r+0x1a>
 80053ec:	602b      	str	r3, [r5, #0]
 80053ee:	bd38      	pop	{r3, r4, r5, pc}
 80053f0:	20000194 	.word	0x20000194

080053f4 <_init>:
 80053f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f6:	bf00      	nop
 80053f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053fa:	bc08      	pop	{r3}
 80053fc:	469e      	mov	lr, r3
 80053fe:	4770      	bx	lr

08005400 <_fini>:
 8005400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005402:	bf00      	nop
 8005404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005406:	bc08      	pop	{r3}
 8005408:	469e      	mov	lr, r3
 800540a:	4770      	bx	lr
