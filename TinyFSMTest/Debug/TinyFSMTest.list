
TinyFSMTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003b3c  08003b3c  00013b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bc0  08003bc0  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08003bc0  08003bc0  00013bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bc8  08003bc8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bc8  08003bc8  00013bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bcc  08003bcc  00013bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003bd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000018  08003be8  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08003be8  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d4b  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000230a  00000000  00000000  00031d93  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e78  00000000  00000000  000340a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d70  00000000  00000000  00034f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029ec9  00000000  00000000  00035c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bb87  00000000  00000000  0005fb51  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f4148  00000000  00000000  0006b6d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015f820  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bec  00000000  00000000  0015f89c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b24 	.word	0x08003b24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08003b24 	.word	0x08003b24

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004ce:	2300      	movs	r3, #0
 80004d0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004d2:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <HAL_Init+0x3c>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a0b      	ldr	r2, [pc, #44]	; (8000504 <HAL_Init+0x3c>)
 80004d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004dc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004de:	2003      	movs	r0, #3
 80004e0:	f000 f93a 	bl	8000758 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004e4:	2000      	movs	r0, #0
 80004e6:	f000 f80f 	bl	8000508 <HAL_InitTick>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d002      	beq.n	80004f6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80004f0:	2301      	movs	r3, #1
 80004f2:	71fb      	strb	r3, [r7, #7]
 80004f4:	e001      	b.n	80004fa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004f6:	f003 f93f 	bl	8003778 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004fa:	79fb      	ldrb	r3, [r7, #7]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40022000 	.word	0x40022000

08000508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000510:	2300      	movs	r3, #0
 8000512:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000514:	4b16      	ldr	r3, [pc, #88]	; (8000570 <HAL_InitTick+0x68>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d022      	beq.n	8000562 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800051c:	4b15      	ldr	r3, [pc, #84]	; (8000574 <HAL_InitTick+0x6c>)
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	4b13      	ldr	r3, [pc, #76]	; (8000570 <HAL_InitTick+0x68>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000528:	fbb1 f3f3 	udiv	r3, r1, r3
 800052c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000530:	4618      	mov	r0, r3
 8000532:	f000 f946 	bl	80007c2 <HAL_SYSTICK_Config>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d10f      	bne.n	800055c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b0f      	cmp	r3, #15
 8000540:	d809      	bhi.n	8000556 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000542:	2200      	movs	r2, #0
 8000544:	6879      	ldr	r1, [r7, #4]
 8000546:	f04f 30ff 	mov.w	r0, #4294967295
 800054a:	f000 f910 	bl	800076e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800054e:	4a0a      	ldr	r2, [pc, #40]	; (8000578 <HAL_InitTick+0x70>)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	6013      	str	r3, [r2, #0]
 8000554:	e007      	b.n	8000566 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000556:	2301      	movs	r3, #1
 8000558:	73fb      	strb	r3, [r7, #15]
 800055a:	e004      	b.n	8000566 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800055c:	2301      	movs	r3, #1
 800055e:	73fb      	strb	r3, [r7, #15]
 8000560:	e001      	b.n	8000566 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000562:	2301      	movs	r3, #1
 8000564:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000566:	7bfb      	ldrb	r3, [r7, #15]
}
 8000568:	4618      	mov	r0, r3
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000004 	.word	0x20000004
 8000574:	20000014 	.word	0x20000014
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <HAL_IncTick+0x1c>)
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <HAL_IncTick+0x20>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4413      	add	r3, r2
 800058a:	4a03      	ldr	r2, [pc, #12]	; (8000598 <HAL_IncTick+0x1c>)
 800058c:	6013      	str	r3, [r2, #0]
}
 800058e:	bf00      	nop
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	2000003c 	.word	0x2000003c
 800059c:	20000004 	.word	0x20000004

080005a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  return uwTick;
 80005a4:	4b03      	ldr	r3, [pc, #12]	; (80005b4 <HAL_GetTick+0x14>)
 80005a6:	681b      	ldr	r3, [r3, #0]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	2000003c 	.word	0x2000003c

080005b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f003 0307 	and.w	r3, r3, #7
 80005c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <__NVIC_SetPriorityGrouping+0x44>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ce:	68ba      	ldr	r2, [r7, #8]
 80005d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005d4:	4013      	ands	r3, r2
 80005d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ea:	4a04      	ldr	r2, [pc, #16]	; (80005fc <__NVIC_SetPriorityGrouping+0x44>)
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	60d3      	str	r3, [r2, #12]
}
 80005f0:	bf00      	nop
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000604:	4b04      	ldr	r3, [pc, #16]	; (8000618 <__NVIC_GetPriorityGrouping+0x18>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	0a1b      	lsrs	r3, r3, #8
 800060a:	f003 0307 	and.w	r3, r3, #7
}
 800060e:	4618      	mov	r0, r3
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062a:	2b00      	cmp	r3, #0
 800062c:	db0b      	blt.n	8000646 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	f003 021f 	and.w	r2, r3, #31
 8000634:	4907      	ldr	r1, [pc, #28]	; (8000654 <__NVIC_EnableIRQ+0x38>)
 8000636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063a:	095b      	lsrs	r3, r3, #5
 800063c:	2001      	movs	r0, #1
 800063e:	fa00 f202 	lsl.w	r2, r0, r2
 8000642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	e000e100 	.word	0xe000e100

08000658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	6039      	str	r1, [r7, #0]
 8000662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000668:	2b00      	cmp	r3, #0
 800066a:	db0a      	blt.n	8000682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	b2da      	uxtb	r2, r3
 8000670:	490c      	ldr	r1, [pc, #48]	; (80006a4 <__NVIC_SetPriority+0x4c>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	0112      	lsls	r2, r2, #4
 8000678:	b2d2      	uxtb	r2, r2
 800067a:	440b      	add	r3, r1
 800067c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000680:	e00a      	b.n	8000698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4908      	ldr	r1, [pc, #32]	; (80006a8 <__NVIC_SetPriority+0x50>)
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	f003 030f 	and.w	r3, r3, #15
 800068e:	3b04      	subs	r3, #4
 8000690:	0112      	lsls	r2, r2, #4
 8000692:	b2d2      	uxtb	r2, r2
 8000694:	440b      	add	r3, r1
 8000696:	761a      	strb	r2, [r3, #24]
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	e000e100 	.word	0xe000e100
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b089      	sub	sp, #36	; 0x24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	f1c3 0307 	rsb	r3, r3, #7
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	bf28      	it	cs
 80006ca:	2304      	movcs	r3, #4
 80006cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	3304      	adds	r3, #4
 80006d2:	2b06      	cmp	r3, #6
 80006d4:	d902      	bls.n	80006dc <NVIC_EncodePriority+0x30>
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3b03      	subs	r3, #3
 80006da:	e000      	b.n	80006de <NVIC_EncodePriority+0x32>
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e0:	f04f 32ff 	mov.w	r2, #4294967295
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	43da      	mvns	r2, r3
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	401a      	ands	r2, r3
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f4:	f04f 31ff 	mov.w	r1, #4294967295
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
 80006fe:	43d9      	mvns	r1, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	4313      	orrs	r3, r2
         );
}
 8000706:	4618      	mov	r0, r3
 8000708:	3724      	adds	r7, #36	; 0x24
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
	...

08000714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3b01      	subs	r3, #1
 8000720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000724:	d301      	bcc.n	800072a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000726:	2301      	movs	r3, #1
 8000728:	e00f      	b.n	800074a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800072a:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <SysTick_Config+0x40>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3b01      	subs	r3, #1
 8000730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000732:	210f      	movs	r1, #15
 8000734:	f04f 30ff 	mov.w	r0, #4294967295
 8000738:	f7ff ff8e 	bl	8000658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <SysTick_Config+0x40>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <SysTick_Config+0x40>)
 8000744:	2207      	movs	r2, #7
 8000746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	e000e010 	.word	0xe000e010

08000758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ff29 	bl	80005b8 <__NVIC_SetPriorityGrouping>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b086      	sub	sp, #24
 8000772:	af00      	add	r7, sp, #0
 8000774:	4603      	mov	r3, r0
 8000776:	60b9      	str	r1, [r7, #8]
 8000778:	607a      	str	r2, [r7, #4]
 800077a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000780:	f7ff ff3e 	bl	8000600 <__NVIC_GetPriorityGrouping>
 8000784:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	68b9      	ldr	r1, [r7, #8]
 800078a:	6978      	ldr	r0, [r7, #20]
 800078c:	f7ff ff8e 	bl	80006ac <NVIC_EncodePriority>
 8000790:	4602      	mov	r2, r0
 8000792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000796:	4611      	mov	r1, r2
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff5d 	bl	8000658 <__NVIC_SetPriority>
}
 800079e:	bf00      	nop
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b082      	sub	sp, #8
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ff31 	bl	800061c <__NVIC_EnableIRQ>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f7ff ffa2 	bl	8000714 <SysTick_Config>
 80007d0:	4603      	mov	r3, r0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007dc:	b480      	push	{r7}
 80007de:	b087      	sub	sp, #28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007ea:	e17f      	b.n	8000aec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	2101      	movs	r1, #1
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	fa01 f303 	lsl.w	r3, r1, r3
 80007f8:	4013      	ands	r3, r2
 80007fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	f000 8171 	beq.w	8000ae6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	2b02      	cmp	r3, #2
 800080a:	d003      	beq.n	8000814 <HAL_GPIO_Init+0x38>
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	2b12      	cmp	r3, #18
 8000812:	d123      	bne.n	800085c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	08da      	lsrs	r2, r3, #3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3208      	adds	r2, #8
 800081c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000820:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	f003 0307 	and.w	r3, r3, #7
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	220f      	movs	r2, #15
 800082c:	fa02 f303 	lsl.w	r3, r2, r3
 8000830:	43db      	mvns	r3, r3
 8000832:	693a      	ldr	r2, [r7, #16]
 8000834:	4013      	ands	r3, r2
 8000836:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	691a      	ldr	r2, [r3, #16]
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	f003 0307 	and.w	r3, r3, #7
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	fa02 f303 	lsl.w	r3, r2, r3
 8000848:	693a      	ldr	r2, [r7, #16]
 800084a:	4313      	orrs	r3, r2
 800084c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	08da      	lsrs	r2, r3, #3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3208      	adds	r2, #8
 8000856:	6939      	ldr	r1, [r7, #16]
 8000858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	2203      	movs	r2, #3
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	43db      	mvns	r3, r3
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	4013      	ands	r3, r2
 8000872:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	f003 0203 	and.w	r2, r3, #3
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	693a      	ldr	r2, [r7, #16]
 8000886:	4313      	orrs	r3, r2
 8000888:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	693a      	ldr	r2, [r7, #16]
 800088e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d00b      	beq.n	80008b0 <HAL_GPIO_Init+0xd4>
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	2b02      	cmp	r3, #2
 800089e:	d007      	beq.n	80008b0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008a4:	2b11      	cmp	r3, #17
 80008a6:	d003      	beq.n	80008b0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	2b12      	cmp	r3, #18
 80008ae:	d130      	bne.n	8000912 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	2203      	movs	r2, #3
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	43db      	mvns	r3, r3
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	4013      	ands	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	68da      	ldr	r2, [r3, #12]
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	693a      	ldr	r2, [r7, #16]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008e6:	2201      	movs	r2, #1
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	43db      	mvns	r3, r3
 80008f0:	693a      	ldr	r2, [r7, #16]
 80008f2:	4013      	ands	r3, r2
 80008f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	091b      	lsrs	r3, r3, #4
 80008fc:	f003 0201 	and.w	r2, r3, #1
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	4313      	orrs	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	f003 0303 	and.w	r3, r3, #3
 800091a:	2b03      	cmp	r3, #3
 800091c:	d118      	bne.n	8000950 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000922:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000924:	2201      	movs	r2, #1
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	4013      	ands	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	08db      	lsrs	r3, r3, #3
 800093a:	f003 0201 	and.w	r2, r3, #1
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	4313      	orrs	r3, r2
 8000948:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	2203      	movs	r2, #3
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	43db      	mvns	r3, r3
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	4013      	ands	r3, r2
 8000966:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	689a      	ldr	r2, [r3, #8]
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	693a      	ldr	r2, [r7, #16]
 8000976:	4313      	orrs	r3, r2
 8000978:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000988:	2b00      	cmp	r3, #0
 800098a:	f000 80ac 	beq.w	8000ae6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	4b5e      	ldr	r3, [pc, #376]	; (8000b08 <HAL_GPIO_Init+0x32c>)
 8000990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000992:	4a5d      	ldr	r2, [pc, #372]	; (8000b08 <HAL_GPIO_Init+0x32c>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6613      	str	r3, [r2, #96]	; 0x60
 800099a:	4b5b      	ldr	r3, [pc, #364]	; (8000b08 <HAL_GPIO_Init+0x32c>)
 800099c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009a6:	4a59      	ldr	r2, [pc, #356]	; (8000b0c <HAL_GPIO_Init+0x330>)
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	089b      	lsrs	r3, r3, #2
 80009ac:	3302      	adds	r3, #2
 80009ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	f003 0303 	and.w	r3, r3, #3
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	220f      	movs	r2, #15
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43db      	mvns	r3, r3
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	4013      	ands	r3, r2
 80009c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009d0:	d025      	beq.n	8000a1e <HAL_GPIO_Init+0x242>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a4e      	ldr	r2, [pc, #312]	; (8000b10 <HAL_GPIO_Init+0x334>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d01f      	beq.n	8000a1a <HAL_GPIO_Init+0x23e>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a4d      	ldr	r2, [pc, #308]	; (8000b14 <HAL_GPIO_Init+0x338>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d019      	beq.n	8000a16 <HAL_GPIO_Init+0x23a>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a4c      	ldr	r2, [pc, #304]	; (8000b18 <HAL_GPIO_Init+0x33c>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d013      	beq.n	8000a12 <HAL_GPIO_Init+0x236>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a4b      	ldr	r2, [pc, #300]	; (8000b1c <HAL_GPIO_Init+0x340>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d00d      	beq.n	8000a0e <HAL_GPIO_Init+0x232>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a4a      	ldr	r2, [pc, #296]	; (8000b20 <HAL_GPIO_Init+0x344>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d007      	beq.n	8000a0a <HAL_GPIO_Init+0x22e>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a49      	ldr	r2, [pc, #292]	; (8000b24 <HAL_GPIO_Init+0x348>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d101      	bne.n	8000a06 <HAL_GPIO_Init+0x22a>
 8000a02:	2306      	movs	r3, #6
 8000a04:	e00c      	b.n	8000a20 <HAL_GPIO_Init+0x244>
 8000a06:	2307      	movs	r3, #7
 8000a08:	e00a      	b.n	8000a20 <HAL_GPIO_Init+0x244>
 8000a0a:	2305      	movs	r3, #5
 8000a0c:	e008      	b.n	8000a20 <HAL_GPIO_Init+0x244>
 8000a0e:	2304      	movs	r3, #4
 8000a10:	e006      	b.n	8000a20 <HAL_GPIO_Init+0x244>
 8000a12:	2303      	movs	r3, #3
 8000a14:	e004      	b.n	8000a20 <HAL_GPIO_Init+0x244>
 8000a16:	2302      	movs	r3, #2
 8000a18:	e002      	b.n	8000a20 <HAL_GPIO_Init+0x244>
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e000      	b.n	8000a20 <HAL_GPIO_Init+0x244>
 8000a1e:	2300      	movs	r3, #0
 8000a20:	697a      	ldr	r2, [r7, #20]
 8000a22:	f002 0203 	and.w	r2, r2, #3
 8000a26:	0092      	lsls	r2, r2, #2
 8000a28:	4093      	lsls	r3, r2
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a30:	4936      	ldr	r1, [pc, #216]	; (8000b0c <HAL_GPIO_Init+0x330>)
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	089b      	lsrs	r3, r3, #2
 8000a36:	3302      	adds	r3, #2
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a3e:	4b3a      	ldr	r3, [pc, #232]	; (8000b28 <HAL_GPIO_Init+0x34c>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	43db      	mvns	r3, r3
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d003      	beq.n	8000a62 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a62:	4a31      	ldr	r2, [pc, #196]	; (8000b28 <HAL_GPIO_Init+0x34c>)
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000a68:	4b2f      	ldr	r3, [pc, #188]	; (8000b28 <HAL_GPIO_Init+0x34c>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	43db      	mvns	r3, r3
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4013      	ands	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d003      	beq.n	8000a8c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a8c:	4a26      	ldr	r2, [pc, #152]	; (8000b28 <HAL_GPIO_Init+0x34c>)
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <HAL_GPIO_Init+0x34c>)
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d003      	beq.n	8000ab6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ab6:	4a1c      	ldr	r2, [pc, #112]	; (8000b28 <HAL_GPIO_Init+0x34c>)
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000abc:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <HAL_GPIO_Init+0x34c>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d003      	beq.n	8000ae0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ae0:	4a11      	ldr	r2, [pc, #68]	; (8000b28 <HAL_GPIO_Init+0x34c>)
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	fa22 f303 	lsr.w	r3, r2, r3
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f47f ae78 	bne.w	80007ec <HAL_GPIO_Init+0x10>
  }
}
 8000afc:	bf00      	nop
 8000afe:	371c      	adds	r7, #28
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40010000 	.word	0x40010000
 8000b10:	48000400 	.word	0x48000400
 8000b14:	48000800 	.word	0x48000800
 8000b18:	48000c00 	.word	0x48000c00
 8000b1c:	48001000 	.word	0x48001000
 8000b20:	48001400 	.word	0x48001400
 8000b24:	48001800 	.word	0x48001800
 8000b28:	40010400 	.word	0x40010400

08000b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	807b      	strh	r3, [r7, #2]
 8000b38:	4613      	mov	r3, r2
 8000b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b3c:	787b      	ldrb	r3, [r7, #1]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d003      	beq.n	8000b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b42:	887a      	ldrh	r2, [r7, #2]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b48:	e002      	b.n	8000b50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b4a:	887a      	ldrh	r2, [r7, #2]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	695a      	ldr	r2, [r3, #20]
 8000b6c:	887b      	ldrh	r3, [r7, #2]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d003      	beq.n	8000b7c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b74:	887a      	ldrh	r2, [r7, #2]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000b7a:	e002      	b.n	8000b82 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b7c:	887a      	ldrh	r2, [r7, #2]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	619a      	str	r2, [r3, #24]
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b9c:	695a      	ldr	r2, [r3, #20]
 8000b9e:	88fb      	ldrh	r3, [r7, #6]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d006      	beq.n	8000bb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ba6:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ba8:	88fb      	ldrh	r3, [r7, #6]
 8000baa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bac:	88fb      	ldrh	r3, [r7, #6]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f002 fc84 	bl	80034bc <HAL_GPIO_EXTI_Callback>
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40010400 	.word	0x40010400

08000bc0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40007000 	.word	0x40007000

08000bdc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bea:	d130      	bne.n	8000c4e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bec:	4b23      	ldr	r3, [pc, #140]	; (8000c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bf8:	d038      	beq.n	8000c6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bfa:	4b20      	ldr	r3, [pc, #128]	; (8000c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c02:	4a1e      	ldr	r2, [pc, #120]	; (8000c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c0a:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2232      	movs	r2, #50	; 0x32
 8000c10:	fb02 f303 	mul.w	r3, r2, r3
 8000c14:	4a1b      	ldr	r2, [pc, #108]	; (8000c84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c16:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1a:	0c9b      	lsrs	r3, r3, #18
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c20:	e002      	b.n	8000c28 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	3b01      	subs	r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c28:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c2a:	695b      	ldr	r3, [r3, #20]
 8000c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c34:	d102      	bne.n	8000c3c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d1f2      	bne.n	8000c22 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c3e:	695b      	ldr	r3, [r3, #20]
 8000c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c48:	d110      	bne.n	8000c6c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	e00f      	b.n	8000c6e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c5a:	d007      	beq.n	8000c6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c64:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40007000 	.word	0x40007000
 8000c80:	20000014 	.word	0x20000014
 8000c84:	431bde83 	.word	0x431bde83

08000c88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d101      	bne.n	8000c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e39d      	b.n	80013d6 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c9a:	4ba4      	ldr	r3, [pc, #656]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f003 030c 	and.w	r3, r3, #12
 8000ca2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ca4:	4ba1      	ldr	r3, [pc, #644]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	f003 0303 	and.w	r3, r3, #3
 8000cac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f003 0310 	and.w	r3, r3, #16
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f000 80e1 	beq.w	8000e7e <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d007      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x4a>
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	2b0c      	cmp	r3, #12
 8000cc6:	f040 8088 	bne.w	8000dda <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	f040 8084 	bne.w	8000dda <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000cd2:	4b96      	ldr	r3, [pc, #600]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d005      	beq.n	8000cea <HAL_RCC_OscConfig+0x62>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d101      	bne.n	8000cea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e375      	b.n	80013d6 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6a1a      	ldr	r2, [r3, #32]
 8000cee:	4b8f      	ldr	r3, [pc, #572]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 0308 	and.w	r3, r3, #8
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d004      	beq.n	8000d04 <HAL_RCC_OscConfig+0x7c>
 8000cfa:	4b8c      	ldr	r3, [pc, #560]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d02:	e005      	b.n	8000d10 <HAL_RCC_OscConfig+0x88>
 8000d04:	4b89      	ldr	r3, [pc, #548]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d0a:	091b      	lsrs	r3, r3, #4
 8000d0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d223      	bcs.n	8000d5c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6a1b      	ldr	r3, [r3, #32]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 fd09 	bl	8001730 <RCC_SetFlashLatencyFromMSIRange>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	e356      	b.n	80013d6 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d28:	4b80      	ldr	r3, [pc, #512]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a7f      	ldr	r2, [pc, #508]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000d2e:	f043 0308 	orr.w	r3, r3, #8
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	4b7d      	ldr	r3, [pc, #500]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6a1b      	ldr	r3, [r3, #32]
 8000d40:	497a      	ldr	r1, [pc, #488]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000d42:	4313      	orrs	r3, r2
 8000d44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d46:	4b79      	ldr	r3, [pc, #484]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	021b      	lsls	r3, r3, #8
 8000d54:	4975      	ldr	r1, [pc, #468]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000d56:	4313      	orrs	r3, r2
 8000d58:	604b      	str	r3, [r1, #4]
 8000d5a:	e022      	b.n	8000da2 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d5c:	4b73      	ldr	r3, [pc, #460]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a72      	ldr	r2, [pc, #456]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000d62:	f043 0308 	orr.w	r3, r3, #8
 8000d66:	6013      	str	r3, [r2, #0]
 8000d68:	4b70      	ldr	r3, [pc, #448]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a1b      	ldr	r3, [r3, #32]
 8000d74:	496d      	ldr	r1, [pc, #436]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000d76:	4313      	orrs	r3, r2
 8000d78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d7a:	4b6c      	ldr	r3, [pc, #432]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	021b      	lsls	r3, r3, #8
 8000d88:	4968      	ldr	r1, [pc, #416]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a1b      	ldr	r3, [r3, #32]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 fccc 	bl	8001730 <RCC_SetFlashLatencyFromMSIRange>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e319      	b.n	80013d6 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000da2:	f000 fc03 	bl	80015ac <HAL_RCC_GetSysClockFreq>
 8000da6:	4601      	mov	r1, r0
 8000da8:	4b60      	ldr	r3, [pc, #384]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	091b      	lsrs	r3, r3, #4
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	4a5f      	ldr	r2, [pc, #380]	; (8000f30 <HAL_RCC_OscConfig+0x2a8>)
 8000db4:	5cd3      	ldrb	r3, [r2, r3]
 8000db6:	f003 031f 	and.w	r3, r3, #31
 8000dba:	fa21 f303 	lsr.w	r3, r1, r3
 8000dbe:	4a5d      	ldr	r2, [pc, #372]	; (8000f34 <HAL_RCC_OscConfig+0x2ac>)
 8000dc0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000dc2:	4b5d      	ldr	r3, [pc, #372]	; (8000f38 <HAL_RCC_OscConfig+0x2b0>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fb9e 	bl	8000508 <HAL_InitTick>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d052      	beq.n	8000e7c <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	e2fd      	b.n	80013d6 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d032      	beq.n	8000e48 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000de2:	4b52      	ldr	r3, [pc, #328]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a51      	ldr	r2, [pc, #324]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000dee:	f7ff fbd7 	bl	80005a0 <HAL_GetTick>
 8000df2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000df4:	e008      	b.n	8000e08 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000df6:	f7ff fbd3 	bl	80005a0 <HAL_GetTick>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d901      	bls.n	8000e08 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8000e04:	2303      	movs	r3, #3
 8000e06:	e2e6      	b.n	80013d6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e08:	4b48      	ldr	r3, [pc, #288]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 0302 	and.w	r3, r3, #2
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0f0      	beq.n	8000df6 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e14:	4b45      	ldr	r3, [pc, #276]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a44      	ldr	r2, [pc, #272]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000e1a:	f043 0308 	orr.w	r3, r3, #8
 8000e1e:	6013      	str	r3, [r2, #0]
 8000e20:	4b42      	ldr	r3, [pc, #264]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6a1b      	ldr	r3, [r3, #32]
 8000e2c:	493f      	ldr	r1, [pc, #252]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e32:	4b3e      	ldr	r3, [pc, #248]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	021b      	lsls	r3, r3, #8
 8000e40:	493a      	ldr	r1, [pc, #232]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000e42:	4313      	orrs	r3, r2
 8000e44:	604b      	str	r3, [r1, #4]
 8000e46:	e01a      	b.n	8000e7e <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e48:	4b38      	ldr	r3, [pc, #224]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a37      	ldr	r2, [pc, #220]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000e4e:	f023 0301 	bic.w	r3, r3, #1
 8000e52:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e54:	f7ff fba4 	bl	80005a0 <HAL_GetTick>
 8000e58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e5a:	e008      	b.n	8000e6e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e5c:	f7ff fba0 	bl	80005a0 <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d901      	bls.n	8000e6e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e2b3      	b.n	80013d6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e6e:	4b2f      	ldr	r3, [pc, #188]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d1f0      	bne.n	8000e5c <HAL_RCC_OscConfig+0x1d4>
 8000e7a:	e000      	b.n	8000e7e <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d074      	beq.n	8000f74 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	2b08      	cmp	r3, #8
 8000e8e:	d005      	beq.n	8000e9c <HAL_RCC_OscConfig+0x214>
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	2b0c      	cmp	r3, #12
 8000e94:	d10e      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	d10b      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e9c:	4b23      	ldr	r3, [pc, #140]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d064      	beq.n	8000f72 <HAL_RCC_OscConfig+0x2ea>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d160      	bne.n	8000f72 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e290      	b.n	80013d6 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ebc:	d106      	bne.n	8000ecc <HAL_RCC_OscConfig+0x244>
 8000ebe:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a1a      	ldr	r2, [pc, #104]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	e01d      	b.n	8000f08 <HAL_RCC_OscConfig+0x280>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ed4:	d10c      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x268>
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a14      	ldr	r2, [pc, #80]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a11      	ldr	r2, [pc, #68]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	e00b      	b.n	8000f08 <HAL_RCC_OscConfig+0x280>
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <HAL_RCC_OscConfig+0x2a4>)
 8000f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d01c      	beq.n	8000f4a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f10:	f7ff fb46 	bl	80005a0 <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f16:	e011      	b.n	8000f3c <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f18:	f7ff fb42 	bl	80005a0 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b64      	cmp	r3, #100	; 0x64
 8000f24:	d90a      	bls.n	8000f3c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e255      	b.n	80013d6 <HAL_RCC_OscConfig+0x74e>
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	08003b78 	.word	0x08003b78
 8000f34:	20000014 	.word	0x20000014
 8000f38:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f3c:	4bae      	ldr	r3, [pc, #696]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d0e7      	beq.n	8000f18 <HAL_RCC_OscConfig+0x290>
 8000f48:	e014      	b.n	8000f74 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f4a:	f7ff fb29 	bl	80005a0 <HAL_GetTick>
 8000f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f50:	e008      	b.n	8000f64 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f52:	f7ff fb25 	bl	80005a0 <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	2b64      	cmp	r3, #100	; 0x64
 8000f5e:	d901      	bls.n	8000f64 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8000f60:	2303      	movs	r3, #3
 8000f62:	e238      	b.n	80013d6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f64:	4ba4      	ldr	r3, [pc, #656]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1f0      	bne.n	8000f52 <HAL_RCC_OscConfig+0x2ca>
 8000f70:	e000      	b.n	8000f74 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f72:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d060      	beq.n	8001042 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	d005      	beq.n	8000f92 <HAL_RCC_OscConfig+0x30a>
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	2b0c      	cmp	r3, #12
 8000f8a:	d119      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d116      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f92:	4b99      	ldr	r3, [pc, #612]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d005      	beq.n	8000faa <HAL_RCC_OscConfig+0x322>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e215      	b.n	80013d6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000faa:	4b93      	ldr	r3, [pc, #588]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	061b      	lsls	r3, r3, #24
 8000fb8:	498f      	ldr	r1, [pc, #572]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fbe:	e040      	b.n	8001042 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d023      	beq.n	8001010 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fc8:	4b8b      	ldr	r3, [pc, #556]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a8a      	ldr	r2, [pc, #552]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 8000fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fae4 	bl	80005a0 <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fdc:	f7ff fae0 	bl	80005a0 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e1f3      	b.n	80013d6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fee:	4b82      	ldr	r3, [pc, #520]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d0f0      	beq.n	8000fdc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ffa:	4b7f      	ldr	r3, [pc, #508]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	061b      	lsls	r3, r3, #24
 8001008:	497b      	ldr	r1, [pc, #492]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 800100a:	4313      	orrs	r3, r2
 800100c:	604b      	str	r3, [r1, #4]
 800100e:	e018      	b.n	8001042 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001010:	4b79      	ldr	r3, [pc, #484]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a78      	ldr	r2, [pc, #480]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 8001016:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800101a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800101c:	f7ff fac0 	bl	80005a0 <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001024:	f7ff fabc 	bl	80005a0 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e1cf      	b.n	80013d6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001036:	4b70      	ldr	r3, [pc, #448]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1f0      	bne.n	8001024 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0308 	and.w	r3, r3, #8
 800104a:	2b00      	cmp	r3, #0
 800104c:	d03c      	beq.n	80010c8 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d01c      	beq.n	8001090 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001056:	4b68      	ldr	r3, [pc, #416]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 8001058:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800105c:	4a66      	ldr	r2, [pc, #408]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001066:	f7ff fa9b 	bl	80005a0 <HAL_GetTick>
 800106a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800106c:	e008      	b.n	8001080 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800106e:	f7ff fa97 	bl	80005a0 <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d901      	bls.n	8001080 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e1aa      	b.n	80013d6 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001080:	4b5d      	ldr	r3, [pc, #372]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 8001082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d0ef      	beq.n	800106e <HAL_RCC_OscConfig+0x3e6>
 800108e:	e01b      	b.n	80010c8 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001090:	4b59      	ldr	r3, [pc, #356]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 8001092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001096:	4a58      	ldr	r2, [pc, #352]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 8001098:	f023 0301 	bic.w	r3, r3, #1
 800109c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010a0:	f7ff fa7e 	bl	80005a0 <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010a8:	f7ff fa7a 	bl	80005a0 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e18d      	b.n	80013d6 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010ba:	4b4f      	ldr	r3, [pc, #316]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 80010bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1ef      	bne.n	80010a8 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f000 80a5 	beq.w	8001220 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010d6:	2300      	movs	r3, #0
 80010d8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80010da:	4b47      	ldr	r3, [pc, #284]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 80010dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d10d      	bne.n	8001102 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 80010e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ea:	4a43      	ldr	r2, [pc, #268]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 80010ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f0:	6593      	str	r3, [r2, #88]	; 0x58
 80010f2:	4b41      	ldr	r3, [pc, #260]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 80010f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010fe:	2301      	movs	r3, #1
 8001100:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001102:	4b3e      	ldr	r3, [pc, #248]	; (80011fc <HAL_RCC_OscConfig+0x574>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110a:	2b00      	cmp	r3, #0
 800110c:	d118      	bne.n	8001140 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800110e:	4b3b      	ldr	r3, [pc, #236]	; (80011fc <HAL_RCC_OscConfig+0x574>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a3a      	ldr	r2, [pc, #232]	; (80011fc <HAL_RCC_OscConfig+0x574>)
 8001114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001118:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800111a:	f7ff fa41 	bl	80005a0 <HAL_GetTick>
 800111e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001120:	e008      	b.n	8001134 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001122:	f7ff fa3d 	bl	80005a0 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e150      	b.n	80013d6 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001134:	4b31      	ldr	r3, [pc, #196]	; (80011fc <HAL_RCC_OscConfig+0x574>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0f0      	beq.n	8001122 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d108      	bne.n	800115a <HAL_RCC_OscConfig+0x4d2>
 8001148:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 800114a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800114e:	4a2a      	ldr	r2, [pc, #168]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001158:	e024      	b.n	80011a4 <HAL_RCC_OscConfig+0x51c>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	2b05      	cmp	r3, #5
 8001160:	d110      	bne.n	8001184 <HAL_RCC_OscConfig+0x4fc>
 8001162:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 8001164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001168:	4a23      	ldr	r2, [pc, #140]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 800116a:	f043 0304 	orr.w	r3, r3, #4
 800116e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001172:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 8001174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001178:	4a1f      	ldr	r2, [pc, #124]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001182:	e00f      	b.n	80011a4 <HAL_RCC_OscConfig+0x51c>
 8001184:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 8001186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800118a:	4a1b      	ldr	r2, [pc, #108]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 800118c:	f023 0301 	bic.w	r3, r3, #1
 8001190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001194:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 8001196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800119a:	4a17      	ldr	r2, [pc, #92]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 800119c:	f023 0304 	bic.w	r3, r3, #4
 80011a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d016      	beq.n	80011da <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ac:	f7ff f9f8 	bl	80005a0 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011b2:	e00a      	b.n	80011ca <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011b4:	f7ff f9f4 	bl	80005a0 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e105      	b.n	80013d6 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <HAL_RCC_OscConfig+0x570>)
 80011cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0ed      	beq.n	80011b4 <HAL_RCC_OscConfig+0x52c>
 80011d8:	e019      	b.n	800120e <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011da:	f7ff f9e1 	bl	80005a0 <HAL_GetTick>
 80011de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011e0:	e00e      	b.n	8001200 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011e2:	f7ff f9dd 	bl	80005a0 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d905      	bls.n	8001200 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e0ee      	b.n	80013d6 <HAL_RCC_OscConfig+0x74e>
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001200:	4b77      	ldr	r3, [pc, #476]	; (80013e0 <HAL_RCC_OscConfig+0x758>)
 8001202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1e9      	bne.n	80011e2 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800120e:	7ffb      	ldrb	r3, [r7, #31]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d105      	bne.n	8001220 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001214:	4b72      	ldr	r3, [pc, #456]	; (80013e0 <HAL_RCC_OscConfig+0x758>)
 8001216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001218:	4a71      	ldr	r2, [pc, #452]	; (80013e0 <HAL_RCC_OscConfig+0x758>)
 800121a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800121e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 80d5 	beq.w	80013d4 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	2b0c      	cmp	r3, #12
 800122e:	f000 808e 	beq.w	800134e <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001236:	2b02      	cmp	r3, #2
 8001238:	d15b      	bne.n	80012f2 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800123a:	4b69      	ldr	r3, [pc, #420]	; (80013e0 <HAL_RCC_OscConfig+0x758>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a68      	ldr	r2, [pc, #416]	; (80013e0 <HAL_RCC_OscConfig+0x758>)
 8001240:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001246:	f7ff f9ab 	bl	80005a0 <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800124e:	f7ff f9a7 	bl	80005a0 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e0ba      	b.n	80013d6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001260:	4b5f      	ldr	r3, [pc, #380]	; (80013e0 <HAL_RCC_OscConfig+0x758>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1f0      	bne.n	800124e <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800126c:	4b5c      	ldr	r3, [pc, #368]	; (80013e0 <HAL_RCC_OscConfig+0x758>)
 800126e:	68da      	ldr	r2, [r3, #12]
 8001270:	4b5c      	ldr	r3, [pc, #368]	; (80013e4 <HAL_RCC_OscConfig+0x75c>)
 8001272:	4013      	ands	r3, r2
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800127c:	3a01      	subs	r2, #1
 800127e:	0112      	lsls	r2, r2, #4
 8001280:	4311      	orrs	r1, r2
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001286:	0212      	lsls	r2, r2, #8
 8001288:	4311      	orrs	r1, r2
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800128e:	0852      	lsrs	r2, r2, #1
 8001290:	3a01      	subs	r2, #1
 8001292:	0552      	lsls	r2, r2, #21
 8001294:	4311      	orrs	r1, r2
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800129a:	0852      	lsrs	r2, r2, #1
 800129c:	3a01      	subs	r2, #1
 800129e:	0652      	lsls	r2, r2, #25
 80012a0:	4311      	orrs	r1, r2
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80012a6:	0912      	lsrs	r2, r2, #4
 80012a8:	0452      	lsls	r2, r2, #17
 80012aa:	430a      	orrs	r2, r1
 80012ac:	494c      	ldr	r1, [pc, #304]	; (80013e0 <HAL_RCC_OscConfig+0x758>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012b2:	4b4b      	ldr	r3, [pc, #300]	; (80013e0 <HAL_RCC_OscConfig+0x758>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a4a      	ldr	r2, [pc, #296]	; (80013e0 <HAL_RCC_OscConfig+0x758>)
 80012b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012bc:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80012be:	4b48      	ldr	r3, [pc, #288]	; (80013e0 <HAL_RCC_OscConfig+0x758>)
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	4a47      	ldr	r2, [pc, #284]	; (80013e0 <HAL_RCC_OscConfig+0x758>)
 80012c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012c8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ca:	f7ff f969 	bl	80005a0 <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012d2:	f7ff f965 	bl	80005a0 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e078      	b.n	80013d6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012e4:	4b3e      	ldr	r3, [pc, #248]	; (80013e0 <HAL_RCC_OscConfig+0x758>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d0f0      	beq.n	80012d2 <HAL_RCC_OscConfig+0x64a>
 80012f0:	e070      	b.n	80013d4 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f2:	4b3b      	ldr	r3, [pc, #236]	; (80013e0 <HAL_RCC_OscConfig+0x758>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a3a      	ldr	r2, [pc, #232]	; (80013e0 <HAL_RCC_OscConfig+0x758>)
 80012f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012fc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80012fe:	4b38      	ldr	r3, [pc, #224]	; (80013e0 <HAL_RCC_OscConfig+0x758>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d105      	bne.n	8001316 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800130a:	4b35      	ldr	r3, [pc, #212]	; (80013e0 <HAL_RCC_OscConfig+0x758>)
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	4a34      	ldr	r2, [pc, #208]	; (80013e0 <HAL_RCC_OscConfig+0x758>)
 8001310:	f023 0303 	bic.w	r3, r3, #3
 8001314:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001316:	4b32      	ldr	r3, [pc, #200]	; (80013e0 <HAL_RCC_OscConfig+0x758>)
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	4a31      	ldr	r2, [pc, #196]	; (80013e0 <HAL_RCC_OscConfig+0x758>)
 800131c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001324:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001326:	f7ff f93b 	bl	80005a0 <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800132e:	f7ff f937 	bl	80005a0 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e04a      	b.n	80013d6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001340:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <HAL_RCC_OscConfig+0x758>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1f0      	bne.n	800132e <HAL_RCC_OscConfig+0x6a6>
 800134c:	e042      	b.n	80013d4 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001352:	2b01      	cmp	r3, #1
 8001354:	d101      	bne.n	800135a <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e03d      	b.n	80013d6 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800135a:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <HAL_RCC_OscConfig+0x758>)
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	f003 0203 	and.w	r2, r3, #3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136a:	429a      	cmp	r2, r3
 800136c:	d130      	bne.n	80013d0 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001378:	3b01      	subs	r3, #1
 800137a:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800137c:	429a      	cmp	r2, r3
 800137e:	d127      	bne.n	80013d0 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800138a:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800138c:	429a      	cmp	r2, r3
 800138e:	d11f      	bne.n	80013d0 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800139a:	2a07      	cmp	r2, #7
 800139c:	bf14      	ite	ne
 800139e:	2201      	movne	r2, #1
 80013a0:	2200      	moveq	r2, #0
 80013a2:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d113      	bne.n	80013d0 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013b2:	085b      	lsrs	r3, r3, #1
 80013b4:	3b01      	subs	r3, #1
 80013b6:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d109      	bne.n	80013d0 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	085b      	lsrs	r3, r3, #1
 80013c8:	3b01      	subs	r3, #1
 80013ca:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d001      	beq.n	80013d4 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e000      	b.n	80013d6 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3720      	adds	r7, #32
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40021000 	.word	0x40021000
 80013e4:	f99d808c 	.word	0xf99d808c

080013e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e0c8      	b.n	800158e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013fc:	4b66      	ldr	r3, [pc, #408]	; (8001598 <HAL_RCC_ClockConfig+0x1b0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d910      	bls.n	800142c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800140a:	4b63      	ldr	r3, [pc, #396]	; (8001598 <HAL_RCC_ClockConfig+0x1b0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f023 0207 	bic.w	r2, r3, #7
 8001412:	4961      	ldr	r1, [pc, #388]	; (8001598 <HAL_RCC_ClockConfig+0x1b0>)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	4313      	orrs	r3, r2
 8001418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800141a:	4b5f      	ldr	r3, [pc, #380]	; (8001598 <HAL_RCC_ClockConfig+0x1b0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	429a      	cmp	r2, r3
 8001426:	d001      	beq.n	800142c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e0b0      	b.n	800158e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d04c      	beq.n	80014d2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b03      	cmp	r3, #3
 800143e:	d107      	bne.n	8001450 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001440:	4b56      	ldr	r3, [pc, #344]	; (800159c <HAL_RCC_ClockConfig+0x1b4>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d121      	bne.n	8001490 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e09e      	b.n	800158e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2b02      	cmp	r3, #2
 8001456:	d107      	bne.n	8001468 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001458:	4b50      	ldr	r3, [pc, #320]	; (800159c <HAL_RCC_ClockConfig+0x1b4>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d115      	bne.n	8001490 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e092      	b.n	800158e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d107      	bne.n	8001480 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001470:	4b4a      	ldr	r3, [pc, #296]	; (800159c <HAL_RCC_ClockConfig+0x1b4>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d109      	bne.n	8001490 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e086      	b.n	800158e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001480:	4b46      	ldr	r3, [pc, #280]	; (800159c <HAL_RCC_ClockConfig+0x1b4>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e07e      	b.n	800158e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001490:	4b42      	ldr	r3, [pc, #264]	; (800159c <HAL_RCC_ClockConfig+0x1b4>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f023 0203 	bic.w	r2, r3, #3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	493f      	ldr	r1, [pc, #252]	; (800159c <HAL_RCC_ClockConfig+0x1b4>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014a2:	f7ff f87d 	bl	80005a0 <HAL_GetTick>
 80014a6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014a8:	e00a      	b.n	80014c0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014aa:	f7ff f879 	bl	80005a0 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e066      	b.n	800158e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c0:	4b36      	ldr	r3, [pc, #216]	; (800159c <HAL_RCC_ClockConfig+0x1b4>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 020c 	and.w	r2, r3, #12
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d1eb      	bne.n	80014aa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d008      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014de:	4b2f      	ldr	r3, [pc, #188]	; (800159c <HAL_RCC_ClockConfig+0x1b4>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	492c      	ldr	r1, [pc, #176]	; (800159c <HAL_RCC_ClockConfig+0x1b4>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014f0:	4b29      	ldr	r3, [pc, #164]	; (8001598 <HAL_RCC_ClockConfig+0x1b0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d210      	bcs.n	8001520 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fe:	4b26      	ldr	r3, [pc, #152]	; (8001598 <HAL_RCC_ClockConfig+0x1b0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f023 0207 	bic.w	r2, r3, #7
 8001506:	4924      	ldr	r1, [pc, #144]	; (8001598 <HAL_RCC_ClockConfig+0x1b0>)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	4313      	orrs	r3, r2
 800150c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800150e:	4b22      	ldr	r3, [pc, #136]	; (8001598 <HAL_RCC_ClockConfig+0x1b0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	429a      	cmp	r2, r3
 800151a:	d001      	beq.n	8001520 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e036      	b.n	800158e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	d008      	beq.n	800153e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <HAL_RCC_ClockConfig+0x1b4>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	4918      	ldr	r1, [pc, #96]	; (800159c <HAL_RCC_ClockConfig+0x1b4>)
 800153a:	4313      	orrs	r3, r2
 800153c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	2b00      	cmp	r3, #0
 8001548:	d009      	beq.n	800155e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800154a:	4b14      	ldr	r3, [pc, #80]	; (800159c <HAL_RCC_ClockConfig+0x1b4>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	4910      	ldr	r1, [pc, #64]	; (800159c <HAL_RCC_ClockConfig+0x1b4>)
 800155a:	4313      	orrs	r3, r2
 800155c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800155e:	f000 f825 	bl	80015ac <HAL_RCC_GetSysClockFreq>
 8001562:	4601      	mov	r1, r0
 8001564:	4b0d      	ldr	r3, [pc, #52]	; (800159c <HAL_RCC_ClockConfig+0x1b4>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	091b      	lsrs	r3, r3, #4
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	4a0c      	ldr	r2, [pc, #48]	; (80015a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001570:	5cd3      	ldrb	r3, [r2, r3]
 8001572:	f003 031f 	and.w	r3, r3, #31
 8001576:	fa21 f303 	lsr.w	r3, r1, r3
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <HAL_RCC_ClockConfig+0x1bc>)
 800157c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800157e:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe ffc0 	bl	8000508 <HAL_InitTick>
 8001588:	4603      	mov	r3, r0
 800158a:	72fb      	strb	r3, [r7, #11]

  return status;
 800158c:	7afb      	ldrb	r3, [r7, #11]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40022000 	.word	0x40022000
 800159c:	40021000 	.word	0x40021000
 80015a0:	08003b78 	.word	0x08003b78
 80015a4:	20000014 	.word	0x20000014
 80015a8:	20000000 	.word	0x20000000

080015ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b089      	sub	sp, #36	; 0x24
 80015b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
 80015b6:	2300      	movs	r3, #0
 80015b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ba:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 030c 	and.w	r3, r3, #12
 80015c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015c4:	4b3a      	ldr	r3, [pc, #232]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <HAL_RCC_GetSysClockFreq+0x34>
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	2b0c      	cmp	r3, #12
 80015d8:	d121      	bne.n	800161e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d11e      	bne.n	800161e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80015e0:	4b33      	ldr	r3, [pc, #204]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d107      	bne.n	80015fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80015ec:	4b30      	ldr	r3, [pc, #192]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80015ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015f2:	0a1b      	lsrs	r3, r3, #8
 80015f4:	f003 030f 	and.w	r3, r3, #15
 80015f8:	61fb      	str	r3, [r7, #28]
 80015fa:	e005      	b.n	8001608 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80015fc:	4b2c      	ldr	r3, [pc, #176]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	091b      	lsrs	r3, r3, #4
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001608:	4a2a      	ldr	r2, [pc, #168]	; (80016b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001610:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10d      	bne.n	8001634 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800161c:	e00a      	b.n	8001634 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	2b04      	cmp	r3, #4
 8001622:	d102      	bne.n	800162a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001624:	4b24      	ldr	r3, [pc, #144]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001626:	61bb      	str	r3, [r7, #24]
 8001628:	e004      	b.n	8001634 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	2b08      	cmp	r3, #8
 800162e:	d101      	bne.n	8001634 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001630:	4b22      	ldr	r3, [pc, #136]	; (80016bc <HAL_RCC_GetSysClockFreq+0x110>)
 8001632:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	2b0c      	cmp	r3, #12
 8001638:	d133      	bne.n	80016a2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800163a:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x104>)
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d002      	beq.n	8001650 <HAL_RCC_GetSysClockFreq+0xa4>
 800164a:	2b03      	cmp	r3, #3
 800164c:	d003      	beq.n	8001656 <HAL_RCC_GetSysClockFreq+0xaa>
 800164e:	e005      	b.n	800165c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001650:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001652:	617b      	str	r3, [r7, #20]
      break;
 8001654:	e005      	b.n	8001662 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001656:	4b19      	ldr	r3, [pc, #100]	; (80016bc <HAL_RCC_GetSysClockFreq+0x110>)
 8001658:	617b      	str	r3, [r7, #20]
      break;
 800165a:	e002      	b.n	8001662 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	617b      	str	r3, [r7, #20]
      break;
 8001660:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001662:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	091b      	lsrs	r3, r3, #4
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	3301      	adds	r3, #1
 800166e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	fb02 f203 	mul.w	r2, r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	fbb2 f3f3 	udiv	r3, r2, r3
 8001686:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x104>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	0e5b      	lsrs	r3, r3, #25
 800168e:	f003 0303 	and.w	r3, r3, #3
 8001692:	3301      	adds	r3, #1
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80016a2:	69bb      	ldr	r3, [r7, #24]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3724      	adds	r7, #36	; 0x24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	40021000 	.word	0x40021000
 80016b4:	08003b90 	.word	0x08003b90
 80016b8:	00f42400 	.word	0x00f42400
 80016bc:	007a1200 	.word	0x007a1200

080016c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016c4:	4b03      	ldr	r3, [pc, #12]	; (80016d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80016c6:	681b      	ldr	r3, [r3, #0]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	20000014 	.word	0x20000014

080016d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80016dc:	f7ff fff0 	bl	80016c0 <HAL_RCC_GetHCLKFreq>
 80016e0:	4601      	mov	r1, r0
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	0a1b      	lsrs	r3, r3, #8
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	4a04      	ldr	r2, [pc, #16]	; (8001700 <HAL_RCC_GetPCLK1Freq+0x28>)
 80016ee:	5cd3      	ldrb	r3, [r2, r3]
 80016f0:	f003 031f 	and.w	r3, r3, #31
 80016f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40021000 	.word	0x40021000
 8001700:	08003b88 	.word	0x08003b88

08001704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001708:	f7ff ffda 	bl	80016c0 <HAL_RCC_GetHCLKFreq>
 800170c:	4601      	mov	r1, r0
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	0adb      	lsrs	r3, r3, #11
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <HAL_RCC_GetPCLK2Freq+0x28>)
 800171a:	5cd3      	ldrb	r3, [r2, r3]
 800171c:	f003 031f 	and.w	r3, r3, #31
 8001720:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001724:	4618      	mov	r0, r3
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40021000 	.word	0x40021000
 800172c:	08003b88 	.word	0x08003b88

08001730 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001738:	2300      	movs	r3, #0
 800173a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800173c:	4b2a      	ldr	r3, [pc, #168]	; (80017e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800173e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001748:	f7ff fa3a 	bl	8000bc0 <HAL_PWREx_GetVoltageRange>
 800174c:	6178      	str	r0, [r7, #20]
 800174e:	e014      	b.n	800177a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001750:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001754:	4a24      	ldr	r2, [pc, #144]	; (80017e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175a:	6593      	str	r3, [r2, #88]	; 0x58
 800175c:	4b22      	ldr	r3, [pc, #136]	; (80017e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800175e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001768:	f7ff fa2a 	bl	8000bc0 <HAL_PWREx_GetVoltageRange>
 800176c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800176e:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001772:	4a1d      	ldr	r2, [pc, #116]	; (80017e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001778:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001780:	d10b      	bne.n	800179a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b80      	cmp	r3, #128	; 0x80
 8001786:	d919      	bls.n	80017bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2ba0      	cmp	r3, #160	; 0xa0
 800178c:	d902      	bls.n	8001794 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800178e:	2302      	movs	r3, #2
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	e013      	b.n	80017bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001794:	2301      	movs	r3, #1
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	e010      	b.n	80017bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b80      	cmp	r3, #128	; 0x80
 800179e:	d902      	bls.n	80017a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80017a0:	2303      	movs	r3, #3
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	e00a      	b.n	80017bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b80      	cmp	r3, #128	; 0x80
 80017aa:	d102      	bne.n	80017b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017ac:	2302      	movs	r3, #2
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	e004      	b.n	80017bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b70      	cmp	r3, #112	; 0x70
 80017b6:	d101      	bne.n	80017bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017b8:	2301      	movs	r3, #1
 80017ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f023 0207 	bic.w	r2, r3, #7
 80017c4:	4909      	ldr	r1, [pc, #36]	; (80017ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80017cc:	4b07      	ldr	r3, [pc, #28]	; (80017ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d001      	beq.n	80017de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40022000 	.word	0x40022000

080017f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80017f8:	2300      	movs	r3, #0
 80017fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80017fc:	2300      	movs	r3, #0
 80017fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001808:	2b00      	cmp	r3, #0
 800180a:	d03f      	beq.n	800188c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001810:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001814:	d01c      	beq.n	8001850 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001816:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800181a:	d802      	bhi.n	8001822 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00e      	beq.n	800183e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001820:	e01f      	b.n	8001862 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001822:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001826:	d003      	beq.n	8001830 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001828:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800182c:	d01c      	beq.n	8001868 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800182e:	e018      	b.n	8001862 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001830:	4b85      	ldr	r3, [pc, #532]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	4a84      	ldr	r2, [pc, #528]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800183a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800183c:	e015      	b.n	800186a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3304      	adds	r3, #4
 8001842:	2100      	movs	r1, #0
 8001844:	4618      	mov	r0, r3
 8001846:	f000 fab9 	bl	8001dbc <RCCEx_PLLSAI1_Config>
 800184a:	4603      	mov	r3, r0
 800184c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800184e:	e00c      	b.n	800186a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3320      	adds	r3, #32
 8001854:	2100      	movs	r1, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f000 fba0 	bl	8001f9c <RCCEx_PLLSAI2_Config>
 800185c:	4603      	mov	r3, r0
 800185e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001860:	e003      	b.n	800186a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	74fb      	strb	r3, [r7, #19]
      break;
 8001866:	e000      	b.n	800186a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001868:	bf00      	nop
    }

    if(ret == HAL_OK)
 800186a:	7cfb      	ldrb	r3, [r7, #19]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d10b      	bne.n	8001888 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001870:	4b75      	ldr	r3, [pc, #468]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001876:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800187e:	4972      	ldr	r1, [pc, #456]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001880:	4313      	orrs	r3, r2
 8001882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001886:	e001      	b.n	800188c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001888:	7cfb      	ldrb	r3, [r7, #19]
 800188a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d03f      	beq.n	8001918 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800189c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018a0:	d01c      	beq.n	80018dc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80018a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018a6:	d802      	bhi.n	80018ae <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00e      	beq.n	80018ca <HAL_RCCEx_PeriphCLKConfig+0xda>
 80018ac:	e01f      	b.n	80018ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80018ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018b2:	d003      	beq.n	80018bc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80018b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80018b8:	d01c      	beq.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80018ba:	e018      	b.n	80018ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80018bc:	4b62      	ldr	r3, [pc, #392]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	4a61      	ldr	r2, [pc, #388]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80018c8:	e015      	b.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3304      	adds	r3, #4
 80018ce:	2100      	movs	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f000 fa73 	bl	8001dbc <RCCEx_PLLSAI1_Config>
 80018d6:	4603      	mov	r3, r0
 80018d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80018da:	e00c      	b.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3320      	adds	r3, #32
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 fb5a 	bl	8001f9c <RCCEx_PLLSAI2_Config>
 80018e8:	4603      	mov	r3, r0
 80018ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80018ec:	e003      	b.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	74fb      	strb	r3, [r7, #19]
      break;
 80018f2:	e000      	b.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80018f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80018f6:	7cfb      	ldrb	r3, [r7, #19]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d10b      	bne.n	8001914 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80018fc:	4b52      	ldr	r3, [pc, #328]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001902:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800190a:	494f      	ldr	r1, [pc, #316]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800190c:	4313      	orrs	r3, r2
 800190e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001912:	e001      	b.n	8001918 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001914:	7cfb      	ldrb	r3, [r7, #19]
 8001916:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 80a0 	beq.w	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800192a:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800193a:	2300      	movs	r3, #0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00d      	beq.n	800195c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001940:	4b41      	ldr	r3, [pc, #260]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001944:	4a40      	ldr	r2, [pc, #256]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194a:	6593      	str	r3, [r2, #88]	; 0x58
 800194c:	4b3e      	ldr	r3, [pc, #248]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800194e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001958:	2301      	movs	r3, #1
 800195a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800195c:	4b3b      	ldr	r3, [pc, #236]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a3a      	ldr	r2, [pc, #232]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001966:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001968:	f7fe fe1a 	bl	80005a0 <HAL_GetTick>
 800196c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800196e:	e009      	b.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001970:	f7fe fe16 	bl	80005a0 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d902      	bls.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	74fb      	strb	r3, [r7, #19]
        break;
 8001982:	e005      	b.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001984:	4b31      	ldr	r3, [pc, #196]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0ef      	beq.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001990:	7cfb      	ldrb	r3, [r7, #19]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d15c      	bne.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001996:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d01f      	beq.n	80019e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d019      	beq.n	80019e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80019b4:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80019c0:	4b21      	ldr	r3, [pc, #132]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c6:	4a20      	ldr	r2, [pc, #128]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80019d0:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d6:	4a1c      	ldr	r2, [pc, #112]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80019e0:	4a19      	ldr	r2, [pc, #100]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d016      	beq.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f2:	f7fe fdd5 	bl	80005a0 <HAL_GetTick>
 80019f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019f8:	e00b      	b.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019fa:	f7fe fdd1 	bl	80005a0 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d902      	bls.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	74fb      	strb	r3, [r7, #19]
            break;
 8001a10:	e006      	b.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a12:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0ec      	beq.n	80019fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001a20:	7cfb      	ldrb	r3, [r7, #19]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10c      	bne.n	8001a40 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a36:	4904      	ldr	r1, [pc, #16]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001a3e:	e009      	b.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001a40:	7cfb      	ldrb	r3, [r7, #19]
 8001a42:	74bb      	strb	r3, [r7, #18]
 8001a44:	e006      	b.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a50:	7cfb      	ldrb	r3, [r7, #19]
 8001a52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a54:	7c7b      	ldrb	r3, [r7, #17]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d105      	bne.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a5a:	4b9e      	ldr	r3, [pc, #632]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5e:	4a9d      	ldr	r2, [pc, #628]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00a      	beq.n	8001a88 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a72:	4b98      	ldr	r3, [pc, #608]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a78:	f023 0203 	bic.w	r2, r3, #3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a80:	4994      	ldr	r1, [pc, #592]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d00a      	beq.n	8001aaa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a94:	4b8f      	ldr	r3, [pc, #572]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9a:	f023 020c 	bic.w	r2, r3, #12
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa2:	498c      	ldr	r1, [pc, #560]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00a      	beq.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ab6:	4b87      	ldr	r3, [pc, #540]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001abc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	4983      	ldr	r1, [pc, #524]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00a      	beq.n	8001aee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001ad8:	4b7e      	ldr	r3, [pc, #504]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ade:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	497b      	ldr	r1, [pc, #492]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0310 	and.w	r3, r3, #16
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00a      	beq.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001afa:	4b76      	ldr	r3, [pc, #472]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b08:	4972      	ldr	r1, [pc, #456]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0320 	and.w	r3, r3, #32
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00a      	beq.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001b1c:	4b6d      	ldr	r3, [pc, #436]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	496a      	ldr	r1, [pc, #424]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00a      	beq.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001b3e:	4b65      	ldr	r3, [pc, #404]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4c:	4961      	ldr	r1, [pc, #388]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00a      	beq.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001b60:	4b5c      	ldr	r3, [pc, #368]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b6e:	4959      	ldr	r1, [pc, #356]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00a      	beq.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b82:	4b54      	ldr	r3, [pc, #336]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b90:	4950      	ldr	r1, [pc, #320]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00a      	beq.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ba4:	4b4b      	ldr	r3, [pc, #300]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001baa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb2:	4948      	ldr	r1, [pc, #288]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00a      	beq.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001bc6:	4b43      	ldr	r3, [pc, #268]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd4:	493f      	ldr	r1, [pc, #252]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d028      	beq.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001be8:	4b3a      	ldr	r3, [pc, #232]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bf6:	4937      	ldr	r1, [pc, #220]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c06:	d106      	bne.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001c08:	4b32      	ldr	r3, [pc, #200]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	4a31      	ldr	r2, [pc, #196]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c12:	60d3      	str	r3, [r2, #12]
 8001c14:	e011      	b.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c1e:	d10c      	bne.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3304      	adds	r3, #4
 8001c24:	2101      	movs	r1, #1
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 f8c8 	bl	8001dbc <RCCEx_PLLSAI1_Config>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001c30:	7cfb      	ldrb	r3, [r7, #19]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8001c36:	7cfb      	ldrb	r3, [r7, #19]
 8001c38:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d028      	beq.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001c46:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c4c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c54:	491f      	ldr	r1, [pc, #124]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c64:	d106      	bne.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001c66:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	4a1a      	ldr	r2, [pc, #104]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c70:	60d3      	str	r3, [r2, #12]
 8001c72:	e011      	b.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c7c:	d10c      	bne.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3304      	adds	r3, #4
 8001c82:	2101      	movs	r1, #1
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 f899 	bl	8001dbc <RCCEx_PLLSAI1_Config>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001c8e:	7cfb      	ldrb	r3, [r7, #19]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8001c94:	7cfb      	ldrb	r3, [r7, #19]
 8001c96:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d02b      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001caa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cb2:	4908      	ldr	r1, [pc, #32]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001cc2:	d109      	bne.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001cc4:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	4a02      	ldr	r2, [pc, #8]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cce:	60d3      	str	r3, [r2, #12]
 8001cd0:	e014      	b.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001cd2:	bf00      	nop
 8001cd4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cdc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ce0:	d10c      	bne.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f000 f867 	bl	8001dbc <RCCEx_PLLSAI1_Config>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001cf2:	7cfb      	ldrb	r3, [r7, #19]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8001cf8:	7cfb      	ldrb	r3, [r7, #19]
 8001cfa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d02f      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d08:	4b2b      	ldr	r3, [pc, #172]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d16:	4928      	ldr	r1, [pc, #160]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d26:	d10d      	bne.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	2102      	movs	r1, #2
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 f844 	bl	8001dbc <RCCEx_PLLSAI1_Config>
 8001d34:	4603      	mov	r3, r0
 8001d36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001d38:	7cfb      	ldrb	r3, [r7, #19]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d014      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001d3e:	7cfb      	ldrb	r3, [r7, #19]
 8001d40:	74bb      	strb	r3, [r7, #18]
 8001d42:	e011      	b.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d4c:	d10c      	bne.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3320      	adds	r3, #32
 8001d52:	2102      	movs	r1, #2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f000 f921 	bl	8001f9c <RCCEx_PLLSAI2_Config>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001d5e:	7cfb      	ldrb	r3, [r7, #19]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001d64:	7cfb      	ldrb	r3, [r7, #19]
 8001d66:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00a      	beq.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001d74:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d7a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d82:	490d      	ldr	r1, [pc, #52]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00b      	beq.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001da6:	4904      	ldr	r1, [pc, #16]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001dae:	7cbb      	ldrb	r3, [r7, #18]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40021000 	.word	0x40021000

08001dbc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001dca:	4b73      	ldr	r3, [pc, #460]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d018      	beq.n	8001e08 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001dd6:	4b70      	ldr	r3, [pc, #448]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	f003 0203 	and.w	r2, r3, #3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d10d      	bne.n	8001e02 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
       ||
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d009      	beq.n	8001e02 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001dee:	4b6a      	ldr	r3, [pc, #424]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	091b      	lsrs	r3, r3, #4
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
       ||
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d044      	beq.n	8001e8c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	73fb      	strb	r3, [r7, #15]
 8001e06:	e041      	b.n	8001e8c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d00c      	beq.n	8001e2a <RCCEx_PLLSAI1_Config+0x6e>
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d013      	beq.n	8001e3c <RCCEx_PLLSAI1_Config+0x80>
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d120      	bne.n	8001e5a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001e18:	4b5f      	ldr	r3, [pc, #380]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d11d      	bne.n	8001e60 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e28:	e01a      	b.n	8001e60 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001e2a:	4b5b      	ldr	r3, [pc, #364]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d116      	bne.n	8001e64 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e3a:	e013      	b.n	8001e64 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001e3c:	4b56      	ldr	r3, [pc, #344]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10f      	bne.n	8001e68 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001e48:	4b53      	ldr	r3, [pc, #332]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d109      	bne.n	8001e68 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001e58:	e006      	b.n	8001e68 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	73fb      	strb	r3, [r7, #15]
      break;
 8001e5e:	e004      	b.n	8001e6a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001e60:	bf00      	nop
 8001e62:	e002      	b.n	8001e6a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001e64:	bf00      	nop
 8001e66:	e000      	b.n	8001e6a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001e68:	bf00      	nop
    }

    if(status == HAL_OK)
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10d      	bne.n	8001e8c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001e70:	4b49      	ldr	r3, [pc, #292]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6819      	ldr	r1, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	3b01      	subs	r3, #1
 8001e82:	011b      	lsls	r3, r3, #4
 8001e84:	430b      	orrs	r3, r1
 8001e86:	4944      	ldr	r1, [pc, #272]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d17d      	bne.n	8001f8e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001e92:	4b41      	ldr	r3, [pc, #260]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a40      	ldr	r2, [pc, #256]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e9e:	f7fe fb7f 	bl	80005a0 <HAL_GetTick>
 8001ea2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001ea4:	e009      	b.n	8001eba <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001ea6:	f7fe fb7b 	bl	80005a0 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d902      	bls.n	8001eba <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	73fb      	strb	r3, [r7, #15]
        break;
 8001eb8:	e005      	b.n	8001ec6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001eba:	4b37      	ldr	r3, [pc, #220]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1ef      	bne.n	8001ea6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d160      	bne.n	8001f8e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d111      	bne.n	8001ef6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001ed2:	4b31      	ldr	r3, [pc, #196]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8001eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6892      	ldr	r2, [r2, #8]
 8001ee2:	0211      	lsls	r1, r2, #8
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	68d2      	ldr	r2, [r2, #12]
 8001ee8:	0912      	lsrs	r2, r2, #4
 8001eea:	0452      	lsls	r2, r2, #17
 8001eec:	430a      	orrs	r2, r1
 8001eee:	492a      	ldr	r1, [pc, #168]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	610b      	str	r3, [r1, #16]
 8001ef4:	e027      	b.n	8001f46 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d112      	bne.n	8001f22 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001efc:	4b26      	ldr	r3, [pc, #152]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001f04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6892      	ldr	r2, [r2, #8]
 8001f0c:	0211      	lsls	r1, r2, #8
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6912      	ldr	r2, [r2, #16]
 8001f12:	0852      	lsrs	r2, r2, #1
 8001f14:	3a01      	subs	r2, #1
 8001f16:	0552      	lsls	r2, r2, #21
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	491f      	ldr	r1, [pc, #124]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	610b      	str	r3, [r1, #16]
 8001f20:	e011      	b.n	8001f46 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f22:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001f2a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6892      	ldr	r2, [r2, #8]
 8001f32:	0211      	lsls	r1, r2, #8
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6952      	ldr	r2, [r2, #20]
 8001f38:	0852      	lsrs	r2, r2, #1
 8001f3a:	3a01      	subs	r2, #1
 8001f3c:	0652      	lsls	r2, r2, #25
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	4915      	ldr	r1, [pc, #84]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001f46:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a13      	ldr	r2, [pc, #76]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f50:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f52:	f7fe fb25 	bl	80005a0 <HAL_GetTick>
 8001f56:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001f58:	e009      	b.n	8001f6e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001f5a:	f7fe fb21 	bl	80005a0 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d902      	bls.n	8001f6e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	73fb      	strb	r3, [r7, #15]
          break;
 8001f6c:	e005      	b.n	8001f7a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0ef      	beq.n	8001f5a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d106      	bne.n	8001f8e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f82:	691a      	ldr	r2, [r3, #16]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	4903      	ldr	r1, [pc, #12]	; (8001f98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40021000 	.word	0x40021000

08001f9c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001faa:	4b68      	ldr	r3, [pc, #416]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d018      	beq.n	8001fe8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001fb6:	4b65      	ldr	r3, [pc, #404]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	f003 0203 	and.w	r2, r3, #3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d10d      	bne.n	8001fe2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
       ||
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d009      	beq.n	8001fe2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001fce:	4b5f      	ldr	r3, [pc, #380]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	091b      	lsrs	r3, r3, #4
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	1c5a      	adds	r2, r3, #1
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
       ||
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d044      	beq.n	800206c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	73fb      	strb	r3, [r7, #15]
 8001fe6:	e041      	b.n	800206c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d00c      	beq.n	800200a <RCCEx_PLLSAI2_Config+0x6e>
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d013      	beq.n	800201c <RCCEx_PLLSAI2_Config+0x80>
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d120      	bne.n	800203a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001ff8:	4b54      	ldr	r3, [pc, #336]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d11d      	bne.n	8002040 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002008:	e01a      	b.n	8002040 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800200a:	4b50      	ldr	r3, [pc, #320]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002012:	2b00      	cmp	r3, #0
 8002014:	d116      	bne.n	8002044 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800201a:	e013      	b.n	8002044 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800201c:	4b4b      	ldr	r3, [pc, #300]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10f      	bne.n	8002048 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002028:	4b48      	ldr	r3, [pc, #288]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d109      	bne.n	8002048 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002038:	e006      	b.n	8002048 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	73fb      	strb	r3, [r7, #15]
      break;
 800203e:	e004      	b.n	800204a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002040:	bf00      	nop
 8002042:	e002      	b.n	800204a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002044:	bf00      	nop
 8002046:	e000      	b.n	800204a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002048:	bf00      	nop
    }

    if(status == HAL_OK)
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10d      	bne.n	800206c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002050:	4b3e      	ldr	r3, [pc, #248]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6819      	ldr	r1, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	3b01      	subs	r3, #1
 8002062:	011b      	lsls	r3, r3, #4
 8002064:	430b      	orrs	r3, r1
 8002066:	4939      	ldr	r1, [pc, #228]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002068:	4313      	orrs	r3, r2
 800206a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800206c:	7bfb      	ldrb	r3, [r7, #15]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d167      	bne.n	8002142 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002072:	4b36      	ldr	r3, [pc, #216]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a35      	ldr	r2, [pc, #212]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800207c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800207e:	f7fe fa8f 	bl	80005a0 <HAL_GetTick>
 8002082:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002084:	e009      	b.n	800209a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002086:	f7fe fa8b 	bl	80005a0 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d902      	bls.n	800209a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	73fb      	strb	r3, [r7, #15]
        break;
 8002098:	e005      	b.n	80020a6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800209a:	4b2c      	ldr	r3, [pc, #176]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1ef      	bne.n	8002086 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d14a      	bne.n	8002142 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d111      	bne.n	80020d6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80020b2:	4b26      	ldr	r3, [pc, #152]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80020ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6892      	ldr	r2, [r2, #8]
 80020c2:	0211      	lsls	r1, r2, #8
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	68d2      	ldr	r2, [r2, #12]
 80020c8:	0912      	lsrs	r2, r2, #4
 80020ca:	0452      	lsls	r2, r2, #17
 80020cc:	430a      	orrs	r2, r1
 80020ce:	491f      	ldr	r1, [pc, #124]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	614b      	str	r3, [r1, #20]
 80020d4:	e011      	b.n	80020fa <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80020d6:	4b1d      	ldr	r3, [pc, #116]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80020de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6892      	ldr	r2, [r2, #8]
 80020e6:	0211      	lsls	r1, r2, #8
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6912      	ldr	r2, [r2, #16]
 80020ec:	0852      	lsrs	r2, r2, #1
 80020ee:	3a01      	subs	r2, #1
 80020f0:	0652      	lsls	r2, r2, #25
 80020f2:	430a      	orrs	r2, r1
 80020f4:	4915      	ldr	r1, [pc, #84]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80020fa:	4b14      	ldr	r3, [pc, #80]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a13      	ldr	r2, [pc, #76]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002104:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002106:	f7fe fa4b 	bl	80005a0 <HAL_GetTick>
 800210a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800210c:	e009      	b.n	8002122 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800210e:	f7fe fa47 	bl	80005a0 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d902      	bls.n	8002122 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	73fb      	strb	r3, [r7, #15]
          break;
 8002120:	e005      	b.n	800212e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002122:	4b0a      	ldr	r3, [pc, #40]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0ef      	beq.n	800210e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d106      	bne.n	8002142 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002134:	4b05      	ldr	r3, [pc, #20]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002136:	695a      	ldr	r2, [r3, #20]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	4903      	ldr	r1, [pc, #12]	; (800214c <RCCEx_PLLSAI2_Config+0x1b0>)
 800213e:	4313      	orrs	r3, r2
 8002140:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002142:	7bfb      	ldrb	r3, [r7, #15]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40021000 	.word	0x40021000

08002150 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e01d      	b.n	800219e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d106      	bne.n	800217c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f001 fbe8 	bl	800394c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2202      	movs	r2, #2
 8002180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3304      	adds	r3, #4
 800218c:	4619      	mov	r1, r3
 800218e:	4610      	mov	r0, r2
 8002190:	f000 fa34 	bl	80025fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <HAL_TIM_Base_Start_IT+0x50>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2b06      	cmp	r3, #6
 80021d0:	d00b      	beq.n	80021ea <HAL_TIM_Base_Start_IT+0x42>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d8:	d007      	beq.n	80021ea <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f042 0201 	orr.w	r2, r2, #1
 80021e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	00010007 	.word	0x00010007

080021fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b02      	cmp	r3, #2
 8002210:	d122      	bne.n	8002258 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b02      	cmp	r3, #2
 800221e:	d11b      	bne.n	8002258 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f06f 0202 	mvn.w	r2, #2
 8002228:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f9be 	bl	80025c0 <HAL_TIM_IC_CaptureCallback>
 8002244:	e005      	b.n	8002252 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f9b0 	bl	80025ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f9c1 	bl	80025d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	2b04      	cmp	r3, #4
 8002264:	d122      	bne.n	80022ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b04      	cmp	r3, #4
 8002272:	d11b      	bne.n	80022ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f06f 0204 	mvn.w	r2, #4
 800227c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2202      	movs	r2, #2
 8002282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f994 	bl	80025c0 <HAL_TIM_IC_CaptureCallback>
 8002298:	e005      	b.n	80022a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f986 	bl	80025ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 f997 	bl	80025d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d122      	bne.n	8002300 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d11b      	bne.n	8002300 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f06f 0208 	mvn.w	r2, #8
 80022d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2204      	movs	r2, #4
 80022d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f96a 	bl	80025c0 <HAL_TIM_IC_CaptureCallback>
 80022ec:	e005      	b.n	80022fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f95c 	bl	80025ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f96d 	bl	80025d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	f003 0310 	and.w	r3, r3, #16
 800230a:	2b10      	cmp	r3, #16
 800230c:	d122      	bne.n	8002354 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	f003 0310 	and.w	r3, r3, #16
 8002318:	2b10      	cmp	r3, #16
 800231a:	d11b      	bne.n	8002354 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f06f 0210 	mvn.w	r2, #16
 8002324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2208      	movs	r2, #8
 800232a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f940 	bl	80025c0 <HAL_TIM_IC_CaptureCallback>
 8002340:	e005      	b.n	800234e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f932 	bl	80025ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 f943 	bl	80025d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b01      	cmp	r3, #1
 8002360:	d10e      	bne.n	8002380 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b01      	cmp	r3, #1
 800236e:	d107      	bne.n	8002380 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f06f 0201 	mvn.w	r2, #1
 8002378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f001 f8b0 	bl	80034e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800238a:	2b80      	cmp	r3, #128	; 0x80
 800238c:	d10e      	bne.n	80023ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002398:	2b80      	cmp	r3, #128	; 0x80
 800239a:	d107      	bne.n	80023ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 fac2 	bl	8002930 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023ba:	d10e      	bne.n	80023da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c6:	2b80      	cmp	r3, #128	; 0x80
 80023c8:	d107      	bne.n	80023da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80023d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 fab5 	bl	8002944 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e4:	2b40      	cmp	r3, #64	; 0x40
 80023e6:	d10e      	bne.n	8002406 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f2:	2b40      	cmp	r3, #64	; 0x40
 80023f4:	d107      	bne.n	8002406 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 f8f1 	bl	80025e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	f003 0320 	and.w	r3, r3, #32
 8002410:	2b20      	cmp	r3, #32
 8002412:	d10e      	bne.n	8002432 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f003 0320 	and.w	r3, r3, #32
 800241e:	2b20      	cmp	r3, #32
 8002420:	d107      	bne.n	8002432 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f06f 0220 	mvn.w	r2, #32
 800242a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 fa75 	bl	800291c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b084      	sub	sp, #16
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800244a:	2b01      	cmp	r3, #1
 800244c:	d101      	bne.n	8002452 <HAL_TIM_ConfigClockSource+0x18>
 800244e:	2302      	movs	r3, #2
 8002450:	e0a8      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x16a>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2202      	movs	r2, #2
 800245e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002470:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002474:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800247c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2b40      	cmp	r3, #64	; 0x40
 800248c:	d067      	beq.n	800255e <HAL_TIM_ConfigClockSource+0x124>
 800248e:	2b40      	cmp	r3, #64	; 0x40
 8002490:	d80b      	bhi.n	80024aa <HAL_TIM_ConfigClockSource+0x70>
 8002492:	2b10      	cmp	r3, #16
 8002494:	d073      	beq.n	800257e <HAL_TIM_ConfigClockSource+0x144>
 8002496:	2b10      	cmp	r3, #16
 8002498:	d802      	bhi.n	80024a0 <HAL_TIM_ConfigClockSource+0x66>
 800249a:	2b00      	cmp	r3, #0
 800249c:	d06f      	beq.n	800257e <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800249e:	e078      	b.n	8002592 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80024a0:	2b20      	cmp	r3, #32
 80024a2:	d06c      	beq.n	800257e <HAL_TIM_ConfigClockSource+0x144>
 80024a4:	2b30      	cmp	r3, #48	; 0x30
 80024a6:	d06a      	beq.n	800257e <HAL_TIM_ConfigClockSource+0x144>
      break;
 80024a8:	e073      	b.n	8002592 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80024aa:	2b70      	cmp	r3, #112	; 0x70
 80024ac:	d00d      	beq.n	80024ca <HAL_TIM_ConfigClockSource+0x90>
 80024ae:	2b70      	cmp	r3, #112	; 0x70
 80024b0:	d804      	bhi.n	80024bc <HAL_TIM_ConfigClockSource+0x82>
 80024b2:	2b50      	cmp	r3, #80	; 0x50
 80024b4:	d033      	beq.n	800251e <HAL_TIM_ConfigClockSource+0xe4>
 80024b6:	2b60      	cmp	r3, #96	; 0x60
 80024b8:	d041      	beq.n	800253e <HAL_TIM_ConfigClockSource+0x104>
      break;
 80024ba:	e06a      	b.n	8002592 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80024bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024c0:	d066      	beq.n	8002590 <HAL_TIM_ConfigClockSource+0x156>
 80024c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024c6:	d017      	beq.n	80024f8 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80024c8:	e063      	b.n	8002592 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6818      	ldr	r0, [r3, #0]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	6899      	ldr	r1, [r3, #8]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f000 f9a3 	bl	8002824 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	609a      	str	r2, [r3, #8]
      break;
 80024f6:	e04c      	b.n	8002592 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	6899      	ldr	r1, [r3, #8]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f000 f98c 	bl	8002824 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800251a:	609a      	str	r2, [r3, #8]
      break;
 800251c:	e039      	b.n	8002592 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	6859      	ldr	r1, [r3, #4]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	461a      	mov	r2, r3
 800252c:	f000 f900 	bl	8002730 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2150      	movs	r1, #80	; 0x50
 8002536:	4618      	mov	r0, r3
 8002538:	f000 f959 	bl	80027ee <TIM_ITRx_SetConfig>
      break;
 800253c:	e029      	b.n	8002592 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	6859      	ldr	r1, [r3, #4]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	461a      	mov	r2, r3
 800254c:	f000 f91f 	bl	800278e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2160      	movs	r1, #96	; 0x60
 8002556:	4618      	mov	r0, r3
 8002558:	f000 f949 	bl	80027ee <TIM_ITRx_SetConfig>
      break;
 800255c:	e019      	b.n	8002592 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6818      	ldr	r0, [r3, #0]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	6859      	ldr	r1, [r3, #4]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	461a      	mov	r2, r3
 800256c:	f000 f8e0 	bl	8002730 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2140      	movs	r1, #64	; 0x40
 8002576:	4618      	mov	r0, r3
 8002578:	f000 f939 	bl	80027ee <TIM_ITRx_SetConfig>
      break;
 800257c:	e009      	b.n	8002592 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4619      	mov	r1, r3
 8002588:	4610      	mov	r0, r2
 800258a:	f000 f930 	bl	80027ee <TIM_ITRx_SetConfig>
      break;
 800258e:	e000      	b.n	8002592 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002590:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a40      	ldr	r2, [pc, #256]	; (8002710 <TIM_Base_SetConfig+0x114>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d013      	beq.n	800263c <TIM_Base_SetConfig+0x40>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800261a:	d00f      	beq.n	800263c <TIM_Base_SetConfig+0x40>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a3d      	ldr	r2, [pc, #244]	; (8002714 <TIM_Base_SetConfig+0x118>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d00b      	beq.n	800263c <TIM_Base_SetConfig+0x40>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a3c      	ldr	r2, [pc, #240]	; (8002718 <TIM_Base_SetConfig+0x11c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d007      	beq.n	800263c <TIM_Base_SetConfig+0x40>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a3b      	ldr	r2, [pc, #236]	; (800271c <TIM_Base_SetConfig+0x120>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d003      	beq.n	800263c <TIM_Base_SetConfig+0x40>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a3a      	ldr	r2, [pc, #232]	; (8002720 <TIM_Base_SetConfig+0x124>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d108      	bne.n	800264e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002642:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	4313      	orrs	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a2f      	ldr	r2, [pc, #188]	; (8002710 <TIM_Base_SetConfig+0x114>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d01f      	beq.n	8002696 <TIM_Base_SetConfig+0x9a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800265c:	d01b      	beq.n	8002696 <TIM_Base_SetConfig+0x9a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a2c      	ldr	r2, [pc, #176]	; (8002714 <TIM_Base_SetConfig+0x118>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d017      	beq.n	8002696 <TIM_Base_SetConfig+0x9a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a2b      	ldr	r2, [pc, #172]	; (8002718 <TIM_Base_SetConfig+0x11c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d013      	beq.n	8002696 <TIM_Base_SetConfig+0x9a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a2a      	ldr	r2, [pc, #168]	; (800271c <TIM_Base_SetConfig+0x120>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d00f      	beq.n	8002696 <TIM_Base_SetConfig+0x9a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a29      	ldr	r2, [pc, #164]	; (8002720 <TIM_Base_SetConfig+0x124>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00b      	beq.n	8002696 <TIM_Base_SetConfig+0x9a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a28      	ldr	r2, [pc, #160]	; (8002724 <TIM_Base_SetConfig+0x128>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d007      	beq.n	8002696 <TIM_Base_SetConfig+0x9a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a27      	ldr	r2, [pc, #156]	; (8002728 <TIM_Base_SetConfig+0x12c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d003      	beq.n	8002696 <TIM_Base_SetConfig+0x9a>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a26      	ldr	r2, [pc, #152]	; (800272c <TIM_Base_SetConfig+0x130>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d108      	bne.n	80026a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800269c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a10      	ldr	r2, [pc, #64]	; (8002710 <TIM_Base_SetConfig+0x114>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d00f      	beq.n	80026f4 <TIM_Base_SetConfig+0xf8>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a12      	ldr	r2, [pc, #72]	; (8002720 <TIM_Base_SetConfig+0x124>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d00b      	beq.n	80026f4 <TIM_Base_SetConfig+0xf8>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a11      	ldr	r2, [pc, #68]	; (8002724 <TIM_Base_SetConfig+0x128>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d007      	beq.n	80026f4 <TIM_Base_SetConfig+0xf8>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a10      	ldr	r2, [pc, #64]	; (8002728 <TIM_Base_SetConfig+0x12c>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d003      	beq.n	80026f4 <TIM_Base_SetConfig+0xf8>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a0f      	ldr	r2, [pc, #60]	; (800272c <TIM_Base_SetConfig+0x130>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d103      	bne.n	80026fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	691a      	ldr	r2, [r3, #16]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	615a      	str	r2, [r3, #20]
}
 8002702:	bf00      	nop
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40012c00 	.word	0x40012c00
 8002714:	40000400 	.word	0x40000400
 8002718:	40000800 	.word	0x40000800
 800271c:	40000c00 	.word	0x40000c00
 8002720:	40013400 	.word	0x40013400
 8002724:	40014000 	.word	0x40014000
 8002728:	40014400 	.word	0x40014400
 800272c:	40014800 	.word	0x40014800

08002730 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002730:	b480      	push	{r7}
 8002732:	b087      	sub	sp, #28
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	f023 0201 	bic.w	r2, r3, #1
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800275a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f023 030a 	bic.w	r3, r3, #10
 800276c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	4313      	orrs	r3, r2
 8002774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	621a      	str	r2, [r3, #32]
}
 8002782:	bf00      	nop
 8002784:	371c      	adds	r7, #28
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800278e:	b480      	push	{r7}
 8002790:	b087      	sub	sp, #28
 8002792:	af00      	add	r7, sp, #0
 8002794:	60f8      	str	r0, [r7, #12]
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	f023 0210 	bic.w	r2, r3, #16
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	031b      	lsls	r3, r3, #12
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	621a      	str	r2, [r3, #32]
}
 80027e2:	bf00      	nop
 80027e4:	371c      	adds	r7, #28
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b085      	sub	sp, #20
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002804:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4313      	orrs	r3, r2
 800280c:	f043 0307 	orr.w	r3, r3, #7
 8002810:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	609a      	str	r2, [r3, #8]
}
 8002818:	bf00      	nop
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002824:	b480      	push	{r7}
 8002826:	b087      	sub	sp, #28
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800283e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	021a      	lsls	r2, r3, #8
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	431a      	orrs	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	4313      	orrs	r3, r2
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	4313      	orrs	r3, r2
 8002850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	609a      	str	r2, [r3, #8]
}
 8002858:	bf00      	nop
 800285a:	371c      	adds	r7, #28
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002878:	2302      	movs	r3, #2
 800287a:	e045      	b.n	8002908 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a1c      	ldr	r2, [pc, #112]	; (8002914 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d004      	beq.n	80028b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a1b      	ldr	r2, [pc, #108]	; (8002918 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d108      	bne.n	80028c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80028b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4313      	orrs	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028da:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	40012c00 	.word	0x40012c00
 8002918:	40013400 	.word	0x40013400

0800291c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e040      	b.n	80029ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800296e:	2b00      	cmp	r3, #0
 8002970:	d106      	bne.n	8002980 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f001 f83a 	bl	80039f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2224      	movs	r2, #36	; 0x24
 8002984:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0201 	bic.w	r2, r2, #1
 8002994:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f82c 	bl	80029f4 <UART_SetConfig>
 800299c:	4603      	mov	r3, r0
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e022      	b.n	80029ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d002      	beq.n	80029b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 fb68 	bl	8003084 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0201 	orr.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 fbef 	bl	80031c8 <UART_CheckIdleState>
 80029ea:	4603      	mov	r3, r0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029f4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80029f8:	b088      	sub	sp, #32
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4bac      	ldr	r3, [pc, #688]	; (8002cdc <UART_SetConfig+0x2e8>)
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	69f9      	ldr	r1, [r7, #28]
 8002a32:	430b      	orrs	r3, r1
 8002a34:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4aa2      	ldr	r2, [pc, #648]	; (8002ce0 <UART_SetConfig+0x2ec>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d004      	beq.n	8002a66 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	69fa      	ldr	r2, [r7, #28]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	69fa      	ldr	r2, [r7, #28]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a99      	ldr	r2, [pc, #612]	; (8002ce4 <UART_SetConfig+0x2f0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d121      	bne.n	8002ac8 <UART_SetConfig+0xd4>
 8002a84:	4b98      	ldr	r3, [pc, #608]	; (8002ce8 <UART_SetConfig+0x2f4>)
 8002a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	d816      	bhi.n	8002ac0 <UART_SetConfig+0xcc>
 8002a92:	a201      	add	r2, pc, #4	; (adr r2, 8002a98 <UART_SetConfig+0xa4>)
 8002a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a98:	08002aa9 	.word	0x08002aa9
 8002a9c:	08002ab5 	.word	0x08002ab5
 8002aa0:	08002aaf 	.word	0x08002aaf
 8002aa4:	08002abb 	.word	0x08002abb
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	76fb      	strb	r3, [r7, #27]
 8002aac:	e0e8      	b.n	8002c80 <UART_SetConfig+0x28c>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	76fb      	strb	r3, [r7, #27]
 8002ab2:	e0e5      	b.n	8002c80 <UART_SetConfig+0x28c>
 8002ab4:	2304      	movs	r3, #4
 8002ab6:	76fb      	strb	r3, [r7, #27]
 8002ab8:	e0e2      	b.n	8002c80 <UART_SetConfig+0x28c>
 8002aba:	2308      	movs	r3, #8
 8002abc:	76fb      	strb	r3, [r7, #27]
 8002abe:	e0df      	b.n	8002c80 <UART_SetConfig+0x28c>
 8002ac0:	2310      	movs	r3, #16
 8002ac2:	76fb      	strb	r3, [r7, #27]
 8002ac4:	bf00      	nop
 8002ac6:	e0db      	b.n	8002c80 <UART_SetConfig+0x28c>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a87      	ldr	r2, [pc, #540]	; (8002cec <UART_SetConfig+0x2f8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d134      	bne.n	8002b3c <UART_SetConfig+0x148>
 8002ad2:	4b85      	ldr	r3, [pc, #532]	; (8002ce8 <UART_SetConfig+0x2f4>)
 8002ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad8:	f003 030c 	and.w	r3, r3, #12
 8002adc:	2b0c      	cmp	r3, #12
 8002ade:	d829      	bhi.n	8002b34 <UART_SetConfig+0x140>
 8002ae0:	a201      	add	r2, pc, #4	; (adr r2, 8002ae8 <UART_SetConfig+0xf4>)
 8002ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae6:	bf00      	nop
 8002ae8:	08002b1d 	.word	0x08002b1d
 8002aec:	08002b35 	.word	0x08002b35
 8002af0:	08002b35 	.word	0x08002b35
 8002af4:	08002b35 	.word	0x08002b35
 8002af8:	08002b29 	.word	0x08002b29
 8002afc:	08002b35 	.word	0x08002b35
 8002b00:	08002b35 	.word	0x08002b35
 8002b04:	08002b35 	.word	0x08002b35
 8002b08:	08002b23 	.word	0x08002b23
 8002b0c:	08002b35 	.word	0x08002b35
 8002b10:	08002b35 	.word	0x08002b35
 8002b14:	08002b35 	.word	0x08002b35
 8002b18:	08002b2f 	.word	0x08002b2f
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	76fb      	strb	r3, [r7, #27]
 8002b20:	e0ae      	b.n	8002c80 <UART_SetConfig+0x28c>
 8002b22:	2302      	movs	r3, #2
 8002b24:	76fb      	strb	r3, [r7, #27]
 8002b26:	e0ab      	b.n	8002c80 <UART_SetConfig+0x28c>
 8002b28:	2304      	movs	r3, #4
 8002b2a:	76fb      	strb	r3, [r7, #27]
 8002b2c:	e0a8      	b.n	8002c80 <UART_SetConfig+0x28c>
 8002b2e:	2308      	movs	r3, #8
 8002b30:	76fb      	strb	r3, [r7, #27]
 8002b32:	e0a5      	b.n	8002c80 <UART_SetConfig+0x28c>
 8002b34:	2310      	movs	r3, #16
 8002b36:	76fb      	strb	r3, [r7, #27]
 8002b38:	bf00      	nop
 8002b3a:	e0a1      	b.n	8002c80 <UART_SetConfig+0x28c>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a6b      	ldr	r2, [pc, #428]	; (8002cf0 <UART_SetConfig+0x2fc>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d120      	bne.n	8002b88 <UART_SetConfig+0x194>
 8002b46:	4b68      	ldr	r3, [pc, #416]	; (8002ce8 <UART_SetConfig+0x2f4>)
 8002b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002b50:	2b10      	cmp	r3, #16
 8002b52:	d00f      	beq.n	8002b74 <UART_SetConfig+0x180>
 8002b54:	2b10      	cmp	r3, #16
 8002b56:	d802      	bhi.n	8002b5e <UART_SetConfig+0x16a>
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <UART_SetConfig+0x174>
 8002b5c:	e010      	b.n	8002b80 <UART_SetConfig+0x18c>
 8002b5e:	2b20      	cmp	r3, #32
 8002b60:	d005      	beq.n	8002b6e <UART_SetConfig+0x17a>
 8002b62:	2b30      	cmp	r3, #48	; 0x30
 8002b64:	d009      	beq.n	8002b7a <UART_SetConfig+0x186>
 8002b66:	e00b      	b.n	8002b80 <UART_SetConfig+0x18c>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	76fb      	strb	r3, [r7, #27]
 8002b6c:	e088      	b.n	8002c80 <UART_SetConfig+0x28c>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	76fb      	strb	r3, [r7, #27]
 8002b72:	e085      	b.n	8002c80 <UART_SetConfig+0x28c>
 8002b74:	2304      	movs	r3, #4
 8002b76:	76fb      	strb	r3, [r7, #27]
 8002b78:	e082      	b.n	8002c80 <UART_SetConfig+0x28c>
 8002b7a:	2308      	movs	r3, #8
 8002b7c:	76fb      	strb	r3, [r7, #27]
 8002b7e:	e07f      	b.n	8002c80 <UART_SetConfig+0x28c>
 8002b80:	2310      	movs	r3, #16
 8002b82:	76fb      	strb	r3, [r7, #27]
 8002b84:	bf00      	nop
 8002b86:	e07b      	b.n	8002c80 <UART_SetConfig+0x28c>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a59      	ldr	r2, [pc, #356]	; (8002cf4 <UART_SetConfig+0x300>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d120      	bne.n	8002bd4 <UART_SetConfig+0x1e0>
 8002b92:	4b55      	ldr	r3, [pc, #340]	; (8002ce8 <UART_SetConfig+0x2f4>)
 8002b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b98:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002b9c:	2b40      	cmp	r3, #64	; 0x40
 8002b9e:	d00f      	beq.n	8002bc0 <UART_SetConfig+0x1cc>
 8002ba0:	2b40      	cmp	r3, #64	; 0x40
 8002ba2:	d802      	bhi.n	8002baa <UART_SetConfig+0x1b6>
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <UART_SetConfig+0x1c0>
 8002ba8:	e010      	b.n	8002bcc <UART_SetConfig+0x1d8>
 8002baa:	2b80      	cmp	r3, #128	; 0x80
 8002bac:	d005      	beq.n	8002bba <UART_SetConfig+0x1c6>
 8002bae:	2bc0      	cmp	r3, #192	; 0xc0
 8002bb0:	d009      	beq.n	8002bc6 <UART_SetConfig+0x1d2>
 8002bb2:	e00b      	b.n	8002bcc <UART_SetConfig+0x1d8>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	76fb      	strb	r3, [r7, #27]
 8002bb8:	e062      	b.n	8002c80 <UART_SetConfig+0x28c>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	76fb      	strb	r3, [r7, #27]
 8002bbe:	e05f      	b.n	8002c80 <UART_SetConfig+0x28c>
 8002bc0:	2304      	movs	r3, #4
 8002bc2:	76fb      	strb	r3, [r7, #27]
 8002bc4:	e05c      	b.n	8002c80 <UART_SetConfig+0x28c>
 8002bc6:	2308      	movs	r3, #8
 8002bc8:	76fb      	strb	r3, [r7, #27]
 8002bca:	e059      	b.n	8002c80 <UART_SetConfig+0x28c>
 8002bcc:	2310      	movs	r3, #16
 8002bce:	76fb      	strb	r3, [r7, #27]
 8002bd0:	bf00      	nop
 8002bd2:	e055      	b.n	8002c80 <UART_SetConfig+0x28c>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a47      	ldr	r2, [pc, #284]	; (8002cf8 <UART_SetConfig+0x304>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d124      	bne.n	8002c28 <UART_SetConfig+0x234>
 8002bde:	4b42      	ldr	r3, [pc, #264]	; (8002ce8 <UART_SetConfig+0x2f4>)
 8002be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bec:	d012      	beq.n	8002c14 <UART_SetConfig+0x220>
 8002bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bf2:	d802      	bhi.n	8002bfa <UART_SetConfig+0x206>
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d007      	beq.n	8002c08 <UART_SetConfig+0x214>
 8002bf8:	e012      	b.n	8002c20 <UART_SetConfig+0x22c>
 8002bfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bfe:	d006      	beq.n	8002c0e <UART_SetConfig+0x21a>
 8002c00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c04:	d009      	beq.n	8002c1a <UART_SetConfig+0x226>
 8002c06:	e00b      	b.n	8002c20 <UART_SetConfig+0x22c>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	76fb      	strb	r3, [r7, #27]
 8002c0c:	e038      	b.n	8002c80 <UART_SetConfig+0x28c>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	76fb      	strb	r3, [r7, #27]
 8002c12:	e035      	b.n	8002c80 <UART_SetConfig+0x28c>
 8002c14:	2304      	movs	r3, #4
 8002c16:	76fb      	strb	r3, [r7, #27]
 8002c18:	e032      	b.n	8002c80 <UART_SetConfig+0x28c>
 8002c1a:	2308      	movs	r3, #8
 8002c1c:	76fb      	strb	r3, [r7, #27]
 8002c1e:	e02f      	b.n	8002c80 <UART_SetConfig+0x28c>
 8002c20:	2310      	movs	r3, #16
 8002c22:	76fb      	strb	r3, [r7, #27]
 8002c24:	bf00      	nop
 8002c26:	e02b      	b.n	8002c80 <UART_SetConfig+0x28c>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a2c      	ldr	r2, [pc, #176]	; (8002ce0 <UART_SetConfig+0x2ec>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d124      	bne.n	8002c7c <UART_SetConfig+0x288>
 8002c32:	4b2d      	ldr	r3, [pc, #180]	; (8002ce8 <UART_SetConfig+0x2f4>)
 8002c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c40:	d012      	beq.n	8002c68 <UART_SetConfig+0x274>
 8002c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c46:	d802      	bhi.n	8002c4e <UART_SetConfig+0x25a>
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d007      	beq.n	8002c5c <UART_SetConfig+0x268>
 8002c4c:	e012      	b.n	8002c74 <UART_SetConfig+0x280>
 8002c4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c52:	d006      	beq.n	8002c62 <UART_SetConfig+0x26e>
 8002c54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c58:	d009      	beq.n	8002c6e <UART_SetConfig+0x27a>
 8002c5a:	e00b      	b.n	8002c74 <UART_SetConfig+0x280>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	76fb      	strb	r3, [r7, #27]
 8002c60:	e00e      	b.n	8002c80 <UART_SetConfig+0x28c>
 8002c62:	2302      	movs	r3, #2
 8002c64:	76fb      	strb	r3, [r7, #27]
 8002c66:	e00b      	b.n	8002c80 <UART_SetConfig+0x28c>
 8002c68:	2304      	movs	r3, #4
 8002c6a:	76fb      	strb	r3, [r7, #27]
 8002c6c:	e008      	b.n	8002c80 <UART_SetConfig+0x28c>
 8002c6e:	2308      	movs	r3, #8
 8002c70:	76fb      	strb	r3, [r7, #27]
 8002c72:	e005      	b.n	8002c80 <UART_SetConfig+0x28c>
 8002c74:	2310      	movs	r3, #16
 8002c76:	76fb      	strb	r3, [r7, #27]
 8002c78:	bf00      	nop
 8002c7a:	e001      	b.n	8002c80 <UART_SetConfig+0x28c>
 8002c7c:	2310      	movs	r3, #16
 8002c7e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a16      	ldr	r2, [pc, #88]	; (8002ce0 <UART_SetConfig+0x2ec>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	f040 80fa 	bne.w	8002e80 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c8c:	7efb      	ldrb	r3, [r7, #27]
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d836      	bhi.n	8002d00 <UART_SetConfig+0x30c>
 8002c92:	a201      	add	r2, pc, #4	; (adr r2, 8002c98 <UART_SetConfig+0x2a4>)
 8002c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c98:	08002cbd 	.word	0x08002cbd
 8002c9c:	08002d01 	.word	0x08002d01
 8002ca0:	08002cc5 	.word	0x08002cc5
 8002ca4:	08002d01 	.word	0x08002d01
 8002ca8:	08002ccb 	.word	0x08002ccb
 8002cac:	08002d01 	.word	0x08002d01
 8002cb0:	08002d01 	.word	0x08002d01
 8002cb4:	08002d01 	.word	0x08002d01
 8002cb8:	08002cd3 	.word	0x08002cd3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002cbc:	f7fe fd0c 	bl	80016d8 <HAL_RCC_GetPCLK1Freq>
 8002cc0:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002cc2:	e020      	b.n	8002d06 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002cc4:	4b0d      	ldr	r3, [pc, #52]	; (8002cfc <UART_SetConfig+0x308>)
 8002cc6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002cc8:	e01d      	b.n	8002d06 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002cca:	f7fe fc6f 	bl	80015ac <HAL_RCC_GetSysClockFreq>
 8002cce:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002cd0:	e019      	b.n	8002d06 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cd6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002cd8:	e015      	b.n	8002d06 <UART_SetConfig+0x312>
 8002cda:	bf00      	nop
 8002cdc:	efff69f3 	.word	0xefff69f3
 8002ce0:	40008000 	.word	0x40008000
 8002ce4:	40013800 	.word	0x40013800
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40004400 	.word	0x40004400
 8002cf0:	40004800 	.word	0x40004800
 8002cf4:	40004c00 	.word	0x40004c00
 8002cf8:	40005000 	.word	0x40005000
 8002cfc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	74fb      	strb	r3, [r7, #19]
        break;
 8002d04:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 81ac 	beq.w	8003066 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	4413      	add	r3, r2
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d305      	bcc.n	8002d2a <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d902      	bls.n	8002d30 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	74fb      	strb	r3, [r7, #19]
 8002d2e:	e19a      	b.n	8003066 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8002d30:	7efb      	ldrb	r3, [r7, #27]
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	f200 8091 	bhi.w	8002e5a <UART_SetConfig+0x466>
 8002d38:	a201      	add	r2, pc, #4	; (adr r2, 8002d40 <UART_SetConfig+0x34c>)
 8002d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3e:	bf00      	nop
 8002d40:	08002d65 	.word	0x08002d65
 8002d44:	08002e5b 	.word	0x08002e5b
 8002d48:	08002db1 	.word	0x08002db1
 8002d4c:	08002e5b 	.word	0x08002e5b
 8002d50:	08002de5 	.word	0x08002de5
 8002d54:	08002e5b 	.word	0x08002e5b
 8002d58:	08002e5b 	.word	0x08002e5b
 8002d5c:	08002e5b 	.word	0x08002e5b
 8002d60:	08002e31 	.word	0x08002e31
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002d64:	f7fe fcb8 	bl	80016d8 <HAL_RCC_GetPCLK1Freq>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	f04f 0400 	mov.w	r4, #0
 8002d78:	0214      	lsls	r4, r2, #8
 8002d7a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002d7e:	020b      	lsls	r3, r1, #8
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6852      	ldr	r2, [r2, #4]
 8002d84:	0852      	lsrs	r2, r2, #1
 8002d86:	4611      	mov	r1, r2
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	eb13 0b01 	adds.w	fp, r3, r1
 8002d90:	eb44 0c02 	adc.w	ip, r4, r2
 8002d94:	4658      	mov	r0, fp
 8002d96:	4661      	mov	r1, ip
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f04f 0400 	mov.w	r4, #0
 8002da0:	461a      	mov	r2, r3
 8002da2:	4623      	mov	r3, r4
 8002da4:	f7fd fa10 	bl	80001c8 <__aeabi_uldivmod>
 8002da8:	4603      	mov	r3, r0
 8002daa:	460c      	mov	r4, r1
 8002dac:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002dae:	e057      	b.n	8002e60 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	085b      	lsrs	r3, r3, #1
 8002db6:	f04f 0400 	mov.w	r4, #0
 8002dba:	49b1      	ldr	r1, [pc, #708]	; (8003080 <UART_SetConfig+0x68c>)
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	eb13 0b01 	adds.w	fp, r3, r1
 8002dc4:	eb44 0c02 	adc.w	ip, r4, r2
 8002dc8:	4658      	mov	r0, fp
 8002dca:	4661      	mov	r1, ip
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f04f 0400 	mov.w	r4, #0
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4623      	mov	r3, r4
 8002dd8:	f7fd f9f6 	bl	80001c8 <__aeabi_uldivmod>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	460c      	mov	r4, r1
 8002de0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002de2:	e03d      	b.n	8002e60 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002de4:	f7fe fbe2 	bl	80015ac <HAL_RCC_GetSysClockFreq>
 8002de8:	4603      	mov	r3, r0
 8002dea:	4619      	mov	r1, r3
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	f04f 0400 	mov.w	r4, #0
 8002df8:	0214      	lsls	r4, r2, #8
 8002dfa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002dfe:	020b      	lsls	r3, r1, #8
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6852      	ldr	r2, [r2, #4]
 8002e04:	0852      	lsrs	r2, r2, #1
 8002e06:	4611      	mov	r1, r2
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	eb13 0b01 	adds.w	fp, r3, r1
 8002e10:	eb44 0c02 	adc.w	ip, r4, r2
 8002e14:	4658      	mov	r0, fp
 8002e16:	4661      	mov	r1, ip
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f04f 0400 	mov.w	r4, #0
 8002e20:	461a      	mov	r2, r3
 8002e22:	4623      	mov	r3, r4
 8002e24:	f7fd f9d0 	bl	80001c8 <__aeabi_uldivmod>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	460c      	mov	r4, r1
 8002e2c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002e2e:	e017      	b.n	8002e60 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	085b      	lsrs	r3, r3, #1
 8002e36:	f04f 0400 	mov.w	r4, #0
 8002e3a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8002e3e:	f144 0100 	adc.w	r1, r4, #0
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f04f 0400 	mov.w	r4, #0
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	4623      	mov	r3, r4
 8002e4e:	f7fd f9bb 	bl	80001c8 <__aeabi_uldivmod>
 8002e52:	4603      	mov	r3, r0
 8002e54:	460c      	mov	r4, r1
 8002e56:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002e58:	e002      	b.n	8002e60 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	74fb      	strb	r3, [r7, #19]
            break;
 8002e5e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e66:	d308      	bcc.n	8002e7a <UART_SetConfig+0x486>
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e6e:	d204      	bcs.n	8002e7a <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	60da      	str	r2, [r3, #12]
 8002e78:	e0f5      	b.n	8003066 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	74fb      	strb	r3, [r7, #19]
 8002e7e:	e0f2      	b.n	8003066 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e88:	d17f      	bne.n	8002f8a <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8002e8a:	7efb      	ldrb	r3, [r7, #27]
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d85c      	bhi.n	8002f4a <UART_SetConfig+0x556>
 8002e90:	a201      	add	r2, pc, #4	; (adr r2, 8002e98 <UART_SetConfig+0x4a4>)
 8002e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e96:	bf00      	nop
 8002e98:	08002ebd 	.word	0x08002ebd
 8002e9c:	08002edb 	.word	0x08002edb
 8002ea0:	08002ef9 	.word	0x08002ef9
 8002ea4:	08002f4b 	.word	0x08002f4b
 8002ea8:	08002f15 	.word	0x08002f15
 8002eac:	08002f4b 	.word	0x08002f4b
 8002eb0:	08002f4b 	.word	0x08002f4b
 8002eb4:	08002f4b 	.word	0x08002f4b
 8002eb8:	08002f33 	.word	0x08002f33
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002ebc:	f7fe fc0c 	bl	80016d8 <HAL_RCC_GetPCLK1Freq>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	005a      	lsls	r2, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	085b      	lsrs	r3, r3, #1
 8002eca:	441a      	add	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002ed8:	e03a      	b.n	8002f50 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002eda:	f7fe fc13 	bl	8001704 <HAL_RCC_GetPCLK2Freq>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	005a      	lsls	r2, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	085b      	lsrs	r3, r3, #1
 8002ee8:	441a      	add	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002ef6:	e02b      	b.n	8002f50 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	085b      	lsrs	r3, r3, #1
 8002efe:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002f02:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6852      	ldr	r2, [r2, #4]
 8002f0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002f12:	e01d      	b.n	8002f50 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002f14:	f7fe fb4a 	bl	80015ac <HAL_RCC_GetSysClockFreq>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	005a      	lsls	r2, r3, #1
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	085b      	lsrs	r3, r3, #1
 8002f22:	441a      	add	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002f30:	e00e      	b.n	8002f50 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	085b      	lsrs	r3, r3, #1
 8002f38:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002f48:	e002      	b.n	8002f50 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	74fb      	strb	r3, [r7, #19]
        break;
 8002f4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	2b0f      	cmp	r3, #15
 8002f54:	d916      	bls.n	8002f84 <UART_SetConfig+0x590>
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f5c:	d212      	bcs.n	8002f84 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	f023 030f 	bic.w	r3, r3, #15
 8002f66:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	085b      	lsrs	r3, r3, #1
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	897b      	ldrh	r3, [r7, #10]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	897a      	ldrh	r2, [r7, #10]
 8002f80:	60da      	str	r2, [r3, #12]
 8002f82:	e070      	b.n	8003066 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	74fb      	strb	r3, [r7, #19]
 8002f88:	e06d      	b.n	8003066 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8002f8a:	7efb      	ldrb	r3, [r7, #27]
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d859      	bhi.n	8003044 <UART_SetConfig+0x650>
 8002f90:	a201      	add	r2, pc, #4	; (adr r2, 8002f98 <UART_SetConfig+0x5a4>)
 8002f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f96:	bf00      	nop
 8002f98:	08002fbd 	.word	0x08002fbd
 8002f9c:	08002fd9 	.word	0x08002fd9
 8002fa0:	08002ff5 	.word	0x08002ff5
 8002fa4:	08003045 	.word	0x08003045
 8002fa8:	08003011 	.word	0x08003011
 8002fac:	08003045 	.word	0x08003045
 8002fb0:	08003045 	.word	0x08003045
 8002fb4:	08003045 	.word	0x08003045
 8002fb8:	0800302d 	.word	0x0800302d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002fbc:	f7fe fb8c 	bl	80016d8 <HAL_RCC_GetPCLK1Freq>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	085b      	lsrs	r3, r3, #1
 8002fc8:	441a      	add	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002fd6:	e038      	b.n	800304a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002fd8:	f7fe fb94 	bl	8001704 <HAL_RCC_GetPCLK2Freq>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	085b      	lsrs	r3, r3, #1
 8002fe4:	441a      	add	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002ff2:	e02a      	b.n	800304a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	085b      	lsrs	r3, r3, #1
 8002ffa:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002ffe:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6852      	ldr	r2, [r2, #4]
 8003006:	fbb3 f3f2 	udiv	r3, r3, r2
 800300a:	b29b      	uxth	r3, r3
 800300c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800300e:	e01c      	b.n	800304a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003010:	f7fe facc 	bl	80015ac <HAL_RCC_GetSysClockFreq>
 8003014:	4602      	mov	r2, r0
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	085b      	lsrs	r3, r3, #1
 800301c:	441a      	add	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	fbb2 f3f3 	udiv	r3, r2, r3
 8003026:	b29b      	uxth	r3, r3
 8003028:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800302a:	e00e      	b.n	800304a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	085b      	lsrs	r3, r3, #1
 8003032:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	fbb2 f3f3 	udiv	r3, r2, r3
 800303e:	b29b      	uxth	r3, r3
 8003040:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003042:	e002      	b.n	800304a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	74fb      	strb	r3, [r7, #19]
        break;
 8003048:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2b0f      	cmp	r3, #15
 800304e:	d908      	bls.n	8003062 <UART_SetConfig+0x66e>
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003056:	d204      	bcs.n	8003062 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	60da      	str	r2, [r3, #12]
 8003060:	e001      	b.n	8003066 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003072:	7cfb      	ldrb	r3, [r7, #19]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3720      	adds	r7, #32
 8003078:	46bd      	mov	sp, r7
 800307a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800307e:	bf00      	nop
 8003080:	f4240000 	.word	0xf4240000

08003084 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00a      	beq.n	80030ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	f003 0310 	and.w	r3, r3, #16
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00a      	beq.n	8003136 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	f003 0320 	and.w	r3, r3, #32
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003160:	2b00      	cmp	r3, #0
 8003162:	d01a      	beq.n	800319a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003182:	d10a      	bne.n	800319a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	605a      	str	r2, [r3, #4]
  }
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af02      	add	r7, sp, #8
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80031d6:	f7fd f9e3 	bl	80005a0 <HAL_GetTick>
 80031da:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d10e      	bne.n	8003208 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f82a 	bl	8003252 <UART_WaitOnFlagUntilTimeout>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e020      	b.n	800324a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	2b04      	cmp	r3, #4
 8003214:	d10e      	bne.n	8003234 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003216:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f814 	bl	8003252 <UART_WaitOnFlagUntilTimeout>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e00a      	b.n	800324a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2220      	movs	r2, #32
 8003238:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2220      	movs	r2, #32
 800323e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b084      	sub	sp, #16
 8003256:	af00      	add	r7, sp, #0
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	603b      	str	r3, [r7, #0]
 800325e:	4613      	mov	r3, r2
 8003260:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003262:	e02a      	b.n	80032ba <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326a:	d026      	beq.n	80032ba <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800326c:	f7fd f998 	bl	80005a0 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	429a      	cmp	r2, r3
 800327a:	d302      	bcc.n	8003282 <UART_WaitOnFlagUntilTimeout+0x30>
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d11b      	bne.n	80032ba <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003290:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0201 	bic.w	r2, r2, #1
 80032a0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2220      	movs	r2, #32
 80032a6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2220      	movs	r2, #32
 80032ac:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e00f      	b.n	80032da <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	69da      	ldr	r2, [r3, #28]
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	4013      	ands	r3, r2
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	bf0c      	ite	eq
 80032ca:	2301      	moveq	r3, #1
 80032cc:	2300      	movne	r3, #0
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	461a      	mov	r2, r3
 80032d2:	79fb      	ldrb	r3, [r7, #7]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d0c5      	beq.n	8003264 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08a      	sub	sp, #40	; 0x28
 80032e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ea:	f107 0314 	add.w	r3, r7, #20
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	605a      	str	r2, [r3, #4]
 80032f4:	609a      	str	r2, [r3, #8]
 80032f6:	60da      	str	r2, [r3, #12]
 80032f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032fa:	4b2f      	ldr	r3, [pc, #188]	; (80033b8 <MX_GPIO_Init+0xd4>)
 80032fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032fe:	4a2e      	ldr	r2, [pc, #184]	; (80033b8 <MX_GPIO_Init+0xd4>)
 8003300:	f043 0304 	orr.w	r3, r3, #4
 8003304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003306:	4b2c      	ldr	r3, [pc, #176]	; (80033b8 <MX_GPIO_Init+0xd4>)
 8003308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800330a:	f003 0304 	and.w	r3, r3, #4
 800330e:	613b      	str	r3, [r7, #16]
 8003310:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003312:	4b29      	ldr	r3, [pc, #164]	; (80033b8 <MX_GPIO_Init+0xd4>)
 8003314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003316:	4a28      	ldr	r2, [pc, #160]	; (80033b8 <MX_GPIO_Init+0xd4>)
 8003318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800331c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800331e:	4b26      	ldr	r3, [pc, #152]	; (80033b8 <MX_GPIO_Init+0xd4>)
 8003320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800332a:	4b23      	ldr	r3, [pc, #140]	; (80033b8 <MX_GPIO_Init+0xd4>)
 800332c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800332e:	4a22      	ldr	r2, [pc, #136]	; (80033b8 <MX_GPIO_Init+0xd4>)
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003336:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <MX_GPIO_Init+0xd4>)
 8003338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	60bb      	str	r3, [r7, #8]
 8003340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003342:	4b1d      	ldr	r3, [pc, #116]	; (80033b8 <MX_GPIO_Init+0xd4>)
 8003344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003346:	4a1c      	ldr	r2, [pc, #112]	; (80033b8 <MX_GPIO_Init+0xd4>)
 8003348:	f043 0302 	orr.w	r3, r3, #2
 800334c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800334e:	4b1a      	ldr	r3, [pc, #104]	; (80033b8 <MX_GPIO_Init+0xd4>)
 8003350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	607b      	str	r3, [r7, #4]
 8003358:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800335a:	2200      	movs	r2, #0
 800335c:	2120      	movs	r1, #32
 800335e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003362:	f7fd fbe3 	bl	8000b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003366:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800336a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800336c:	4b13      	ldr	r3, [pc, #76]	; (80033bc <MX_GPIO_Init+0xd8>)
 800336e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003374:	f107 0314 	add.w	r3, r7, #20
 8003378:	4619      	mov	r1, r3
 800337a:	4811      	ldr	r0, [pc, #68]	; (80033c0 <MX_GPIO_Init+0xdc>)
 800337c:	f7fd fa2e 	bl	80007dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003380:	2320      	movs	r3, #32
 8003382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003384:	2301      	movs	r3, #1
 8003386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003388:	2300      	movs	r3, #0
 800338a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338c:	2300      	movs	r3, #0
 800338e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003390:	f107 0314 	add.w	r3, r7, #20
 8003394:	4619      	mov	r1, r3
 8003396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800339a:	f7fd fa1f 	bl	80007dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800339e:	2200      	movs	r2, #0
 80033a0:	2100      	movs	r1, #0
 80033a2:	2028      	movs	r0, #40	; 0x28
 80033a4:	f7fd f9e3 	bl	800076e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80033a8:	2028      	movs	r0, #40	; 0x28
 80033aa:	f7fd f9fc 	bl	80007a6 <HAL_NVIC_EnableIRQ>

}
 80033ae:	bf00      	nop
 80033b0:	3728      	adds	r7, #40	; 0x28
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40021000 	.word	0x40021000
 80033bc:	10210000 	.word	0x10210000
 80033c0:	48000800 	.word	0x48000800

080033c4 <_ZN6Switch5reactERK10TimerPulse>:
struct Switch: tinyfsm::Fsm<Switch> {
	virtual void react(Toggle const &) {

	};

	virtual void react(TimerPulse const &) {};
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <_ZN6Switch4exitEv>:
	//virtual void react(Toggle const &) = 0;

	virtual void entry(void) {
	}; /* entry actions in some states */

	void exit(void) {
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
	};
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <_ZN5Blink5entryEv>:
	// alternative: enforce entry actions in all states (pure virtual)
	//virtual void entry(void) = 0;
};

struct Blink: Switch {
	void entry() override {
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]

	};
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <_ZN5Blink5reactERK6Toggle>:

	void react(Toggle const &) override {
 8003402:	b580      	push	{r7, lr}
 8003404:	b082      	sub	sp, #8
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
 800340a:	6039      	str	r1, [r7, #0]
		transit<Off>();
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f919 	bl	8003644 <_ZN7tinyfsm3FsmI6SwitchE7transitI3OffEEvv>
	};
 8003412:	bf00      	nop
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <_ZN5Blink5reactERK10TimerPulse>:

	void react(TimerPulse const &) {
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	6039      	str	r1, [r7, #0]
		 HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003424:	2120      	movs	r1, #32
 8003426:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800342a:	f7fd fb97 	bl	8000b5c <HAL_GPIO_TogglePin>
	}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <_ZN2On5entryEv>:
};

struct On: Switch {
	void entry() override { HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); };
 8003436:	b580      	push	{r7, lr}
 8003438:	b082      	sub	sp, #8
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	2120      	movs	r1, #32
 8003442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003446:	f7fd fb71 	bl	8000b2c <HAL_GPIO_WritePin>
 800344a:	bf00      	nop
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <_ZN2On5reactERK6Toggle>:

	void react(Toggle const &) override { transit<Blink>();};
 8003452:	b580      	push	{r7, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	6039      	str	r1, [r7, #0]
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f90f 	bl	8003680 <_ZN7tinyfsm3FsmI6SwitchE7transitI5BlinkEEvv>
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <_ZN3Off5entryEv>:
};

struct Off: Switch {
	void entry() override {	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); };
 800346a:	b580      	push	{r7, lr}
 800346c:	b082      	sub	sp, #8
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	2120      	movs	r1, #32
 8003476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800347a:	f7fd fb57 	bl	8000b2c <HAL_GPIO_WritePin>
 800347e:	bf00      	nop
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <_ZN3Off5reactERK6Toggle>:

	void react(Toggle const &) override { transit<On>();};
 8003486:	b580      	push	{r7, lr}
 8003488:	b082      	sub	sp, #8
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
 800348e:	6039      	str	r1, [r7, #0]
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 f913 	bl	80036bc <_ZN7tinyfsm3FsmI6SwitchE7transitI2OnEEvv>
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <_ZN7tinyfsm3FsmI6SwitchE17set_initial_stateEv>:
};

FSM_INITIAL_STATE(Switch, Off);
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	4b03      	ldr	r3, [pc, #12]	; (80034b4 <_ZN7tinyfsm3FsmI6SwitchE17set_initial_stateEv+0x14>)
 80034a6:	4a04      	ldr	r2, [pc, #16]	; (80034b8 <_ZN7tinyfsm3FsmI6SwitchE17set_initial_stateEv+0x18>)
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	bf00      	nop
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	20000038 	.word	0x20000038
 80034b8:	20000008 	.word	0x20000008

080034bc <HAL_GPIO_EXTI_Callback>:

using fsm_handle = Switch;

Toggle toggle;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 80034c6:	88fb      	ldrh	r3, [r7, #6]
 80034c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034cc:	d102      	bne.n	80034d4 <HAL_GPIO_EXTI_Callback+0x18>
		fsm_handle::dispatch(toggle);
 80034ce:	4803      	ldr	r0, [pc, #12]	; (80034dc <HAL_GPIO_EXTI_Callback+0x20>)
 80034d0:	f000 f912 	bl	80036f8 <_ZN7tinyfsm3FsmI6SwitchE8dispatchI6ToggleEEvRKT_>
	}
}
 80034d4:	bf00      	nop
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	20000034 	.word	0x20000034

080034e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim14)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
	fsm_handle::dispatch(TimerPulse());
 80034e8:	f107 030c 	add.w	r3, r7, #12
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 f917 	bl	8003720 <_ZN7tinyfsm3FsmI6SwitchE8dispatchI10TimerPulseEEvRKT_>
}
 80034f2:	bf00      	nop
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
	...

080034fc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	fsm_handle::start();
 8003500:	f000 f922 	bl	8003748 <_ZN7tinyfsm3FsmI6SwitchE5startEv>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003504:	f7fc ffe0 	bl	80004c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003508:	f000 f80c 	bl	8003524 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800350c:	f7ff feea 	bl	80032e4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8003510:	f000 fa40 	bl	8003994 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8003514:	f000 f9ca 	bl	80038ac <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8003518:	4801      	ldr	r0, [pc, #4]	; (8003520 <main+0x24>)
 800351a:	f7fe fe45 	bl	80021a8 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800351e:	e7fe      	b.n	800351e <main+0x22>
 8003520:	20000040 	.word	0x20000040

08003524 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003524:	b580      	push	{r7, lr}
 8003526:	b0b8      	sub	sp, #224	; 0xe0
 8003528:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800352a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800352e:	2244      	movs	r2, #68	; 0x44
 8003530:	2100      	movs	r1, #0
 8003532:	4618      	mov	r0, r3
 8003534:	f000 faee 	bl	8003b14 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003538:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	605a      	str	r2, [r3, #4]
 8003542:	609a      	str	r2, [r3, #8]
 8003544:	60da      	str	r2, [r3, #12]
 8003546:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8003548:	463b      	mov	r3, r7
 800354a:	2288      	movs	r2, #136	; 0x88
 800354c:	2100      	movs	r1, #0
 800354e:	4618      	mov	r0, r3
 8003550:	f000 fae0 	bl	8003b14 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003554:	2302      	movs	r3, #2
 8003556:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800355a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800355e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003562:	2310      	movs	r3, #16
 8003564:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003568:	2302      	movs	r3, #2
 800356a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800356e:	2302      	movs	r3, #2
 8003570:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 1;
 8003574:	2301      	movs	r3, #1
 8003576:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 10;
 800357a:	230a      	movs	r3, #10
 800357c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003580:	2307      	movs	r3, #7
 8003582:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003586:	2302      	movs	r3, #2
 8003588:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800358c:	2302      	movs	r3, #2
 800358e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003592:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003596:	4618      	mov	r0, r3
 8003598:	f7fd fb76 	bl	8000c88 <HAL_RCC_OscConfig>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	bf14      	ite	ne
 80035a2:	2301      	movne	r3, #1
 80035a4:	2300      	moveq	r3, #0
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <_Z18SystemClock_Configv+0x8c>
		Error_Handler();
 80035ac:	f000 f843 	bl	8003636 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
 80035b0:	230f      	movs	r3, #15
 80035b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			| RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035b6:	2303      	movs	r3, #3
 80035b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035bc:	2300      	movs	r3, #0
 80035be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80035c2:	2300      	movs	r3, #0
 80035c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035c8:	2300      	movs	r3, #0
 80035ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80035ce:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80035d2:	2104      	movs	r1, #4
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fd ff07 	bl	80013e8 <HAL_RCC_ClockConfig>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bf14      	ite	ne
 80035e0:	2301      	movne	r3, #1
 80035e2:	2300      	moveq	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <_Z18SystemClock_Configv+0xca>
		Error_Handler();
 80035ea:	f000 f824 	bl	8003636 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80035ee:	2302      	movs	r3, #2
 80035f0:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80035f2:	2300      	movs	r3, #0
 80035f4:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80035f6:	463b      	mov	r3, r7
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fe f8f9 	bl	80017f0 <HAL_RCCEx_PeriphCLKConfig>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	bf14      	ite	ne
 8003604:	2301      	movne	r3, #1
 8003606:	2300      	moveq	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <_Z18SystemClock_Configv+0xee>
		Error_Handler();
 800360e:	f000 f812 	bl	8003636 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 8003612:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003616:	f7fd fae1 	bl	8000bdc <HAL_PWREx_ControlVoltageScaling>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	bf14      	ite	ne
 8003620:	2301      	movne	r3, #1
 8003622:	2300      	moveq	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <_Z18SystemClock_Configv+0x10a>
		Error_Handler();
 800362a:	f000 f804 	bl	8003636 <Error_Handler>
	}
}
 800362e:	bf00      	nop
 8003630:	37e0      	adds	r7, #224	; 0xe0
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003636:	b480      	push	{r7}
 8003638:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800363a:	bf00      	nop
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <_ZN7tinyfsm3FsmI6SwitchE7transitI3OffEEvv>:

  /// state transition functions
  protected:

    template<typename S>
    void transit(void) {
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
      static_assert(is_same_fsm<F, S>::value, "transit to different state machine");
      current_state_ptr->exit();
 800364c:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <_ZN7tinyfsm3FsmI6SwitchE7transitI3OffEEvv+0x34>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff fec2 	bl	80033da <_ZN6Switch4exitEv>
      current_state_ptr = &_state_instance<S>::value;
 8003656:	4b08      	ldr	r3, [pc, #32]	; (8003678 <_ZN7tinyfsm3FsmI6SwitchE7transitI3OffEEvv+0x34>)
 8003658:	4a08      	ldr	r2, [pc, #32]	; (800367c <_ZN7tinyfsm3FsmI6SwitchE7transitI3OffEEvv+0x38>)
 800365a:	601a      	str	r2, [r3, #0]
      current_state_ptr->entry();
 800365c:	4b06      	ldr	r3, [pc, #24]	; (8003678 <_ZN7tinyfsm3FsmI6SwitchE7transitI3OffEEvv+0x34>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	4b05      	ldr	r3, [pc, #20]	; (8003678 <_ZN7tinyfsm3FsmI6SwitchE7transitI3OffEEvv+0x34>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	3308      	adds	r3, #8
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4610      	mov	r0, r2
 800366c:	4798      	blx	r3
    }
 800366e:	bf00      	nop
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	20000038 	.word	0x20000038
 800367c:	20000008 	.word	0x20000008

08003680 <_ZN7tinyfsm3FsmI6SwitchE7transitI5BlinkEEvv>:
    void transit(void) {
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
      current_state_ptr->exit();
 8003688:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <_ZN7tinyfsm3FsmI6SwitchE7transitI5BlinkEEvv+0x34>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff fea4 	bl	80033da <_ZN6Switch4exitEv>
      current_state_ptr = &_state_instance<S>::value;
 8003692:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <_ZN7tinyfsm3FsmI6SwitchE7transitI5BlinkEEvv+0x34>)
 8003694:	4a08      	ldr	r2, [pc, #32]	; (80036b8 <_ZN7tinyfsm3FsmI6SwitchE7transitI5BlinkEEvv+0x38>)
 8003696:	601a      	str	r2, [r3, #0]
      current_state_ptr->entry();
 8003698:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <_ZN7tinyfsm3FsmI6SwitchE7transitI5BlinkEEvv+0x34>)
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <_ZN7tinyfsm3FsmI6SwitchE7transitI5BlinkEEvv+0x34>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	3308      	adds	r3, #8
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4610      	mov	r0, r2
 80036a8:	4798      	blx	r3
    }
 80036aa:	bf00      	nop
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20000038 	.word	0x20000038
 80036b8:	2000000c 	.word	0x2000000c

080036bc <_ZN7tinyfsm3FsmI6SwitchE7transitI2OnEEvv>:
    void transit(void) {
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
      current_state_ptr->exit();
 80036c4:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <_ZN7tinyfsm3FsmI6SwitchE7transitI2OnEEvv+0x34>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff fe86 	bl	80033da <_ZN6Switch4exitEv>
      current_state_ptr = &_state_instance<S>::value;
 80036ce:	4b08      	ldr	r3, [pc, #32]	; (80036f0 <_ZN7tinyfsm3FsmI6SwitchE7transitI2OnEEvv+0x34>)
 80036d0:	4a08      	ldr	r2, [pc, #32]	; (80036f4 <_ZN7tinyfsm3FsmI6SwitchE7transitI2OnEEvv+0x38>)
 80036d2:	601a      	str	r2, [r3, #0]
      current_state_ptr->entry();
 80036d4:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <_ZN7tinyfsm3FsmI6SwitchE7transitI2OnEEvv+0x34>)
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <_ZN7tinyfsm3FsmI6SwitchE7transitI2OnEEvv+0x34>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	3308      	adds	r3, #8
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4610      	mov	r0, r2
 80036e4:	4798      	blx	r3
    }
 80036e6:	bf00      	nop
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20000038 	.word	0x20000038
 80036f4:	20000010 	.word	0x20000010

080036f8 <_ZN7tinyfsm3FsmI6SwitchE8dispatchI6ToggleEEvRKT_>:
    static void dispatch(E const & event) {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
      current_state_ptr->react(event);
 8003700:	4b06      	ldr	r3, [pc, #24]	; (800371c <_ZN7tinyfsm3FsmI6SwitchE8dispatchI6ToggleEEvRKT_+0x24>)
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	4b05      	ldr	r3, [pc, #20]	; (800371c <_ZN7tinyfsm3FsmI6SwitchE8dispatchI6ToggleEEvRKT_+0x24>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	4610      	mov	r0, r2
 8003710:	4798      	blx	r3
    }
 8003712:	bf00      	nop
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	20000038 	.word	0x20000038

08003720 <_ZN7tinyfsm3FsmI6SwitchE8dispatchI10TimerPulseEEvRKT_>:
    static void dispatch(E const & event) {
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
      current_state_ptr->react(event);
 8003728:	4b06      	ldr	r3, [pc, #24]	; (8003744 <_ZN7tinyfsm3FsmI6SwitchE8dispatchI10TimerPulseEEvRKT_+0x24>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	4b05      	ldr	r3, [pc, #20]	; (8003744 <_ZN7tinyfsm3FsmI6SwitchE8dispatchI10TimerPulseEEvRKT_+0x24>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	3304      	adds	r3, #4
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	4610      	mov	r0, r2
 800373a:	4798      	blx	r3
    }
 800373c:	bf00      	nop
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20000038 	.word	0x20000038

08003748 <_ZN7tinyfsm3FsmI6SwitchE5startEv>:
    static void start() {
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
      set_initial_state();
 800374c:	f7ff fea8 	bl	80034a0 <_ZN7tinyfsm3FsmI6SwitchE17set_initial_stateEv>
      enter();
 8003750:	f000 f802 	bl	8003758 <_ZN7tinyfsm3FsmI6SwitchE5enterEv>
    }
 8003754:	bf00      	nop
 8003756:	bd80      	pop	{r7, pc}

08003758 <_ZN7tinyfsm3FsmI6SwitchE5enterEv>:
    static void enter() {
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
      current_state_ptr->entry();
 800375c:	4b05      	ldr	r3, [pc, #20]	; (8003774 <_ZN7tinyfsm3FsmI6SwitchE5enterEv+0x1c>)
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	4b04      	ldr	r3, [pc, #16]	; (8003774 <_ZN7tinyfsm3FsmI6SwitchE5enterEv+0x1c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	3308      	adds	r3, #8
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4610      	mov	r0, r2
 800376c:	4798      	blx	r3
    }
 800376e:	bf00      	nop
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	20000038 	.word	0x20000038

08003778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800377e:	4b0f      	ldr	r3, [pc, #60]	; (80037bc <HAL_MspInit+0x44>)
 8003780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003782:	4a0e      	ldr	r2, [pc, #56]	; (80037bc <HAL_MspInit+0x44>)
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	6613      	str	r3, [r2, #96]	; 0x60
 800378a:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <HAL_MspInit+0x44>)
 800378c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	607b      	str	r3, [r7, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003796:	4b09      	ldr	r3, [pc, #36]	; (80037bc <HAL_MspInit+0x44>)
 8003798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379a:	4a08      	ldr	r2, [pc, #32]	; (80037bc <HAL_MspInit+0x44>)
 800379c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a0:	6593      	str	r3, [r2, #88]	; 0x58
 80037a2:	4b06      	ldr	r3, [pc, #24]	; (80037bc <HAL_MspInit+0x44>)
 80037a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037aa:	603b      	str	r3, [r7, #0]
 80037ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40021000 	.word	0x40021000

080037c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80037c4:	bf00      	nop
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037ce:	b480      	push	{r7}
 80037d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037d2:	e7fe      	b.n	80037d2 <HardFault_Handler+0x4>

080037d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037d8:	e7fe      	b.n	80037d8 <MemManage_Handler+0x4>

080037da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037da:	b480      	push	{r7}
 80037dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037de:	e7fe      	b.n	80037de <BusFault_Handler+0x4>

080037e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037e4:	e7fe      	b.n	80037e4 <UsageFault_Handler+0x4>

080037e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037e6:	b480      	push	{r7}
 80037e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037ea:	bf00      	nop
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037f8:	bf00      	nop
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003802:	b480      	push	{r7}
 8003804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003806:	bf00      	nop
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003814:	f7fc feb2 	bl	800057c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003818:	bf00      	nop
 800381a:	bd80      	pop	{r7, pc}

0800381c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003820:	4802      	ldr	r0, [pc, #8]	; (800382c <TIM2_IRQHandler+0x10>)
 8003822:	f7fe fceb 	bl	80021fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003826:	bf00      	nop
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	20000040 	.word	0x20000040

08003830 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003834:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003838:	f7fd f9aa 	bl	8000b90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800383c:	bf00      	nop
 800383e:	bd80      	pop	{r7, pc}

08003840 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003844:	4b17      	ldr	r3, [pc, #92]	; (80038a4 <SystemInit+0x64>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384a:	4a16      	ldr	r2, [pc, #88]	; (80038a4 <SystemInit+0x64>)
 800384c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003854:	4b14      	ldr	r3, [pc, #80]	; (80038a8 <SystemInit+0x68>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a13      	ldr	r2, [pc, #76]	; (80038a8 <SystemInit+0x68>)
 800385a:	f043 0301 	orr.w	r3, r3, #1
 800385e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003860:	4b11      	ldr	r3, [pc, #68]	; (80038a8 <SystemInit+0x68>)
 8003862:	2200      	movs	r2, #0
 8003864:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003866:	4b10      	ldr	r3, [pc, #64]	; (80038a8 <SystemInit+0x68>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a0f      	ldr	r2, [pc, #60]	; (80038a8 <SystemInit+0x68>)
 800386c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003870:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003874:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003876:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <SystemInit+0x68>)
 8003878:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800387c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800387e:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <SystemInit+0x68>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a09      	ldr	r2, [pc, #36]	; (80038a8 <SystemInit+0x68>)
 8003884:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003888:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800388a:	4b07      	ldr	r3, [pc, #28]	; (80038a8 <SystemInit+0x68>)
 800388c:	2200      	movs	r2, #0
 800388e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003890:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <SystemInit+0x64>)
 8003892:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003896:	609a      	str	r2, [r3, #8]
#endif
}
 8003898:	bf00      	nop
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	e000ed00 	.word	0xe000ed00
 80038a8:	40021000 	.word	0x40021000

080038ac <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b088      	sub	sp, #32
 80038b0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038b2:	f107 0310 	add.w	r3, r7, #16
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	605a      	str	r2, [r3, #4]
 80038bc:	609a      	str	r2, [r3, #8]
 80038be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038c0:	1d3b      	adds	r3, r7, #4
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	605a      	str	r2, [r3, #4]
 80038c8:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80038ca:	4b1f      	ldr	r3, [pc, #124]	; (8003948 <MX_TIM2_Init+0x9c>)
 80038cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40000;
 80038d2:	4b1d      	ldr	r3, [pc, #116]	; (8003948 <MX_TIM2_Init+0x9c>)
 80038d4:	f649 4240 	movw	r2, #40000	; 0x9c40
 80038d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038da:	4b1b      	ldr	r3, [pc, #108]	; (8003948 <MX_TIM2_Init+0x9c>)
 80038dc:	2200      	movs	r2, #0
 80038de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80038e0:	4b19      	ldr	r3, [pc, #100]	; (8003948 <MX_TIM2_Init+0x9c>)
 80038e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80038e8:	4b17      	ldr	r3, [pc, #92]	; (8003948 <MX_TIM2_Init+0x9c>)
 80038ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038f0:	4b15      	ldr	r3, [pc, #84]	; (8003948 <MX_TIM2_Init+0x9c>)
 80038f2:	2280      	movs	r2, #128	; 0x80
 80038f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80038f6:	4814      	ldr	r0, [pc, #80]	; (8003948 <MX_TIM2_Init+0x9c>)
 80038f8:	f7fe fc2a 	bl	8002150 <HAL_TIM_Base_Init>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8003902:	f7ff fe98 	bl	8003636 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800390a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800390c:	f107 0310 	add.w	r3, r7, #16
 8003910:	4619      	mov	r1, r3
 8003912:	480d      	ldr	r0, [pc, #52]	; (8003948 <MX_TIM2_Init+0x9c>)
 8003914:	f7fe fd91 	bl	800243a <HAL_TIM_ConfigClockSource>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800391e:	f7ff fe8a 	bl	8003636 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003922:	2300      	movs	r3, #0
 8003924:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800392a:	1d3b      	adds	r3, r7, #4
 800392c:	4619      	mov	r1, r3
 800392e:	4806      	ldr	r0, [pc, #24]	; (8003948 <MX_TIM2_Init+0x9c>)
 8003930:	f7fe ff98 	bl	8002864 <HAL_TIMEx_MasterConfigSynchronization>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800393a:	f7ff fe7c 	bl	8003636 <Error_Handler>
  }

}
 800393e:	bf00      	nop
 8003940:	3720      	adds	r7, #32
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	20000040 	.word	0x20000040

0800394c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800395c:	d113      	bne.n	8003986 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800395e:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <HAL_TIM_Base_MspInit+0x44>)
 8003960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003962:	4a0b      	ldr	r2, [pc, #44]	; (8003990 <HAL_TIM_Base_MspInit+0x44>)
 8003964:	f043 0301 	orr.w	r3, r3, #1
 8003968:	6593      	str	r3, [r2, #88]	; 0x58
 800396a:	4b09      	ldr	r3, [pc, #36]	; (8003990 <HAL_TIM_Base_MspInit+0x44>)
 800396c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003976:	2200      	movs	r2, #0
 8003978:	2100      	movs	r1, #0
 800397a:	201c      	movs	r0, #28
 800397c:	f7fc fef7 	bl	800076e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003980:	201c      	movs	r0, #28
 8003982:	f7fc ff10 	bl	80007a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003986:	bf00      	nop
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	40021000 	.word	0x40021000

08003994 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003998:	4b14      	ldr	r3, [pc, #80]	; (80039ec <MX_USART2_UART_Init+0x58>)
 800399a:	4a15      	ldr	r2, [pc, #84]	; (80039f0 <MX_USART2_UART_Init+0x5c>)
 800399c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800399e:	4b13      	ldr	r3, [pc, #76]	; (80039ec <MX_USART2_UART_Init+0x58>)
 80039a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80039a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039a6:	4b11      	ldr	r3, [pc, #68]	; (80039ec <MX_USART2_UART_Init+0x58>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039ac:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <MX_USART2_UART_Init+0x58>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039b2:	4b0e      	ldr	r3, [pc, #56]	; (80039ec <MX_USART2_UART_Init+0x58>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039b8:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <MX_USART2_UART_Init+0x58>)
 80039ba:	220c      	movs	r2, #12
 80039bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039be:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <MX_USART2_UART_Init+0x58>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039c4:	4b09      	ldr	r3, [pc, #36]	; (80039ec <MX_USART2_UART_Init+0x58>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039ca:	4b08      	ldr	r3, [pc, #32]	; (80039ec <MX_USART2_UART_Init+0x58>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039d0:	4b06      	ldr	r3, [pc, #24]	; (80039ec <MX_USART2_UART_Init+0x58>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80039d6:	4805      	ldr	r0, [pc, #20]	; (80039ec <MX_USART2_UART_Init+0x58>)
 80039d8:	f7fe ffbe 	bl	8002958 <HAL_UART_Init>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80039e2:	f7ff fe28 	bl	8003636 <Error_Handler>
  }

}
 80039e6:	bf00      	nop
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	20000080 	.word	0x20000080
 80039f0:	40004400 	.word	0x40004400

080039f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08a      	sub	sp, #40	; 0x28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039fc:	f107 0314 	add.w	r3, r7, #20
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	605a      	str	r2, [r3, #4]
 8003a06:	609a      	str	r2, [r3, #8]
 8003a08:	60da      	str	r2, [r3, #12]
 8003a0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a17      	ldr	r2, [pc, #92]	; (8003a70 <HAL_UART_MspInit+0x7c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d128      	bne.n	8003a68 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a16:	4b17      	ldr	r3, [pc, #92]	; (8003a74 <HAL_UART_MspInit+0x80>)
 8003a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1a:	4a16      	ldr	r2, [pc, #88]	; (8003a74 <HAL_UART_MspInit+0x80>)
 8003a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a20:	6593      	str	r3, [r2, #88]	; 0x58
 8003a22:	4b14      	ldr	r3, [pc, #80]	; (8003a74 <HAL_UART_MspInit+0x80>)
 8003a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a2e:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <HAL_UART_MspInit+0x80>)
 8003a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a32:	4a10      	ldr	r2, [pc, #64]	; (8003a74 <HAL_UART_MspInit+0x80>)
 8003a34:	f043 0301 	orr.w	r3, r3, #1
 8003a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a3a:	4b0e      	ldr	r3, [pc, #56]	; (8003a74 <HAL_UART_MspInit+0x80>)
 8003a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003a46:	230c      	movs	r3, #12
 8003a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a52:	2303      	movs	r3, #3
 8003a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a56:	2307      	movs	r3, #7
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a5a:	f107 0314 	add.w	r3, r7, #20
 8003a5e:	4619      	mov	r1, r3
 8003a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a64:	f7fc feba 	bl	80007dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003a68:	bf00      	nop
 8003a6a:	3728      	adds	r7, #40	; 0x28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40004400 	.word	0x40004400
 8003a74:	40021000 	.word	0x40021000

08003a78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003a78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ab0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003a7c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003a7e:	e003      	b.n	8003a88 <LoopCopyDataInit>

08003a80 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003a80:	4b0c      	ldr	r3, [pc, #48]	; (8003ab4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003a82:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003a84:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003a86:	3104      	adds	r1, #4

08003a88 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003a88:	480b      	ldr	r0, [pc, #44]	; (8003ab8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003a8a:	4b0c      	ldr	r3, [pc, #48]	; (8003abc <LoopForever+0xe>)
	adds	r2, r0, r1
 8003a8c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003a8e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003a90:	d3f6      	bcc.n	8003a80 <CopyDataInit>
	ldr	r2, =_sbss
 8003a92:	4a0b      	ldr	r2, [pc, #44]	; (8003ac0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003a94:	e002      	b.n	8003a9c <LoopFillZerobss>

08003a96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003a96:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003a98:	f842 3b04 	str.w	r3, [r2], #4

08003a9c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003a9c:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <LoopForever+0x16>)
	cmp	r2, r3
 8003a9e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003aa0:	d3f9      	bcc.n	8003a96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003aa2:	f7ff fecd 	bl	8003840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003aa6:	f000 f811 	bl	8003acc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003aaa:	f7ff fd27 	bl	80034fc <main>

08003aae <LoopForever>:

LoopForever:
    b LoopForever
 8003aae:	e7fe      	b.n	8003aae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003ab0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003ab4:	08003bd0 	.word	0x08003bd0
	ldr	r0, =_sdata
 8003ab8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003abc:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 8003ac0:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8003ac4:	20000100 	.word	0x20000100

08003ac8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ac8:	e7fe      	b.n	8003ac8 <ADC1_2_IRQHandler>
	...

08003acc <__libc_init_array>:
 8003acc:	b570      	push	{r4, r5, r6, lr}
 8003ace:	4e0d      	ldr	r6, [pc, #52]	; (8003b04 <__libc_init_array+0x38>)
 8003ad0:	4c0d      	ldr	r4, [pc, #52]	; (8003b08 <__libc_init_array+0x3c>)
 8003ad2:	1ba4      	subs	r4, r4, r6
 8003ad4:	10a4      	asrs	r4, r4, #2
 8003ad6:	2500      	movs	r5, #0
 8003ad8:	42a5      	cmp	r5, r4
 8003ada:	d109      	bne.n	8003af0 <__libc_init_array+0x24>
 8003adc:	4e0b      	ldr	r6, [pc, #44]	; (8003b0c <__libc_init_array+0x40>)
 8003ade:	4c0c      	ldr	r4, [pc, #48]	; (8003b10 <__libc_init_array+0x44>)
 8003ae0:	f000 f820 	bl	8003b24 <_init>
 8003ae4:	1ba4      	subs	r4, r4, r6
 8003ae6:	10a4      	asrs	r4, r4, #2
 8003ae8:	2500      	movs	r5, #0
 8003aea:	42a5      	cmp	r5, r4
 8003aec:	d105      	bne.n	8003afa <__libc_init_array+0x2e>
 8003aee:	bd70      	pop	{r4, r5, r6, pc}
 8003af0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003af4:	4798      	blx	r3
 8003af6:	3501      	adds	r5, #1
 8003af8:	e7ee      	b.n	8003ad8 <__libc_init_array+0xc>
 8003afa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003afe:	4798      	blx	r3
 8003b00:	3501      	adds	r5, #1
 8003b02:	e7f2      	b.n	8003aea <__libc_init_array+0x1e>
 8003b04:	08003bc8 	.word	0x08003bc8
 8003b08:	08003bc8 	.word	0x08003bc8
 8003b0c:	08003bc8 	.word	0x08003bc8
 8003b10:	08003bcc 	.word	0x08003bcc

08003b14 <memset>:
 8003b14:	4402      	add	r2, r0
 8003b16:	4603      	mov	r3, r0
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d100      	bne.n	8003b1e <memset+0xa>
 8003b1c:	4770      	bx	lr
 8003b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b22:	e7f9      	b.n	8003b18 <memset+0x4>

08003b24 <_init>:
 8003b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b26:	bf00      	nop
 8003b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b2a:	bc08      	pop	{r3}
 8003b2c:	469e      	mov	lr, r3
 8003b2e:	4770      	bx	lr

08003b30 <_fini>:
 8003b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b32:	bf00      	nop
 8003b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b36:	bc08      	pop	{r3}
 8003b38:	469e      	mov	lr, r3
 8003b3a:	4770      	bx	lr
